
Finalyear_project_3_channel_adc_at_500Hz_to_sd_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a12c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800a2cc  0800a2cc  0000b2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a830  0800a830  0000c060  2**0
                  CONTENTS
  4 .ARM          00000008  0800a830  0800a830  0000b830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a838  0800a838  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a838  0800a838  0000b838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a83c  0800a83c  0000b83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800a840  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008b74  20000060  0800a8a0  0000c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008bd4  0800a8a0  0000cbd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017285  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003484  00000000  00000000  00023315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001538  00000000  00000000  000267a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001076  00000000  00000000  00027cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae8d  00000000  00000000  00028d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cb09  00000000  00000000  00043bdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a18e1  00000000  00000000  000606e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00101fc5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005df4  00000000  00000000  00102008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  00107dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a2b4 	.word	0x0800a2b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	0800a2b4 	.word	0x0800a2b4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 feb3 	bl	80012f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f935 	bl	80007f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 fad9 	bl	8000b44 <MX_GPIO_Init>
  MX_DMA_Init();
 8000592:	f000 faa7 	bl	8000ae4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000596:	f000 f997 	bl	80008c8 <MX_ADC1_Init>
  MX_SDIO_SD_Init();
 800059a:	f000 fa03 	bl	80009a4 <MX_SDIO_SD_Init>
  MX_TIM3_Init();
 800059e:	f000 fa21 	bl	80009e4 <MX_TIM3_Init>
  MX_FATFS_Init();
 80005a2:	f006 f90b 	bl	80067bc <MX_FATFS_Init>
  MX_USART2_UART_Init();
 80005a6:	f000 fa73 	bl	8000a90 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Mount SD Card */
   if (f_mount(&fs, "", 1) != FR_OK) {
 80005aa:	2201      	movs	r2, #1
 80005ac:	497d      	ldr	r1, [pc, #500]	@ (80007a4 <main+0x224>)
 80005ae:	487e      	ldr	r0, [pc, #504]	@ (80007a8 <main+0x228>)
 80005b0:	f008 fc66 	bl	8008e80 <f_mount>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <main+0x3e>
     Error_Handler(); // Handle error (LED blink, etc.)
 80005ba:	f000 fb71 	bl	8000ca0 <Error_Handler>
   }

   /* Open File */
   if (f_open(&file_A, "CH1.txt", FA_WRITE | FA_CREATE_ALWAYS) != FR_OK) {
 80005be:	220a      	movs	r2, #10
 80005c0:	497a      	ldr	r1, [pc, #488]	@ (80007ac <main+0x22c>)
 80005c2:	487b      	ldr	r0, [pc, #492]	@ (80007b0 <main+0x230>)
 80005c4:	f008 fca2 	bl	8008f0c <f_open>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <main+0x52>
     Error_Handler();
 80005ce:	f000 fb67 	bl	8000ca0 <Error_Handler>
   }
   if (f_open(&file_B, "CH2.txt", FA_WRITE | FA_CREATE_ALWAYS) != FR_OK) {
 80005d2:	220a      	movs	r2, #10
 80005d4:	4977      	ldr	r1, [pc, #476]	@ (80007b4 <main+0x234>)
 80005d6:	4878      	ldr	r0, [pc, #480]	@ (80007b8 <main+0x238>)
 80005d8:	f008 fc98 	bl	8008f0c <f_open>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <main+0x66>
        Error_Handler();
 80005e2:	f000 fb5d 	bl	8000ca0 <Error_Handler>
      }
   if (f_open(&file_C, "CH3.txt", FA_WRITE | FA_CREATE_ALWAYS) != FR_OK) {
 80005e6:	220a      	movs	r2, #10
 80005e8:	4974      	ldr	r1, [pc, #464]	@ (80007bc <main+0x23c>)
 80005ea:	4875      	ldr	r0, [pc, #468]	@ (80007c0 <main+0x240>)
 80005ec:	f008 fc8e 	bl	8008f0c <f_open>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <main+0x7a>
        Error_Handler();
 80005f6:	f000 fb53 	bl	8000ca0 <Error_Handler>
      }
   /* Start ADC and Timer */
     HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer_A,BUFFER_SIZE );
 80005fa:	f241 1294 	movw	r2, #4500	@ 0x1194
 80005fe:	4971      	ldr	r1, [pc, #452]	@ (80007c4 <main+0x244>)
 8000600:	4871      	ldr	r0, [pc, #452]	@ (80007c8 <main+0x248>)
 8000602:	f001 f85f 	bl	80016c4 <HAL_ADC_Start_DMA>


   // start pwm generation
   if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 8000606:	2100      	movs	r1, #0
 8000608:	4870      	ldr	r0, [pc, #448]	@ (80007cc <main+0x24c>)
 800060a:	f004 fa45 	bl	8004a98 <HAL_TIM_PWM_Start>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <main+0x98>
 	  Error_Handler();
 8000614:	f000 fb44 	bl	8000ca0 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 /* HAL_UART_Transmit(&huart2, (uint8_t*)"while loop start \n", 18, HAL_MAX_DELAY);*/
		  if(flag_buffer_selector == 10 && ready_A == 1) {
 8000618:	4b6d      	ldr	r3, [pc, #436]	@ (80007d0 <main+0x250>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b0a      	cmp	r3, #10
 800061e:	d15e      	bne.n	80006de <main+0x15e>
 8000620:	4b6c      	ldr	r3, [pc, #432]	@ (80007d4 <main+0x254>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b01      	cmp	r3, #1
 8000628:	d159      	bne.n	80006de <main+0x15e>

			  HAL_UART_Transmit(&huart2, (uint8_t*)"writting_blk_A \n", 16, HAL_MAX_DELAY);
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	2210      	movs	r2, #16
 8000630:	4969      	ldr	r1, [pc, #420]	@ (80007d8 <main+0x258>)
 8000632:	486a      	ldr	r0, [pc, #424]	@ (80007dc <main+0x25c>)
 8000634:	f004 ffd4 	bl	80055e0 <HAL_UART_Transmit>
		  	  	        for (int i = 0; i <= BUFFER_SIZE - 3; i = i + 3) {
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	e03a      	b.n	80006b4 <main+0x134>
		  		  	          sprintf(line, "%u\r\n", adc_buffer_A[i]);
 800063e:	4a61      	ldr	r2, [pc, #388]	@ (80007c4 <main+0x244>)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000646:	461a      	mov	r2, r3
 8000648:	4965      	ldr	r1, [pc, #404]	@ (80007e0 <main+0x260>)
 800064a:	4866      	ldr	r0, [pc, #408]	@ (80007e4 <main+0x264>)
 800064c:	f009 fa40 	bl	8009ad0 <siprintf>
		  		  	          f_write(&file_A, line, strlen(line), &bw);
 8000650:	4864      	ldr	r0, [pc, #400]	@ (80007e4 <main+0x264>)
 8000652:	f7ff fdc5 	bl	80001e0 <strlen>
 8000656:	4602      	mov	r2, r0
 8000658:	4b63      	ldr	r3, [pc, #396]	@ (80007e8 <main+0x268>)
 800065a:	4962      	ldr	r1, [pc, #392]	@ (80007e4 <main+0x264>)
 800065c:	4854      	ldr	r0, [pc, #336]	@ (80007b0 <main+0x230>)
 800065e:	f008 fe2d 	bl	80092bc <f_write>
		  		  	          sprintf(line, "%u\r\n", adc_buffer_A[i+1]);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	3301      	adds	r3, #1
 8000666:	4a57      	ldr	r2, [pc, #348]	@ (80007c4 <main+0x244>)
 8000668:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800066c:	461a      	mov	r2, r3
 800066e:	495c      	ldr	r1, [pc, #368]	@ (80007e0 <main+0x260>)
 8000670:	485c      	ldr	r0, [pc, #368]	@ (80007e4 <main+0x264>)
 8000672:	f009 fa2d 	bl	8009ad0 <siprintf>
		  		  	          f_write(&file_B, line, strlen(line), &bw);
 8000676:	485b      	ldr	r0, [pc, #364]	@ (80007e4 <main+0x264>)
 8000678:	f7ff fdb2 	bl	80001e0 <strlen>
 800067c:	4602      	mov	r2, r0
 800067e:	4b5a      	ldr	r3, [pc, #360]	@ (80007e8 <main+0x268>)
 8000680:	4958      	ldr	r1, [pc, #352]	@ (80007e4 <main+0x264>)
 8000682:	484d      	ldr	r0, [pc, #308]	@ (80007b8 <main+0x238>)
 8000684:	f008 fe1a 	bl	80092bc <f_write>
		  		  	          sprintf(line, "%u\r\n", adc_buffer_A[i+2]);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3302      	adds	r3, #2
 800068c:	4a4d      	ldr	r2, [pc, #308]	@ (80007c4 <main+0x244>)
 800068e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000692:	461a      	mov	r2, r3
 8000694:	4952      	ldr	r1, [pc, #328]	@ (80007e0 <main+0x260>)
 8000696:	4853      	ldr	r0, [pc, #332]	@ (80007e4 <main+0x264>)
 8000698:	f009 fa1a 	bl	8009ad0 <siprintf>
		  		  	          f_write(&file_C, line, strlen(line), &bw);
 800069c:	4851      	ldr	r0, [pc, #324]	@ (80007e4 <main+0x264>)
 800069e:	f7ff fd9f 	bl	80001e0 <strlen>
 80006a2:	4602      	mov	r2, r0
 80006a4:	4b50      	ldr	r3, [pc, #320]	@ (80007e8 <main+0x268>)
 80006a6:	494f      	ldr	r1, [pc, #316]	@ (80007e4 <main+0x264>)
 80006a8:	4845      	ldr	r0, [pc, #276]	@ (80007c0 <main+0x240>)
 80006aa:	f008 fe07 	bl	80092bc <f_write>
		  	  	        for (int i = 0; i <= BUFFER_SIZE - 3; i = i + 3) {
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	3303      	adds	r3, #3
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f241 1291 	movw	r2, #4497	@ 0x1191
 80006ba:	4293      	cmp	r3, r2
 80006bc:	ddbf      	ble.n	800063e <main+0xbe>
		  	  	        }
		  	  	      /*  HAL_UART_Transmit(&huart2, (uint8_t*)"success2....\n", 20, HAL_MAX_DELAY);*/
		  	  	        f_sync(&file_A); // Flush to SD card
 80006be:	483c      	ldr	r0, [pc, #240]	@ (80007b0 <main+0x230>)
 80006c0:	f008 ff90 	bl	80095e4 <f_sync>
		  	  	        f_sync(&file_B);
 80006c4:	483c      	ldr	r0, [pc, #240]	@ (80007b8 <main+0x238>)
 80006c6:	f008 ff8d 	bl	80095e4 <f_sync>
		  	  	     	f_sync(&file_C);
 80006ca:	483d      	ldr	r0, [pc, #244]	@ (80007c0 <main+0x240>)
 80006cc:	f008 ff8a 	bl	80095e4 <f_sync>
		  	  	    ready_A = 0;
 80006d0:	4b40      	ldr	r3, [pc, #256]	@ (80007d4 <main+0x254>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	701a      	strb	r2, [r3, #0]
		  	  	    ready_B = 1;
 80006d6:	4b45      	ldr	r3, [pc, #276]	@ (80007ec <main+0x26c>)
 80006d8:	2201      	movs	r2, #1
 80006da:	701a      	strb	r2, [r3, #0]
 80006dc:	e061      	b.n	80007a2 <main+0x222>





		  else if (flag_buffer_selector == 01 && ready_B == 1 ) {
 80006de:	4b3c      	ldr	r3, [pc, #240]	@ (80007d0 <main+0x250>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d198      	bne.n	8000618 <main+0x98>
 80006e6:	4b41      	ldr	r3, [pc, #260]	@ (80007ec <main+0x26c>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d193      	bne.n	8000618 <main+0x98>
			  HAL_UART_Transmit(&huart2, (uint8_t*)"writting_blk_B \n", 16, HAL_MAX_DELAY);
 80006f0:	f04f 33ff 	mov.w	r3, #4294967295
 80006f4:	2210      	movs	r2, #16
 80006f6:	493e      	ldr	r1, [pc, #248]	@ (80007f0 <main+0x270>)
 80006f8:	4838      	ldr	r0, [pc, #224]	@ (80007dc <main+0x25c>)
 80006fa:	f004 ff71 	bl	80055e0 <HAL_UART_Transmit>

		  	        for (int i = 0; i <= BUFFER_SIZE - 3; i = i + 3) {
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	e03a      	b.n	800077a <main+0x1fa>
			  	          sprintf(line, "%u\r\n", adc_buffer_B[i]);
 8000704:	4a3b      	ldr	r2, [pc, #236]	@ (80007f4 <main+0x274>)
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800070c:	461a      	mov	r2, r3
 800070e:	4934      	ldr	r1, [pc, #208]	@ (80007e0 <main+0x260>)
 8000710:	4834      	ldr	r0, [pc, #208]	@ (80007e4 <main+0x264>)
 8000712:	f009 f9dd 	bl	8009ad0 <siprintf>
			  	          f_write(&file_A, line, strlen(line), &bw);
 8000716:	4833      	ldr	r0, [pc, #204]	@ (80007e4 <main+0x264>)
 8000718:	f7ff fd62 	bl	80001e0 <strlen>
 800071c:	4602      	mov	r2, r0
 800071e:	4b32      	ldr	r3, [pc, #200]	@ (80007e8 <main+0x268>)
 8000720:	4930      	ldr	r1, [pc, #192]	@ (80007e4 <main+0x264>)
 8000722:	4823      	ldr	r0, [pc, #140]	@ (80007b0 <main+0x230>)
 8000724:	f008 fdca 	bl	80092bc <f_write>
			  	          sprintf(line, "%u\r\n", adc_buffer_B[i+1]);
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	3301      	adds	r3, #1
 800072c:	4a31      	ldr	r2, [pc, #196]	@ (80007f4 <main+0x274>)
 800072e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000732:	461a      	mov	r2, r3
 8000734:	492a      	ldr	r1, [pc, #168]	@ (80007e0 <main+0x260>)
 8000736:	482b      	ldr	r0, [pc, #172]	@ (80007e4 <main+0x264>)
 8000738:	f009 f9ca 	bl	8009ad0 <siprintf>
			  	          f_write(&file_B, line, strlen(line), &bw);
 800073c:	4829      	ldr	r0, [pc, #164]	@ (80007e4 <main+0x264>)
 800073e:	f7ff fd4f 	bl	80001e0 <strlen>
 8000742:	4602      	mov	r2, r0
 8000744:	4b28      	ldr	r3, [pc, #160]	@ (80007e8 <main+0x268>)
 8000746:	4927      	ldr	r1, [pc, #156]	@ (80007e4 <main+0x264>)
 8000748:	481b      	ldr	r0, [pc, #108]	@ (80007b8 <main+0x238>)
 800074a:	f008 fdb7 	bl	80092bc <f_write>
			  	          sprintf(line, "%u\r\n", adc_buffer_B[i+2]);
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	3302      	adds	r3, #2
 8000752:	4a28      	ldr	r2, [pc, #160]	@ (80007f4 <main+0x274>)
 8000754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000758:	461a      	mov	r2, r3
 800075a:	4921      	ldr	r1, [pc, #132]	@ (80007e0 <main+0x260>)
 800075c:	4821      	ldr	r0, [pc, #132]	@ (80007e4 <main+0x264>)
 800075e:	f009 f9b7 	bl	8009ad0 <siprintf>
			  	          f_write(&file_C, line, strlen(line), &bw);
 8000762:	4820      	ldr	r0, [pc, #128]	@ (80007e4 <main+0x264>)
 8000764:	f7ff fd3c 	bl	80001e0 <strlen>
 8000768:	4602      	mov	r2, r0
 800076a:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <main+0x268>)
 800076c:	491d      	ldr	r1, [pc, #116]	@ (80007e4 <main+0x264>)
 800076e:	4814      	ldr	r0, [pc, #80]	@ (80007c0 <main+0x240>)
 8000770:	f008 fda4 	bl	80092bc <f_write>
		  	        for (int i = 0; i <= BUFFER_SIZE - 3; i = i + 3) {
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	3303      	adds	r3, #3
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	f241 1291 	movw	r2, #4497	@ 0x1191
 8000780:	4293      	cmp	r3, r2
 8000782:	ddbf      	ble.n	8000704 <main+0x184>
		  	        }
		  	      /*  HAL_UART_Transmit(&huart2, (uint8_t*)"success2....\n", 20, HAL_MAX_DELAY);*/
		  	        f_sync(&file_A); // Flush to SD card
 8000784:	480a      	ldr	r0, [pc, #40]	@ (80007b0 <main+0x230>)
 8000786:	f008 ff2d 	bl	80095e4 <f_sync>
		  	        f_sync(&file_B);
 800078a:	480b      	ldr	r0, [pc, #44]	@ (80007b8 <main+0x238>)
 800078c:	f008 ff2a 	bl	80095e4 <f_sync>
		  	     	f_sync(&file_C);
 8000790:	480b      	ldr	r0, [pc, #44]	@ (80007c0 <main+0x240>)
 8000792:	f008 ff27 	bl	80095e4 <f_sync>
		  	  	    ready_A = 1;
 8000796:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <main+0x254>)
 8000798:	2201      	movs	r2, #1
 800079a:	701a      	strb	r2, [r3, #0]
		  	  	    ready_B = 0;
 800079c:	4b13      	ldr	r3, [pc, #76]	@ (80007ec <main+0x26c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
		  if(flag_buffer_selector == 10 && ready_A == 1) {
 80007a2:	e739      	b.n	8000618 <main+0x98>
 80007a4:	0800a2cc 	.word	0x0800a2cc
 80007a8:	20003388 	.word	0x20003388
 80007ac:	0800a2d0 	.word	0x0800a2d0
 80007b0:	200002f8 	.word	0x200002f8
 80007b4:	0800a2d8 	.word	0x0800a2d8
 80007b8:	20001328 	.word	0x20001328
 80007bc:	0800a2e0 	.word	0x0800a2e0
 80007c0:	20002358 	.word	0x20002358
 80007c4:	200043e4 	.word	0x200043e4
 80007c8:	2000007c 	.word	0x2000007c
 80007cc:	20000268 	.word	0x20000268
 80007d0:	20008a34 	.word	0x20008a34
 80007d4:	20000000 	.word	0x20000000
 80007d8:	0800a2e8 	.word	0x0800a2e8
 80007dc:	200002b0 	.word	0x200002b0
 80007e0:	0800a2fc 	.word	0x0800a2fc
 80007e4:	200043c4 	.word	0x200043c4
 80007e8:	200043c0 	.word	0x200043c0
 80007ec:	20000001 	.word	0x20000001
 80007f0:	0800a304 	.word	0x0800a304
 80007f4:	2000670c 	.word	0x2000670c

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b094      	sub	sp, #80	@ 0x50
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 0320 	add.w	r3, r7, #32
 8000802:	2230      	movs	r2, #48	@ 0x30
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f009 f982 	bl	8009b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800081c:	2300      	movs	r3, #0
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	4b27      	ldr	r3, [pc, #156]	@ (80008c0 <SystemClock_Config+0xc8>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000824:	4a26      	ldr	r2, [pc, #152]	@ (80008c0 <SystemClock_Config+0xc8>)
 8000826:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800082a:	6413      	str	r3, [r2, #64]	@ 0x40
 800082c:	4b24      	ldr	r3, [pc, #144]	@ (80008c0 <SystemClock_Config+0xc8>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000838:	2300      	movs	r3, #0
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	4b21      	ldr	r3, [pc, #132]	@ (80008c4 <SystemClock_Config+0xcc>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a20      	ldr	r2, [pc, #128]	@ (80008c4 <SystemClock_Config+0xcc>)
 8000842:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000846:	6013      	str	r3, [r2, #0]
 8000848:	4b1e      	ldr	r3, [pc, #120]	@ (80008c4 <SystemClock_Config+0xcc>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000854:	2302      	movs	r3, #2
 8000856:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000858:	2301      	movs	r3, #1
 800085a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800085c:	2310      	movs	r3, #16
 800085e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000860:	2302      	movs	r3, #2
 8000862:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000864:	2300      	movs	r3, #0
 8000866:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000868:	2308      	movs	r3, #8
 800086a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 800086c:	2350      	movs	r3, #80	@ 0x50
 800086e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000870:	2302      	movs	r3, #2
 8000872:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000874:	2304      	movs	r3, #4
 8000876:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000878:	f107 0320 	add.w	r3, r7, #32
 800087c:	4618      	mov	r0, r3
 800087e:	f002 fa27 	bl	8002cd0 <HAL_RCC_OscConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000888:	f000 fa0a 	bl	8000ca0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088c:	230f      	movs	r3, #15
 800088e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000890:	2302      	movs	r3, #2
 8000892:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000898:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800089c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	2102      	movs	r1, #2
 80008a8:	4618      	mov	r0, r3
 80008aa:	f002 fc89 	bl	80031c0 <HAL_RCC_ClockConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008b4:	f000 f9f4 	bl	8000ca0 <Error_Handler>
  }
}
 80008b8:	bf00      	nop
 80008ba:	3750      	adds	r7, #80	@ 0x50
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40007000 	.word	0x40007000

080008c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ce:	463b      	mov	r3, r7
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008da:	4b30      	ldr	r3, [pc, #192]	@ (800099c <MX_ADC1_Init+0xd4>)
 80008dc:	4a30      	ldr	r2, [pc, #192]	@ (80009a0 <MX_ADC1_Init+0xd8>)
 80008de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008e0:	4b2e      	ldr	r3, [pc, #184]	@ (800099c <MX_ADC1_Init+0xd4>)
 80008e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80008e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008e8:	4b2c      	ldr	r3, [pc, #176]	@ (800099c <MX_ADC1_Init+0xd4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80008ee:	4b2b      	ldr	r3, [pc, #172]	@ (800099c <MX_ADC1_Init+0xd4>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008f4:	4b29      	ldr	r3, [pc, #164]	@ (800099c <MX_ADC1_Init+0xd4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008fa:	4b28      	ldr	r3, [pc, #160]	@ (800099c <MX_ADC1_Init+0xd4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000902:	4b26      	ldr	r3, [pc, #152]	@ (800099c <MX_ADC1_Init+0xd4>)
 8000904:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000908:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800090a:	4b24      	ldr	r3, [pc, #144]	@ (800099c <MX_ADC1_Init+0xd4>)
 800090c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000910:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000912:	4b22      	ldr	r3, [pc, #136]	@ (800099c <MX_ADC1_Init+0xd4>)
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000918:	4b20      	ldr	r3, [pc, #128]	@ (800099c <MX_ADC1_Init+0xd4>)
 800091a:	2203      	movs	r2, #3
 800091c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800091e:	4b1f      	ldr	r3, [pc, #124]	@ (800099c <MX_ADC1_Init+0xd4>)
 8000920:	2201      	movs	r2, #1
 8000922:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000926:	4b1d      	ldr	r3, [pc, #116]	@ (800099c <MX_ADC1_Init+0xd4>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800092c:	481b      	ldr	r0, [pc, #108]	@ (800099c <MX_ADC1_Init+0xd4>)
 800092e:	f000 fd75 	bl	800141c <HAL_ADC_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000938:	f000 f9b2 	bl	8000ca0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800093c:	230a      	movs	r3, #10
 800093e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000940:	2301      	movs	r3, #1
 8000942:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000948:	463b      	mov	r3, r7
 800094a:	4619      	mov	r1, r3
 800094c:	4813      	ldr	r0, [pc, #76]	@ (800099c <MX_ADC1_Init+0xd4>)
 800094e:	f001 f821 	bl	8001994 <HAL_ADC_ConfigChannel>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000958:	f000 f9a2 	bl	8000ca0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800095c:	230b      	movs	r3, #11
 800095e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000960:	2302      	movs	r3, #2
 8000962:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000964:	463b      	mov	r3, r7
 8000966:	4619      	mov	r1, r3
 8000968:	480c      	ldr	r0, [pc, #48]	@ (800099c <MX_ADC1_Init+0xd4>)
 800096a:	f001 f813 	bl	8001994 <HAL_ADC_ConfigChannel>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000974:	f000 f994 	bl	8000ca0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000978:	2308      	movs	r3, #8
 800097a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800097c:	2303      	movs	r3, #3
 800097e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000980:	463b      	mov	r3, r7
 8000982:	4619      	mov	r1, r3
 8000984:	4805      	ldr	r0, [pc, #20]	@ (800099c <MX_ADC1_Init+0xd4>)
 8000986:	f001 f805 	bl	8001994 <HAL_ADC_ConfigChannel>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000990:	f000 f986 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	2000007c 	.word	0x2000007c
 80009a0:	40012000 	.word	0x40012000

080009a4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <MX_SDIO_SD_Init+0x38>)
 80009aa:	4a0d      	ldr	r2, [pc, #52]	@ (80009e0 <MX_SDIO_SD_Init+0x3c>)
 80009ac:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <MX_SDIO_SD_Init+0x38>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80009b4:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <MX_SDIO_SD_Init+0x38>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <MX_SDIO_SD_Init+0x38>)
 80009bc:	2200      	movs	r2, #0
 80009be:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <MX_SDIO_SD_Init+0x38>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80009c6:	4b05      	ldr	r3, [pc, #20]	@ (80009dc <MX_SDIO_SD_Init+0x38>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 10;
 80009cc:	4b03      	ldr	r3, [pc, #12]	@ (80009dc <MX_SDIO_SD_Init+0x38>)
 80009ce:	220a      	movs	r2, #10
 80009d0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	20000124 	.word	0x20000124
 80009e0:	40012c00 	.word	0x40012c00

080009e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	@ 0x28
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ea:	f107 0320 	add.w	r3, r7, #32
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]
 8000a02:	615a      	str	r2, [r3, #20]
 8000a04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a06:	4b20      	ldr	r3, [pc, #128]	@ (8000a88 <MX_TIM3_Init+0xa4>)
 8000a08:	4a20      	ldr	r2, [pc, #128]	@ (8000a8c <MX_TIM3_Init+0xa8>)
 8000a0a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7980;
 8000a0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a88 <MX_TIM3_Init+0xa4>)
 8000a0e:	f641 722c 	movw	r2, #7980	@ 0x1f2c
 8000a12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a14:	4b1c      	ldr	r3, [pc, #112]	@ (8000a88 <MX_TIM3_Init+0xa4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19;
 8000a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a88 <MX_TIM3_Init+0xa4>)
 8000a1c:	2213      	movs	r2, #19
 8000a1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a20:	4b19      	ldr	r3, [pc, #100]	@ (8000a88 <MX_TIM3_Init+0xa4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a26:	4b18      	ldr	r3, [pc, #96]	@ (8000a88 <MX_TIM3_Init+0xa4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a2c:	4816      	ldr	r0, [pc, #88]	@ (8000a88 <MX_TIM3_Init+0xa4>)
 8000a2e:	f003 ffe3 	bl	80049f8 <HAL_TIM_PWM_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000a38:	f000 f932 	bl	8000ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a3c:	2320      	movs	r3, #32
 8000a3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a44:	f107 0320 	add.w	r3, r7, #32
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480f      	ldr	r0, [pc, #60]	@ (8000a88 <MX_TIM3_Init+0xa4>)
 8000a4c:	f004 fcf6 	bl	800543c <HAL_TIMEx_MasterConfigSynchronization>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000a56:	f000 f923 	bl	8000ca0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a5a:	2360      	movs	r3, #96	@ 0x60
 8000a5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4805      	ldr	r0, [pc, #20]	@ (8000a88 <MX_TIM3_Init+0xa4>)
 8000a72:	f004 f9b1 	bl	8004dd8 <HAL_TIM_PWM_ConfigChannel>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000a7c:	f000 f910 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	3728      	adds	r7, #40	@ 0x28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000268 	.word	0x20000268
 8000a8c:	40000400 	.word	0x40000400

08000a90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a94:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <MX_USART2_UART_Init+0x4c>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	@ (8000ae0 <MX_USART2_UART_Init+0x50>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a9a:	4b10      	ldr	r3, [pc, #64]	@ (8000adc <MX_USART2_UART_Init+0x4c>)
 8000a9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <MX_USART2_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <MX_USART2_UART_Init+0x4c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	@ (8000adc <MX_USART2_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <MX_USART2_UART_Init+0x4c>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <MX_USART2_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <MX_USART2_UART_Init+0x4c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	@ (8000adc <MX_USART2_UART_Init+0x4c>)
 8000ac8:	f004 fd3a 	bl	8005540 <HAL_UART_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ad2:	f000 f8e5 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200002b0 	.word	0x200002b0
 8000ae0:	40004400 	.word	0x40004400

08000ae4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b14      	ldr	r3, [pc, #80]	@ (8000b40 <MX_DMA_Init+0x5c>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a13      	ldr	r2, [pc, #76]	@ (8000b40 <MX_DMA_Init+0x5c>)
 8000af4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <MX_DMA_Init+0x5c>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2038      	movs	r0, #56	@ 0x38
 8000b0c:	f001 fad7 	bl	80020be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b10:	2038      	movs	r0, #56	@ 0x38
 8000b12:	f001 faf0 	bl	80020f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2100      	movs	r1, #0
 8000b1a:	203b      	movs	r0, #59	@ 0x3b
 8000b1c:	f001 facf 	bl	80020be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000b20:	203b      	movs	r0, #59	@ 0x3b
 8000b22:	f001 fae8 	bl	80020f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2045      	movs	r0, #69	@ 0x45
 8000b2c:	f001 fac7 	bl	80020be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000b30:	2045      	movs	r0, #69	@ 0x45
 8000b32:	f001 fae0 	bl	80020f6 <HAL_NVIC_EnableIRQ>

}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800

08000b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4a:	f107 030c 	add.w	r3, r7, #12
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	4b27      	ldr	r3, [pc, #156]	@ (8000bfc <MX_GPIO_Init+0xb8>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	4a26      	ldr	r2, [pc, #152]	@ (8000bfc <MX_GPIO_Init+0xb8>)
 8000b64:	f043 0304 	orr.w	r3, r3, #4
 8000b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6a:	4b24      	ldr	r3, [pc, #144]	@ (8000bfc <MX_GPIO_Init+0xb8>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	f003 0304 	and.w	r3, r3, #4
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	4b20      	ldr	r3, [pc, #128]	@ (8000bfc <MX_GPIO_Init+0xb8>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	4a1f      	ldr	r2, [pc, #124]	@ (8000bfc <MX_GPIO_Init+0xb8>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b86:	4b1d      	ldr	r3, [pc, #116]	@ (8000bfc <MX_GPIO_Init+0xb8>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <MX_GPIO_Init+0xb8>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a18      	ldr	r2, [pc, #96]	@ (8000bfc <MX_GPIO_Init+0xb8>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b16      	ldr	r3, [pc, #88]	@ (8000bfc <MX_GPIO_Init+0xb8>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bb4:	4812      	ldr	r0, [pc, #72]	@ (8000c00 <MX_GPIO_Init+0xbc>)
 8000bb6:	f002 f857 	bl	8002c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480b      	ldr	r0, [pc, #44]	@ (8000c00 <MX_GPIO_Init+0xbc>)
 8000bd4:	f001 feac 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000bd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	4619      	mov	r1, r3
 8000bec:	4805      	ldr	r0, [pc, #20]	@ (8000c04 <MX_GPIO_Init+0xc0>)
 8000bee:	f001 fe9f 	bl	8002930 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bf2:	bf00      	nop
 8000bf4:	3720      	adds	r7, #32
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020000 	.word	0x40020000
 8000c04:	40020800 	.word	0x40020800

08000c08 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  if (flag_buffer_selector == 00 || flag_buffer_selector == 01) {
 8000c10:	4b1b      	ldr	r3, [pc, #108]	@ (8000c80 <HAL_ADC_ConvCpltCallback+0x78>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d003      	beq.n	8000c20 <HAL_ADC_ConvCpltCallback+0x18>
 8000c18:	4b19      	ldr	r3, [pc, #100]	@ (8000c80 <HAL_ADC_ConvCpltCallback+0x78>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d113      	bne.n	8000c48 <HAL_ADC_ConvCpltCallback+0x40>
	  HAL_UART_Transmit(&huart2, (uint8_t*)"Buffer_A_filled \n", 17, HAL_MAX_DELAY);
 8000c20:	f04f 33ff 	mov.w	r3, #4294967295
 8000c24:	2211      	movs	r2, #17
 8000c26:	4917      	ldr	r1, [pc, #92]	@ (8000c84 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000c28:	4817      	ldr	r0, [pc, #92]	@ (8000c88 <HAL_ADC_ConvCpltCallback+0x80>)
 8000c2a:	f004 fcd9 	bl	80055e0 <HAL_UART_Transmit>
  	HAL_ADC_Stop_DMA(&hadc1);
 8000c2e:	4817      	ldr	r0, [pc, #92]	@ (8000c8c <HAL_ADC_ConvCpltCallback+0x84>)
 8000c30:	f000 fe38 	bl	80018a4 <HAL_ADC_Stop_DMA>
  	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer_B,BUFFER_SIZE);
 8000c34:	f241 1294 	movw	r2, #4500	@ 0x1194
 8000c38:	4915      	ldr	r1, [pc, #84]	@ (8000c90 <HAL_ADC_ConvCpltCallback+0x88>)
 8000c3a:	4814      	ldr	r0, [pc, #80]	@ (8000c8c <HAL_ADC_ConvCpltCallback+0x84>)
 8000c3c:	f000 fd42 	bl	80016c4 <HAL_ADC_Start_DMA>
  	flag_buffer_selector =10;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <HAL_ADC_ConvCpltCallback+0x78>)
 8000c42:	220a      	movs	r2, #10
 8000c44:	701a      	strb	r2, [r3, #0]
 8000c46:	e012      	b.n	8000c6e <HAL_ADC_ConvCpltCallback+0x66>
  }

  else {
	  HAL_UART_Transmit(&huart2, (uint8_t*)"buffer_B_filled \n", 17, HAL_MAX_DELAY);
 8000c48:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4c:	2211      	movs	r2, #17
 8000c4e:	4911      	ldr	r1, [pc, #68]	@ (8000c94 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000c50:	480d      	ldr	r0, [pc, #52]	@ (8000c88 <HAL_ADC_ConvCpltCallback+0x80>)
 8000c52:	f004 fcc5 	bl	80055e0 <HAL_UART_Transmit>
	  	HAL_ADC_Stop_DMA(&hadc1);
 8000c56:	480d      	ldr	r0, [pc, #52]	@ (8000c8c <HAL_ADC_ConvCpltCallback+0x84>)
 8000c58:	f000 fe24 	bl	80018a4 <HAL_ADC_Stop_DMA>
	  	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer_A,BUFFER_SIZE);
 8000c5c:	f241 1294 	movw	r2, #4500	@ 0x1194
 8000c60:	490d      	ldr	r1, [pc, #52]	@ (8000c98 <HAL_ADC_ConvCpltCallback+0x90>)
 8000c62:	480a      	ldr	r0, [pc, #40]	@ (8000c8c <HAL_ADC_ConvCpltCallback+0x84>)
 8000c64:	f000 fd2e 	bl	80016c4 <HAL_ADC_Start_DMA>
	    flag_buffer_selector = 01;
 8000c68:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <HAL_ADC_ConvCpltCallback+0x78>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	701a      	strb	r2, [r3, #0]

	    }

    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_13); // Optional debug LED toggle
 8000c6e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c72:	480a      	ldr	r0, [pc, #40]	@ (8000c9c <HAL_ADC_ConvCpltCallback+0x94>)
 8000c74:	f002 f811 	bl	8002c9a <HAL_GPIO_TogglePin>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20008a34 	.word	0x20008a34
 8000c84:	0800a318 	.word	0x0800a318
 8000c88:	200002b0 	.word	0x200002b0
 8000c8c:	2000007c 	.word	0x2000007c
 8000c90:	2000670c 	.word	0x2000670c
 8000c94:	0800a32c 	.word	0x0800a32c
 8000c98:	200043e4 	.word	0x200043e4
 8000c9c:	40020000 	.word	0x40020000

08000ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca4:	b672      	cpsid	i
}
 8000ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <Error_Handler+0x8>

08000cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <HAL_MspInit+0x4c>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cba:	4a0f      	ldr	r2, [pc, #60]	@ (8000cf8 <HAL_MspInit+0x4c>)
 8000cbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <HAL_MspInit+0x4c>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	603b      	str	r3, [r7, #0]
 8000cd2:	4b09      	ldr	r3, [pc, #36]	@ (8000cf8 <HAL_MspInit+0x4c>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd6:	4a08      	ldr	r2, [pc, #32]	@ (8000cf8 <HAL_MspInit+0x4c>)
 8000cd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_MspInit+0x4c>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800

08000cfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	@ 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a40      	ldr	r2, [pc, #256]	@ (8000e1c <HAL_ADC_MspInit+0x120>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d179      	bne.n	8000e12 <HAL_ADC_MspInit+0x116>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	4b3f      	ldr	r3, [pc, #252]	@ (8000e20 <HAL_ADC_MspInit+0x124>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d26:	4a3e      	ldr	r2, [pc, #248]	@ (8000e20 <HAL_ADC_MspInit+0x124>)
 8000d28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d2e:	4b3c      	ldr	r3, [pc, #240]	@ (8000e20 <HAL_ADC_MspInit+0x124>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	4b38      	ldr	r3, [pc, #224]	@ (8000e20 <HAL_ADC_MspInit+0x124>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	4a37      	ldr	r2, [pc, #220]	@ (8000e20 <HAL_ADC_MspInit+0x124>)
 8000d44:	f043 0304 	orr.w	r3, r3, #4
 8000d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4a:	4b35      	ldr	r3, [pc, #212]	@ (8000e20 <HAL_ADC_MspInit+0x124>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	f003 0304 	and.w	r3, r3, #4
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	4b31      	ldr	r3, [pc, #196]	@ (8000e20 <HAL_ADC_MspInit+0x124>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	4a30      	ldr	r2, [pc, #192]	@ (8000e20 <HAL_ADC_MspInit+0x124>)
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d66:	4b2e      	ldr	r3, [pc, #184]	@ (8000e20 <HAL_ADC_MspInit+0x124>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d72:	2303      	movs	r3, #3
 8000d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d76:	2303      	movs	r3, #3
 8000d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	4827      	ldr	r0, [pc, #156]	@ (8000e24 <HAL_ADC_MspInit+0x128>)
 8000d86:	f001 fdd3 	bl	8002930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4822      	ldr	r0, [pc, #136]	@ (8000e28 <HAL_ADC_MspInit+0x12c>)
 8000d9e:	f001 fdc7 	bl	8002930 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000da2:	4b22      	ldr	r3, [pc, #136]	@ (8000e2c <HAL_ADC_MspInit+0x130>)
 8000da4:	4a22      	ldr	r2, [pc, #136]	@ (8000e30 <HAL_ADC_MspInit+0x134>)
 8000da6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000da8:	4b20      	ldr	r3, [pc, #128]	@ (8000e2c <HAL_ADC_MspInit+0x130>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dae:	4b1f      	ldr	r3, [pc, #124]	@ (8000e2c <HAL_ADC_MspInit+0x130>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e2c <HAL_ADC_MspInit+0x130>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dba:	4b1c      	ldr	r3, [pc, #112]	@ (8000e2c <HAL_ADC_MspInit+0x130>)
 8000dbc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dc0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e2c <HAL_ADC_MspInit+0x130>)
 8000dc4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000dc8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dca:	4b18      	ldr	r3, [pc, #96]	@ (8000e2c <HAL_ADC_MspInit+0x130>)
 8000dcc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dd0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000dd2:	4b16      	ldr	r3, [pc, #88]	@ (8000e2c <HAL_ADC_MspInit+0x130>)
 8000dd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dd8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000dda:	4b14      	ldr	r3, [pc, #80]	@ (8000e2c <HAL_ADC_MspInit+0x130>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000de0:	4b12      	ldr	r3, [pc, #72]	@ (8000e2c <HAL_ADC_MspInit+0x130>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000de6:	4811      	ldr	r0, [pc, #68]	@ (8000e2c <HAL_ADC_MspInit+0x130>)
 8000de8:	f001 f9a0 	bl	800212c <HAL_DMA_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000df2:	f7ff ff55 	bl	8000ca0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a0c      	ldr	r2, [pc, #48]	@ (8000e2c <HAL_ADC_MspInit+0x130>)
 8000dfa:	639a      	str	r2, [r3, #56]	@ 0x38
 8000dfc:	4a0b      	ldr	r2, [pc, #44]	@ (8000e2c <HAL_ADC_MspInit+0x130>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	2012      	movs	r0, #18
 8000e08:	f001 f959 	bl	80020be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e0c:	2012      	movs	r0, #18
 8000e0e:	f001 f972 	bl	80020f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e12:	bf00      	nop
 8000e14:	3728      	adds	r7, #40	@ 0x28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40012000 	.word	0x40012000
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020800 	.word	0x40020800
 8000e28:	40020400 	.word	0x40020400
 8000e2c:	200000c4 	.word	0x200000c4
 8000e30:	40026410 	.word	0x40026410

08000e34 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08c      	sub	sp, #48	@ 0x30
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 031c 	add.w	r3, r7, #28
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a77      	ldr	r2, [pc, #476]	@ (8001030 <HAL_SD_MspInit+0x1fc>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	f040 80e8 	bne.w	8001028 <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
 8000e5c:	4b75      	ldr	r3, [pc, #468]	@ (8001034 <HAL_SD_MspInit+0x200>)
 8000e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e60:	4a74      	ldr	r2, [pc, #464]	@ (8001034 <HAL_SD_MspInit+0x200>)
 8000e62:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e66:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e68:	4b72      	ldr	r3, [pc, #456]	@ (8001034 <HAL_SD_MspInit+0x200>)
 8000e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e70:	61bb      	str	r3, [r7, #24]
 8000e72:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	4b6e      	ldr	r3, [pc, #440]	@ (8001034 <HAL_SD_MspInit+0x200>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7c:	4a6d      	ldr	r2, [pc, #436]	@ (8001034 <HAL_SD_MspInit+0x200>)
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e84:	4b6b      	ldr	r3, [pc, #428]	@ (8001034 <HAL_SD_MspInit+0x200>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e90:	2300      	movs	r3, #0
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	4b67      	ldr	r3, [pc, #412]	@ (8001034 <HAL_SD_MspInit+0x200>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e98:	4a66      	ldr	r2, [pc, #408]	@ (8001034 <HAL_SD_MspInit+0x200>)
 8000e9a:	f043 0302 	orr.w	r3, r3, #2
 8000e9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea0:	4b64      	ldr	r3, [pc, #400]	@ (8001034 <HAL_SD_MspInit+0x200>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	4b60      	ldr	r3, [pc, #384]	@ (8001034 <HAL_SD_MspInit+0x200>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb4:	4a5f      	ldr	r2, [pc, #380]	@ (8001034 <HAL_SD_MspInit+0x200>)
 8000eb6:	f043 0304 	orr.w	r3, r3, #4
 8000eba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebc:	4b5d      	ldr	r3, [pc, #372]	@ (8001034 <HAL_SD_MspInit+0x200>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PA6     ------> SDIO_CMD
    PB15     ------> SDIO_CK
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ec8:	2340      	movs	r3, #64	@ 0x40
 8000eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ed8:	230c      	movs	r3, #12
 8000eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4855      	ldr	r0, [pc, #340]	@ (8001038 <HAL_SD_MspInit+0x204>)
 8000ee4:	f001 fd24 	bl	8002930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ee8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000efa:	230c      	movs	r3, #12
 8000efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efe:	f107 031c 	add.w	r3, r7, #28
 8000f02:	4619      	mov	r1, r3
 8000f04:	484d      	ldr	r0, [pc, #308]	@ (800103c <HAL_SD_MspInit+0x208>)
 8000f06:	f001 fd13 	bl	8002930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000f1c:	230c      	movs	r3, #12
 8000f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	4619      	mov	r1, r3
 8000f26:	4846      	ldr	r0, [pc, #280]	@ (8001040 <HAL_SD_MspInit+0x20c>)
 8000f28:	f001 fd02 	bl	8002930 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 8000f2c:	4b45      	ldr	r3, [pc, #276]	@ (8001044 <HAL_SD_MspInit+0x210>)
 8000f2e:	4a46      	ldr	r2, [pc, #280]	@ (8001048 <HAL_SD_MspInit+0x214>)
 8000f30:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000f32:	4b44      	ldr	r3, [pc, #272]	@ (8001044 <HAL_SD_MspInit+0x210>)
 8000f34:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f38:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f3a:	4b42      	ldr	r3, [pc, #264]	@ (8001044 <HAL_SD_MspInit+0x210>)
 8000f3c:	2240      	movs	r2, #64	@ 0x40
 8000f3e:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f40:	4b40      	ldr	r3, [pc, #256]	@ (8001044 <HAL_SD_MspInit+0x210>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f46:	4b3f      	ldr	r3, [pc, #252]	@ (8001044 <HAL_SD_MspInit+0x210>)
 8000f48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f4c:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f4e:	4b3d      	ldr	r3, [pc, #244]	@ (8001044 <HAL_SD_MspInit+0x210>)
 8000f50:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f54:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f56:	4b3b      	ldr	r3, [pc, #236]	@ (8001044 <HAL_SD_MspInit+0x210>)
 8000f58:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f5c:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000f5e:	4b39      	ldr	r3, [pc, #228]	@ (8001044 <HAL_SD_MspInit+0x210>)
 8000f60:	2220      	movs	r2, #32
 8000f62:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f64:	4b37      	ldr	r3, [pc, #220]	@ (8001044 <HAL_SD_MspInit+0x210>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f6a:	4b36      	ldr	r3, [pc, #216]	@ (8001044 <HAL_SD_MspInit+0x210>)
 8000f6c:	2204      	movs	r2, #4
 8000f6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f70:	4b34      	ldr	r3, [pc, #208]	@ (8001044 <HAL_SD_MspInit+0x210>)
 8000f72:	2203      	movs	r2, #3
 8000f74:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000f76:	4b33      	ldr	r3, [pc, #204]	@ (8001044 <HAL_SD_MspInit+0x210>)
 8000f78:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f7c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000f7e:	4b31      	ldr	r3, [pc, #196]	@ (8001044 <HAL_SD_MspInit+0x210>)
 8000f80:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000f84:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000f86:	482f      	ldr	r0, [pc, #188]	@ (8001044 <HAL_SD_MspInit+0x210>)
 8000f88:	f001 f8d0 	bl	800212c <HAL_DMA_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <HAL_SD_MspInit+0x162>
    {
      Error_Handler();
 8000f92:	f7ff fe85 	bl	8000ca0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a2a      	ldr	r2, [pc, #168]	@ (8001044 <HAL_SD_MspInit+0x210>)
 8000f9a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f9c:	4a29      	ldr	r2, [pc, #164]	@ (8001044 <HAL_SD_MspInit+0x210>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 8000fa2:	4b2a      	ldr	r3, [pc, #168]	@ (800104c <HAL_SD_MspInit+0x218>)
 8000fa4:	4a2a      	ldr	r2, [pc, #168]	@ (8001050 <HAL_SD_MspInit+0x21c>)
 8000fa6:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000fa8:	4b28      	ldr	r3, [pc, #160]	@ (800104c <HAL_SD_MspInit+0x218>)
 8000faa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000fae:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fb0:	4b26      	ldr	r3, [pc, #152]	@ (800104c <HAL_SD_MspInit+0x218>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb6:	4b25      	ldr	r3, [pc, #148]	@ (800104c <HAL_SD_MspInit+0x218>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fbc:	4b23      	ldr	r3, [pc, #140]	@ (800104c <HAL_SD_MspInit+0x218>)
 8000fbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fc2:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fc4:	4b21      	ldr	r3, [pc, #132]	@ (800104c <HAL_SD_MspInit+0x218>)
 8000fc6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fca:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800104c <HAL_SD_MspInit+0x218>)
 8000fce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fd2:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800104c <HAL_SD_MspInit+0x218>)
 8000fd6:	2220      	movs	r2, #32
 8000fd8:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fda:	4b1c      	ldr	r3, [pc, #112]	@ (800104c <HAL_SD_MspInit+0x218>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800104c <HAL_SD_MspInit+0x218>)
 8000fe2:	2204      	movs	r2, #4
 8000fe4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000fe6:	4b19      	ldr	r3, [pc, #100]	@ (800104c <HAL_SD_MspInit+0x218>)
 8000fe8:	2203      	movs	r2, #3
 8000fea:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000fec:	4b17      	ldr	r3, [pc, #92]	@ (800104c <HAL_SD_MspInit+0x218>)
 8000fee:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000ff4:	4b15      	ldr	r3, [pc, #84]	@ (800104c <HAL_SD_MspInit+0x218>)
 8000ff6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000ffa:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000ffc:	4813      	ldr	r0, [pc, #76]	@ (800104c <HAL_SD_MspInit+0x218>)
 8000ffe:	f001 f895 	bl	800212c <HAL_DMA_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <HAL_SD_MspInit+0x1d8>
    {
      Error_Handler();
 8001008:	f7ff fe4a 	bl	8000ca0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a0f      	ldr	r2, [pc, #60]	@ (800104c <HAL_SD_MspInit+0x218>)
 8001010:	641a      	str	r2, [r3, #64]	@ 0x40
 8001012:	4a0e      	ldr	r2, [pc, #56]	@ (800104c <HAL_SD_MspInit+0x218>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	2100      	movs	r1, #0
 800101c:	2031      	movs	r0, #49	@ 0x31
 800101e:	f001 f84e 	bl	80020be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001022:	2031      	movs	r0, #49	@ 0x31
 8001024:	f001 f867 	bl	80020f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8001028:	bf00      	nop
 800102a:	3730      	adds	r7, #48	@ 0x30
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40012c00 	.word	0x40012c00
 8001034:	40023800 	.word	0x40023800
 8001038:	40020000 	.word	0x40020000
 800103c:	40020400 	.word	0x40020400
 8001040:	40020800 	.word	0x40020800
 8001044:	200001a8 	.word	0x200001a8
 8001048:	40026458 	.word	0x40026458
 800104c:	20000208 	.word	0x20000208
 8001050:	400264a0 	.word	0x400264a0

08001054 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0e      	ldr	r2, [pc, #56]	@ (800109c <HAL_TIM_PWM_MspInit+0x48>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d115      	bne.n	8001092 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b0d      	ldr	r3, [pc, #52]	@ (80010a0 <HAL_TIM_PWM_MspInit+0x4c>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106e:	4a0c      	ldr	r2, [pc, #48]	@ (80010a0 <HAL_TIM_PWM_MspInit+0x4c>)
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	6413      	str	r3, [r2, #64]	@ 0x40
 8001076:	4b0a      	ldr	r3, [pc, #40]	@ (80010a0 <HAL_TIM_PWM_MspInit+0x4c>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	201d      	movs	r0, #29
 8001088:	f001 f819 	bl	80020be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800108c:	201d      	movs	r0, #29
 800108e:	f001 f832 	bl	80020f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40000400 	.word	0x40000400
 80010a0:	40023800 	.word	0x40023800

080010a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	@ 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a19      	ldr	r2, [pc, #100]	@ (8001128 <HAL_UART_MspInit+0x84>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d12b      	bne.n	800111e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	4b18      	ldr	r3, [pc, #96]	@ (800112c <HAL_UART_MspInit+0x88>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	4a17      	ldr	r2, [pc, #92]	@ (800112c <HAL_UART_MspInit+0x88>)
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d6:	4b15      	ldr	r3, [pc, #84]	@ (800112c <HAL_UART_MspInit+0x88>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <HAL_UART_MspInit+0x88>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a10      	ldr	r2, [pc, #64]	@ (800112c <HAL_UART_MspInit+0x88>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <HAL_UART_MspInit+0x88>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010fe:	230c      	movs	r3, #12
 8001100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800110e:	2307      	movs	r3, #7
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	@ (8001130 <HAL_UART_MspInit+0x8c>)
 800111a:	f001 fc09 	bl	8002930 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800111e:	bf00      	nop
 8001120:	3728      	adds	r7, #40	@ 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40004400 	.word	0x40004400
 800112c:	40023800 	.word	0x40023800
 8001130:	40020000 	.word	0x40020000

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <NMI_Handler+0x4>

0800113c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <HardFault_Handler+0x4>

08001144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <MemManage_Handler+0x4>

0800114c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <BusFault_Handler+0x4>

08001154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <UsageFault_Handler+0x4>

0800115c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800118a:	f000 f903 	bl	8001394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001198:	4802      	ldr	r0, [pc, #8]	@ (80011a4 <ADC_IRQHandler+0x10>)
 800119a:	f000 f982 	bl	80014a2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2000007c 	.word	0x2000007c

080011a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011ac:	4802      	ldr	r0, [pc, #8]	@ (80011b8 <TIM3_IRQHandler+0x10>)
 80011ae:	f003 fd23 	bl	8004bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000268 	.word	0x20000268

080011bc <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80011c0:	4802      	ldr	r0, [pc, #8]	@ (80011cc <SDIO_IRQHandler+0x10>)
 80011c2:	f002 fe01 	bl	8003dc8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000124 	.word	0x20000124

080011d0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011d4:	4802      	ldr	r0, [pc, #8]	@ (80011e0 <DMA2_Stream0_IRQHandler+0x10>)
 80011d6:	f001 f941 	bl	800245c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200000c4 	.word	0x200000c4

080011e4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80011e8:	4802      	ldr	r0, [pc, #8]	@ (80011f4 <DMA2_Stream3_IRQHandler+0x10>)
 80011ea:	f001 f937 	bl	800245c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200001a8 	.word	0x200001a8

080011f8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80011fc:	4802      	ldr	r0, [pc, #8]	@ (8001208 <DMA2_Stream6_IRQHandler+0x10>)
 80011fe:	f001 f92d 	bl	800245c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000208 	.word	0x20000208

0800120c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001214:	4a14      	ldr	r2, [pc, #80]	@ (8001268 <_sbrk+0x5c>)
 8001216:	4b15      	ldr	r3, [pc, #84]	@ (800126c <_sbrk+0x60>)
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001220:	4b13      	ldr	r3, [pc, #76]	@ (8001270 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d102      	bne.n	800122e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001228:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <_sbrk+0x64>)
 800122a:	4a12      	ldr	r2, [pc, #72]	@ (8001274 <_sbrk+0x68>)
 800122c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800122e:	4b10      	ldr	r3, [pc, #64]	@ (8001270 <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	429a      	cmp	r2, r3
 800123a:	d207      	bcs.n	800124c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800123c:	f008 fc80 	bl	8009b40 <__errno>
 8001240:	4603      	mov	r3, r0
 8001242:	220c      	movs	r2, #12
 8001244:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
 800124a:	e009      	b.n	8001260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800124c:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <_sbrk+0x64>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001252:	4b07      	ldr	r3, [pc, #28]	@ (8001270 <_sbrk+0x64>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	4a05      	ldr	r2, [pc, #20]	@ (8001270 <_sbrk+0x64>)
 800125c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800125e:	68fb      	ldr	r3, [r7, #12]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20020000 	.word	0x20020000
 800126c:	00000400 	.word	0x00000400
 8001270:	20008a38 	.word	0x20008a38
 8001274:	20008bd8 	.word	0x20008bd8

08001278 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <SystemInit+0x20>)
 800127e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001282:	4a05      	ldr	r2, [pc, #20]	@ (8001298 <SystemInit+0x20>)
 8001284:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001288:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800129c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012a0:	f7ff ffea 	bl	8001278 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012a4:	480c      	ldr	r0, [pc, #48]	@ (80012d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012a6:	490d      	ldr	r1, [pc, #52]	@ (80012dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012a8:	4a0d      	ldr	r2, [pc, #52]	@ (80012e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012ac:	e002      	b.n	80012b4 <LoopCopyDataInit>

080012ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b2:	3304      	adds	r3, #4

080012b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b8:	d3f9      	bcc.n	80012ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ba:	4a0a      	ldr	r2, [pc, #40]	@ (80012e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012bc:	4c0a      	ldr	r4, [pc, #40]	@ (80012e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c0:	e001      	b.n	80012c6 <LoopFillZerobss>

080012c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c4:	3204      	adds	r2, #4

080012c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c8:	d3fb      	bcc.n	80012c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ca:	f008 fc3f 	bl	8009b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ce:	f7ff f957 	bl	8000580 <main>
  bx  lr    
 80012d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012dc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80012e0:	0800a840 	.word	0x0800a840
  ldr r2, =_sbss
 80012e4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80012e8:	20008bd4 	.word	0x20008bd4

080012ec <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ec:	e7fe      	b.n	80012ec <DMA1_Stream0_IRQHandler>
	...

080012f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001330 <HAL_Init+0x40>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001330 <HAL_Init+0x40>)
 80012fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001300:	4b0b      	ldr	r3, [pc, #44]	@ (8001330 <HAL_Init+0x40>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a0a      	ldr	r2, [pc, #40]	@ (8001330 <HAL_Init+0x40>)
 8001306:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800130a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800130c:	4b08      	ldr	r3, [pc, #32]	@ (8001330 <HAL_Init+0x40>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a07      	ldr	r2, [pc, #28]	@ (8001330 <HAL_Init+0x40>)
 8001312:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001316:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001318:	2003      	movs	r0, #3
 800131a:	f000 fec5 	bl	80020a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800131e:	200f      	movs	r0, #15
 8001320:	f000 f808 	bl	8001334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001324:	f7ff fcc2 	bl	8000cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40023c00 	.word	0x40023c00

08001334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800133c:	4b12      	ldr	r3, [pc, #72]	@ (8001388 <HAL_InitTick+0x54>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b12      	ldr	r3, [pc, #72]	@ (800138c <HAL_InitTick+0x58>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800134a:	fbb3 f3f1 	udiv	r3, r3, r1
 800134e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fedd 	bl	8002112 <HAL_SYSTICK_Config>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e00e      	b.n	8001380 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b0f      	cmp	r3, #15
 8001366:	d80a      	bhi.n	800137e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001368:	2200      	movs	r2, #0
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f000 fea5 	bl	80020be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001374:	4a06      	ldr	r2, [pc, #24]	@ (8001390 <HAL_InitTick+0x5c>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	e000      	b.n	8001380 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
}
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000004 	.word	0x20000004
 800138c:	2000000c 	.word	0x2000000c
 8001390:	20000008 	.word	0x20000008

08001394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001398:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <HAL_IncTick+0x20>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <HAL_IncTick+0x24>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	4a04      	ldr	r2, [pc, #16]	@ (80013b8 <HAL_IncTick+0x24>)
 80013a6:	6013      	str	r3, [r2, #0]
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	2000000c 	.word	0x2000000c
 80013b8:	20008a3c 	.word	0x20008a3c

080013bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return uwTick;
 80013c0:	4b03      	ldr	r3, [pc, #12]	@ (80013d0 <HAL_GetTick+0x14>)
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20008a3c 	.word	0x20008a3c

080013d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013dc:	f7ff ffee 	bl	80013bc <HAL_GetTick>
 80013e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ec:	d005      	beq.n	80013fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001418 <HAL_Delay+0x44>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4413      	add	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013fa:	bf00      	nop
 80013fc:	f7ff ffde 	bl	80013bc <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	429a      	cmp	r2, r3
 800140a:	d8f7      	bhi.n	80013fc <HAL_Delay+0x28>
  {
  }
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	2000000c 	.word	0x2000000c

0800141c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001424:	2300      	movs	r3, #0
 8001426:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e033      	b.n	800149a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001436:	2b00      	cmp	r3, #0
 8001438:	d109      	bne.n	800144e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff fc5e 	bl	8000cfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001452:	f003 0310 	and.w	r3, r3, #16
 8001456:	2b00      	cmp	r3, #0
 8001458:	d118      	bne.n	800148c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001462:	f023 0302 	bic.w	r3, r3, #2
 8001466:	f043 0202 	orr.w	r2, r3, #2
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 fbc2 	bl	8001bf8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147e:	f023 0303 	bic.w	r3, r3, #3
 8001482:	f043 0201 	orr.w	r2, r3, #1
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	641a      	str	r2, [r3, #64]	@ 0x40
 800148a:	e001      	b.n	8001490 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001498:	7bfb      	ldrb	r3, [r7, #15]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	f003 0320 	and.w	r3, r3, #32
 80014d0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d049      	beq.n	800156c <HAL_ADC_IRQHandler+0xca>
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d046      	beq.n	800156c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	f003 0310 	and.w	r3, r3, #16
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d105      	bne.n	80014f6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d12b      	bne.n	800155c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001508:	2b00      	cmp	r3, #0
 800150a:	d127      	bne.n	800155c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001512:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001516:	2b00      	cmp	r3, #0
 8001518:	d006      	beq.n	8001528 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001524:	2b00      	cmp	r3, #0
 8001526:	d119      	bne.n	800155c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0220 	bic.w	r2, r2, #32
 8001536:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001548:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d105      	bne.n	800155c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001554:	f043 0201 	orr.w	r2, r3, #1
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff fb53 	bl	8000c08 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f06f 0212 	mvn.w	r2, #18
 800156a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800157a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d057      	beq.n	8001632 <HAL_ADC_IRQHandler+0x190>
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d054      	beq.n	8001632 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158c:	f003 0310 	and.w	r3, r3, #16
 8001590:	2b00      	cmp	r3, #0
 8001592:	d105      	bne.n	80015a0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001598:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d139      	bne.n	8001622 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015b4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d006      	beq.n	80015ca <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d12b      	bne.n	8001622 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d124      	bne.n	8001622 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d11d      	bne.n	8001622 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d119      	bne.n	8001622 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015fc:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001612:	2b00      	cmp	r3, #0
 8001614:	d105      	bne.n	8001622 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	f043 0201 	orr.w	r2, r3, #1
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 fc66 	bl	8001ef4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f06f 020c 	mvn.w	r2, #12
 8001630:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001640:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d017      	beq.n	8001678 <HAL_ADC_IRQHandler+0x1d6>
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d014      	beq.n	8001678 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	2b01      	cmp	r3, #1
 800165a:	d10d      	bne.n	8001678 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001660:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f97f 	bl	800196c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f06f 0201 	mvn.w	r2, #1
 8001676:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 0320 	and.w	r3, r3, #32
 800167e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001686:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d015      	beq.n	80016ba <HAL_ADC_IRQHandler+0x218>
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d012      	beq.n	80016ba <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001698:	f043 0202 	orr.w	r2, r3, #2
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f06f 0220 	mvn.w	r2, #32
 80016a8:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f968 	bl	8001980 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f06f 0220 	mvn.w	r2, #32
 80016b8:	601a      	str	r2, [r3, #0]
  }
}
 80016ba:	bf00      	nop
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <HAL_ADC_Start_DMA+0x1e>
 80016de:	2302      	movs	r3, #2
 80016e0:	e0ce      	b.n	8001880 <HAL_ADC_Start_DMA+0x1bc>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d018      	beq.n	800172a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f042 0201 	orr.w	r2, r2, #1
 8001706:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001708:	4b5f      	ldr	r3, [pc, #380]	@ (8001888 <HAL_ADC_Start_DMA+0x1c4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a5f      	ldr	r2, [pc, #380]	@ (800188c <HAL_ADC_Start_DMA+0x1c8>)
 800170e:	fba2 2303 	umull	r2, r3, r2, r3
 8001712:	0c9a      	lsrs	r2, r3, #18
 8001714:	4613      	mov	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4413      	add	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800171c:	e002      	b.n	8001724 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	3b01      	subs	r3, #1
 8001722:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f9      	bne.n	800171e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001734:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001738:	d107      	bne.n	800174a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001748:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b01      	cmp	r3, #1
 8001756:	f040 8086 	bne.w	8001866 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001762:	f023 0301 	bic.w	r3, r3, #1
 8001766:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001778:	2b00      	cmp	r3, #0
 800177a:	d007      	beq.n	800178c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001780:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001784:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001790:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001794:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001798:	d106      	bne.n	80017a8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179e:	f023 0206 	bic.w	r2, r3, #6
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	645a      	str	r2, [r3, #68]	@ 0x44
 80017a6:	e002      	b.n	80017ae <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2200      	movs	r2, #0
 80017ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017b6:	4b36      	ldr	r3, [pc, #216]	@ (8001890 <HAL_ADC_Start_DMA+0x1cc>)
 80017b8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017be:	4a35      	ldr	r2, [pc, #212]	@ (8001894 <HAL_ADC_Start_DMA+0x1d0>)
 80017c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017c6:	4a34      	ldr	r2, [pc, #208]	@ (8001898 <HAL_ADC_Start_DMA+0x1d4>)
 80017c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017ce:	4a33      	ldr	r2, [pc, #204]	@ (800189c <HAL_ADC_Start_DMA+0x1d8>)
 80017d0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80017da:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80017ea:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80017fa:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	334c      	adds	r3, #76	@ 0x4c
 8001806:	4619      	mov	r1, r3
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f000 fd3c 	bl	8002288 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 031f 	and.w	r3, r3, #31
 8001818:	2b00      	cmp	r3, #0
 800181a:	d10f      	bne.n	800183c <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d129      	bne.n	800187e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	e020      	b.n	800187e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a17      	ldr	r2, [pc, #92]	@ (80018a0 <HAL_ADC_Start_DMA+0x1dc>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d11b      	bne.n	800187e <HAL_ADC_Start_DMA+0x1ba>
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d114      	bne.n	800187e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	e00b      	b.n	800187e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	f043 0210 	orr.w	r2, r3, #16
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001876:	f043 0201 	orr.w	r2, r3, #1
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000004 	.word	0x20000004
 800188c:	431bde83 	.word	0x431bde83
 8001890:	40012300 	.word	0x40012300
 8001894:	08001df1 	.word	0x08001df1
 8001898:	08001eab 	.word	0x08001eab
 800189c:	08001ec7 	.word	0x08001ec7
 80018a0:	40012000 	.word	0x40012000

080018a4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d101      	bne.n	80018be <HAL_ADC_Stop_DMA+0x1a>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e048      	b.n	8001950 <HAL_ADC_Stop_DMA+0xac>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0201 	bic.w	r2, r2, #1
 80018d4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d130      	bne.n	8001946 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018f2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d10f      	bne.n	8001922 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001906:	4618      	mov	r0, r3
 8001908:	f000 fd16 	bl	8002338 <HAL_DMA_Abort>
 800190c:	4603      	mov	r3, r0
 800190e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d005      	beq.n	8001922 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8001930:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001936:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800193a:	f023 0301 	bic.w	r3, r3, #1
 800193e:	f043 0201 	orr.w	r2, r3, #1
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800194e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d101      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x1c>
 80019ac:	2302      	movs	r3, #2
 80019ae:	e113      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x244>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b09      	cmp	r3, #9
 80019be:	d925      	bls.n	8001a0c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	68d9      	ldr	r1, [r3, #12]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	461a      	mov	r2, r3
 80019ce:	4613      	mov	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	3b1e      	subs	r3, #30
 80019d6:	2207      	movs	r2, #7
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43da      	mvns	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	400a      	ands	r2, r1
 80019e4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68d9      	ldr	r1, [r3, #12]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	4603      	mov	r3, r0
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4403      	add	r3, r0
 80019fe:	3b1e      	subs	r3, #30
 8001a00:	409a      	lsls	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	430a      	orrs	r2, r1
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	e022      	b.n	8001a52 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6919      	ldr	r1, [r3, #16]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4413      	add	r3, r2
 8001a20:	2207      	movs	r2, #7
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43da      	mvns	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	400a      	ands	r2, r1
 8001a2e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6919      	ldr	r1, [r3, #16]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4618      	mov	r0, r3
 8001a42:	4603      	mov	r3, r0
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	4403      	add	r3, r0
 8001a48:	409a      	lsls	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b06      	cmp	r3, #6
 8001a58:	d824      	bhi.n	8001aa4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	3b05      	subs	r3, #5
 8001a6c:	221f      	movs	r2, #31
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43da      	mvns	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	400a      	ands	r2, r1
 8001a7a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	4618      	mov	r0, r3
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	3b05      	subs	r3, #5
 8001a96:	fa00 f203 	lsl.w	r2, r0, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001aa2:	e04c      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b0c      	cmp	r3, #12
 8001aaa:	d824      	bhi.n	8001af6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	3b23      	subs	r3, #35	@ 0x23
 8001abe:	221f      	movs	r2, #31
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43da      	mvns	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	400a      	ands	r2, r1
 8001acc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	4618      	mov	r0, r3
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3b23      	subs	r3, #35	@ 0x23
 8001ae8:	fa00 f203 	lsl.w	r2, r0, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001af4:	e023      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	3b41      	subs	r3, #65	@ 0x41
 8001b08:	221f      	movs	r2, #31
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	400a      	ands	r2, r1
 8001b16:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	4618      	mov	r0, r3
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	3b41      	subs	r3, #65	@ 0x41
 8001b32:	fa00 f203 	lsl.w	r2, r0, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b3e:	4b29      	ldr	r3, [pc, #164]	@ (8001be4 <HAL_ADC_ConfigChannel+0x250>)
 8001b40:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a28      	ldr	r2, [pc, #160]	@ (8001be8 <HAL_ADC_ConfigChannel+0x254>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d10f      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x1d8>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b12      	cmp	r3, #18
 8001b52:	d10b      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a1d      	ldr	r2, [pc, #116]	@ (8001be8 <HAL_ADC_ConfigChannel+0x254>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d12b      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x23a>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a1c      	ldr	r2, [pc, #112]	@ (8001bec <HAL_ADC_ConfigChannel+0x258>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d003      	beq.n	8001b88 <HAL_ADC_ConfigChannel+0x1f4>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b11      	cmp	r3, #17
 8001b86:	d122      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a11      	ldr	r2, [pc, #68]	@ (8001bec <HAL_ADC_ConfigChannel+0x258>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d111      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001baa:	4b11      	ldr	r3, [pc, #68]	@ (8001bf0 <HAL_ADC_ConfigChannel+0x25c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a11      	ldr	r2, [pc, #68]	@ (8001bf4 <HAL_ADC_ConfigChannel+0x260>)
 8001bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb4:	0c9a      	lsrs	r2, r3, #18
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001bc0:	e002      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f9      	bne.n	8001bc2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	40012300 	.word	0x40012300
 8001be8:	40012000 	.word	0x40012000
 8001bec:	10000012 	.word	0x10000012
 8001bf0:	20000004 	.word	0x20000004
 8001bf4:	431bde83 	.word	0x431bde83

08001bf8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c00:	4b79      	ldr	r3, [pc, #484]	@ (8001de8 <ADC_Init+0x1f0>)
 8001c02:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6859      	ldr	r1, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	021a      	lsls	r2, r3, #8
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001c50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6859      	ldr	r1, [r3, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6899      	ldr	r1, [r3, #8]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c8a:	4a58      	ldr	r2, [pc, #352]	@ (8001dec <ADC_Init+0x1f4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d022      	beq.n	8001cd6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6899      	ldr	r1, [r3, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001cc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6899      	ldr	r1, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	e00f      	b.n	8001cf6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ce4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001cf4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0202 	bic.w	r2, r2, #2
 8001d04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6899      	ldr	r1, [r3, #8]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	7e1b      	ldrb	r3, [r3, #24]
 8001d10:	005a      	lsls	r2, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01b      	beq.n	8001d5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d32:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001d42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6859      	ldr	r1, [r3, #4]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	035a      	lsls	r2, r3, #13
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	e007      	b.n	8001d6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d6a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	051a      	lsls	r2, r3, #20
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001da0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6899      	ldr	r1, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001dae:	025a      	lsls	r2, r3, #9
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6899      	ldr	r1, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	029a      	lsls	r2, r3, #10
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	609a      	str	r2, [r3, #8]
}
 8001ddc:	bf00      	nop
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	40012300 	.word	0x40012300
 8001dec:	0f000001 	.word	0x0f000001

08001df0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dfc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d13c      	bne.n	8001e84 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d12b      	bne.n	8001e7c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d127      	bne.n	8001e7c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e32:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d006      	beq.n	8001e48 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d119      	bne.n	8001e7c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0220 	bic.w	r2, r2, #32
 8001e56:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d105      	bne.n	8001e7c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e74:	f043 0201 	orr.w	r2, r3, #1
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f7fe fec3 	bl	8000c08 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e82:	e00e      	b.n	8001ea2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e88:	f003 0310 	and.w	r3, r3, #16
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f7ff fd75 	bl	8001980 <HAL_ADC_ErrorCallback>
}
 8001e96:	e004      	b.n	8001ea2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	4798      	blx	r3
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b084      	sub	sp, #16
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eb6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f7ff fd4d 	bl	8001958 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ebe:	bf00      	nop
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b084      	sub	sp, #16
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ed2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2240      	movs	r2, #64	@ 0x40
 8001ed8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ede:	f043 0204 	orr.w	r2, r3, #4
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f7ff fd4a 	bl	8001980 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001eec:	bf00      	nop
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f18:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <__NVIC_SetPriorityGrouping+0x44>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f24:	4013      	ands	r3, r2
 8001f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3a:	4a04      	ldr	r2, [pc, #16]	@ (8001f4c <__NVIC_SetPriorityGrouping+0x44>)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	60d3      	str	r3, [r2, #12]
}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f54:	4b04      	ldr	r3, [pc, #16]	@ (8001f68 <__NVIC_GetPriorityGrouping+0x18>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	0a1b      	lsrs	r3, r3, #8
 8001f5a:	f003 0307 	and.w	r3, r3, #7
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	db0b      	blt.n	8001f96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	f003 021f 	and.w	r2, r3, #31
 8001f84:	4907      	ldr	r1, [pc, #28]	@ (8001fa4 <__NVIC_EnableIRQ+0x38>)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000e100 	.word	0xe000e100

08001fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	6039      	str	r1, [r7, #0]
 8001fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	db0a      	blt.n	8001fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	490c      	ldr	r1, [pc, #48]	@ (8001ff4 <__NVIC_SetPriority+0x4c>)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	0112      	lsls	r2, r2, #4
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	440b      	add	r3, r1
 8001fcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd0:	e00a      	b.n	8001fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4908      	ldr	r1, [pc, #32]	@ (8001ff8 <__NVIC_SetPriority+0x50>)
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	3b04      	subs	r3, #4
 8001fe0:	0112      	lsls	r2, r2, #4
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	761a      	strb	r2, [r3, #24]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000e100 	.word	0xe000e100
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b089      	sub	sp, #36	@ 0x24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f1c3 0307 	rsb	r3, r3, #7
 8002016:	2b04      	cmp	r3, #4
 8002018:	bf28      	it	cs
 800201a:	2304      	movcs	r3, #4
 800201c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3304      	adds	r3, #4
 8002022:	2b06      	cmp	r3, #6
 8002024:	d902      	bls.n	800202c <NVIC_EncodePriority+0x30>
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3b03      	subs	r3, #3
 800202a:	e000      	b.n	800202e <NVIC_EncodePriority+0x32>
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	f04f 32ff 	mov.w	r2, #4294967295
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43da      	mvns	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	401a      	ands	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002044:	f04f 31ff 	mov.w	r1, #4294967295
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	fa01 f303 	lsl.w	r3, r1, r3
 800204e:	43d9      	mvns	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	4313      	orrs	r3, r2
         );
}
 8002056:	4618      	mov	r0, r3
 8002058:	3724      	adds	r7, #36	@ 0x24
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3b01      	subs	r3, #1
 8002070:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002074:	d301      	bcc.n	800207a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002076:	2301      	movs	r3, #1
 8002078:	e00f      	b.n	800209a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207a:	4a0a      	ldr	r2, [pc, #40]	@ (80020a4 <SysTick_Config+0x40>)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002082:	210f      	movs	r1, #15
 8002084:	f04f 30ff 	mov.w	r0, #4294967295
 8002088:	f7ff ff8e 	bl	8001fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800208c:	4b05      	ldr	r3, [pc, #20]	@ (80020a4 <SysTick_Config+0x40>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002092:	4b04      	ldr	r3, [pc, #16]	@ (80020a4 <SysTick_Config+0x40>)
 8002094:	2207      	movs	r2, #7
 8002096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	e000e010 	.word	0xe000e010

080020a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ff29 	bl	8001f08 <__NVIC_SetPriorityGrouping>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020be:	b580      	push	{r7, lr}
 80020c0:	b086      	sub	sp, #24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d0:	f7ff ff3e 	bl	8001f50 <__NVIC_GetPriorityGrouping>
 80020d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	6978      	ldr	r0, [r7, #20]
 80020dc:	f7ff ff8e 	bl	8001ffc <NVIC_EncodePriority>
 80020e0:	4602      	mov	r2, r0
 80020e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e6:	4611      	mov	r1, r2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff5d 	bl	8001fa8 <__NVIC_SetPriority>
}
 80020ee:	bf00      	nop
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	4603      	mov	r3, r0
 80020fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff31 	bl	8001f6c <__NVIC_EnableIRQ>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff ffa2 	bl	8002064 <SysTick_Config>
 8002120:	4603      	mov	r3, r0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002138:	f7ff f940 	bl	80013bc <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e099      	b.n	800227c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0201 	bic.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002168:	e00f      	b.n	800218a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800216a:	f7ff f927 	bl	80013bc <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b05      	cmp	r3, #5
 8002176:	d908      	bls.n	800218a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2220      	movs	r2, #32
 800217c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2203      	movs	r2, #3
 8002182:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e078      	b.n	800227c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1e8      	bne.n	800216a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	4b38      	ldr	r3, [pc, #224]	@ (8002284 <HAL_DMA_Init+0x158>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	4313      	orrs	r3, r2
 80021da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d107      	bne.n	80021f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ec:	4313      	orrs	r3, r2
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f023 0307 	bic.w	r3, r3, #7
 800220a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	4313      	orrs	r3, r2
 8002214:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221a:	2b04      	cmp	r3, #4
 800221c:	d117      	bne.n	800224e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	4313      	orrs	r3, r2
 8002226:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00e      	beq.n	800224e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 fb01 	bl	8002838 <DMA_CheckFifoParam>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d008      	beq.n	800224e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2240      	movs	r2, #64	@ 0x40
 8002240:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800224a:	2301      	movs	r3, #1
 800224c:	e016      	b.n	800227c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 fab8 	bl	80027cc <DMA_CalcBaseAndBitshift>
 800225c:	4603      	mov	r3, r0
 800225e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002264:	223f      	movs	r2, #63	@ 0x3f
 8002266:	409a      	lsls	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	f010803f 	.word	0xf010803f

08002288 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_DMA_Start_IT+0x26>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e040      	b.n	8002330 <HAL_DMA_Start_IT+0xa8>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d12f      	bne.n	8002322 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2202      	movs	r2, #2
 80022c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 fa4a 	bl	8002770 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e0:	223f      	movs	r2, #63	@ 0x3f
 80022e2:	409a      	lsls	r2, r3
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0216 	orr.w	r2, r2, #22
 80022f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d007      	beq.n	8002310 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0208 	orr.w	r2, r2, #8
 800230e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	e005      	b.n	800232e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800232a:	2302      	movs	r3, #2
 800232c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800232e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002344:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002346:	f7ff f839 	bl	80013bc <HAL_GetTick>
 800234a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d008      	beq.n	800236a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2280      	movs	r2, #128	@ 0x80
 800235c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e052      	b.n	8002410 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0216 	bic.w	r2, r2, #22
 8002378:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695a      	ldr	r2, [r3, #20]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002388:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238e:	2b00      	cmp	r3, #0
 8002390:	d103      	bne.n	800239a <HAL_DMA_Abort+0x62>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002396:	2b00      	cmp	r3, #0
 8002398:	d007      	beq.n	80023aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 0208 	bic.w	r2, r2, #8
 80023a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0201 	bic.w	r2, r2, #1
 80023b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ba:	e013      	b.n	80023e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023bc:	f7fe fffe 	bl	80013bc <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b05      	cmp	r3, #5
 80023c8:	d90c      	bls.n	80023e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2220      	movs	r2, #32
 80023ce:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2203      	movs	r2, #3
 80023d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e015      	b.n	8002410 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1e4      	bne.n	80023bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f6:	223f      	movs	r2, #63	@ 0x3f
 80023f8:	409a      	lsls	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d004      	beq.n	8002436 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2280      	movs	r2, #128	@ 0x80
 8002430:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e00c      	b.n	8002450 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2205      	movs	r2, #5
 800243a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0201 	bic.w	r2, r2, #1
 800244c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002468:	4b8e      	ldr	r3, [pc, #568]	@ (80026a4 <HAL_DMA_IRQHandler+0x248>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a8e      	ldr	r2, [pc, #568]	@ (80026a8 <HAL_DMA_IRQHandler+0x24c>)
 800246e:	fba2 2303 	umull	r2, r3, r2, r3
 8002472:	0a9b      	lsrs	r3, r3, #10
 8002474:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002486:	2208      	movs	r2, #8
 8002488:	409a      	lsls	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4013      	ands	r3, r2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d01a      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	d013      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0204 	bic.w	r2, r2, #4
 80024ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b4:	2208      	movs	r2, #8
 80024b6:	409a      	lsls	r2, r3
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c0:	f043 0201 	orr.w	r2, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024cc:	2201      	movs	r2, #1
 80024ce:	409a      	lsls	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d012      	beq.n	80024fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00b      	beq.n	80024fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ea:	2201      	movs	r2, #1
 80024ec:	409a      	lsls	r2, r3
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f6:	f043 0202 	orr.w	r2, r3, #2
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002502:	2204      	movs	r2, #4
 8002504:	409a      	lsls	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	4013      	ands	r3, r2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d012      	beq.n	8002534 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00b      	beq.n	8002534 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002520:	2204      	movs	r2, #4
 8002522:	409a      	lsls	r2, r3
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252c:	f043 0204 	orr.w	r2, r3, #4
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002538:	2210      	movs	r2, #16
 800253a:	409a      	lsls	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4013      	ands	r3, r2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d043      	beq.n	80025cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d03c      	beq.n	80025cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002556:	2210      	movs	r2, #16
 8002558:	409a      	lsls	r2, r3
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d018      	beq.n	800259e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d108      	bne.n	800258c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	d024      	beq.n	80025cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	4798      	blx	r3
 800258a:	e01f      	b.n	80025cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002590:	2b00      	cmp	r3, #0
 8002592:	d01b      	beq.n	80025cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	4798      	blx	r3
 800259c:	e016      	b.n	80025cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d107      	bne.n	80025bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0208 	bic.w	r2, r2, #8
 80025ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d0:	2220      	movs	r2, #32
 80025d2:	409a      	lsls	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 808f 	beq.w	80026fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0310 	and.w	r3, r3, #16
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 8087 	beq.w	80026fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f2:	2220      	movs	r2, #32
 80025f4:	409a      	lsls	r2, r3
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b05      	cmp	r3, #5
 8002604:	d136      	bne.n	8002674 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0216 	bic.w	r2, r2, #22
 8002614:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695a      	ldr	r2, [r3, #20]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002624:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262a:	2b00      	cmp	r3, #0
 800262c:	d103      	bne.n	8002636 <HAL_DMA_IRQHandler+0x1da>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002632:	2b00      	cmp	r3, #0
 8002634:	d007      	beq.n	8002646 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0208 	bic.w	r2, r2, #8
 8002644:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264a:	223f      	movs	r2, #63	@ 0x3f
 800264c:	409a      	lsls	r2, r3
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002666:	2b00      	cmp	r3, #0
 8002668:	d07e      	beq.n	8002768 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	4798      	blx	r3
        }
        return;
 8002672:	e079      	b.n	8002768 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d01d      	beq.n	80026be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10d      	bne.n	80026ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002694:	2b00      	cmp	r3, #0
 8002696:	d031      	beq.n	80026fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	4798      	blx	r3
 80026a0:	e02c      	b.n	80026fc <HAL_DMA_IRQHandler+0x2a0>
 80026a2:	bf00      	nop
 80026a4:	20000004 	.word	0x20000004
 80026a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d023      	beq.n	80026fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	4798      	blx	r3
 80026bc:	e01e      	b.n	80026fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10f      	bne.n	80026ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0210 	bic.w	r2, r2, #16
 80026da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002700:	2b00      	cmp	r3, #0
 8002702:	d032      	beq.n	800276a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d022      	beq.n	8002756 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2205      	movs	r2, #5
 8002714:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0201 	bic.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	3301      	adds	r3, #1
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	429a      	cmp	r2, r3
 8002732:	d307      	bcc.n	8002744 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f2      	bne.n	8002728 <HAL_DMA_IRQHandler+0x2cc>
 8002742:	e000      	b.n	8002746 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002744:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800275a:	2b00      	cmp	r3, #0
 800275c:	d005      	beq.n	800276a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	4798      	blx	r3
 8002766:	e000      	b.n	800276a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002768:	bf00      	nop
    }
  }
}
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800278c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b40      	cmp	r3, #64	@ 0x40
 800279c:	d108      	bne.n	80027b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027ae:	e007      	b.n	80027c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	60da      	str	r2, [r3, #12]
}
 80027c0:	bf00      	nop
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	3b10      	subs	r3, #16
 80027dc:	4a14      	ldr	r2, [pc, #80]	@ (8002830 <DMA_CalcBaseAndBitshift+0x64>)
 80027de:	fba2 2303 	umull	r2, r3, r2, r3
 80027e2:	091b      	lsrs	r3, r3, #4
 80027e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027e6:	4a13      	ldr	r2, [pc, #76]	@ (8002834 <DMA_CalcBaseAndBitshift+0x68>)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4413      	add	r3, r2
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d909      	bls.n	800280e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002802:	f023 0303 	bic.w	r3, r3, #3
 8002806:	1d1a      	adds	r2, r3, #4
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	659a      	str	r2, [r3, #88]	@ 0x58
 800280c:	e007      	b.n	800281e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002816:	f023 0303 	bic.w	r3, r3, #3
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002822:	4618      	mov	r0, r3
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	aaaaaaab 	.word	0xaaaaaaab
 8002834:	0800a3a0 	.word	0x0800a3a0

08002838 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002848:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d11f      	bne.n	8002892 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b03      	cmp	r3, #3
 8002856:	d856      	bhi.n	8002906 <DMA_CheckFifoParam+0xce>
 8002858:	a201      	add	r2, pc, #4	@ (adr r2, 8002860 <DMA_CheckFifoParam+0x28>)
 800285a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800285e:	bf00      	nop
 8002860:	08002871 	.word	0x08002871
 8002864:	08002883 	.word	0x08002883
 8002868:	08002871 	.word	0x08002871
 800286c:	08002907 	.word	0x08002907
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002874:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d046      	beq.n	800290a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002880:	e043      	b.n	800290a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002886:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800288a:	d140      	bne.n	800290e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002890:	e03d      	b.n	800290e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800289a:	d121      	bne.n	80028e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d837      	bhi.n	8002912 <DMA_CheckFifoParam+0xda>
 80028a2:	a201      	add	r2, pc, #4	@ (adr r2, 80028a8 <DMA_CheckFifoParam+0x70>)
 80028a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a8:	080028b9 	.word	0x080028b9
 80028ac:	080028bf 	.word	0x080028bf
 80028b0:	080028b9 	.word	0x080028b9
 80028b4:	080028d1 	.word	0x080028d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
      break;
 80028bc:	e030      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d025      	beq.n	8002916 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ce:	e022      	b.n	8002916 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80028d8:	d11f      	bne.n	800291a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028de:	e01c      	b.n	800291a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d903      	bls.n	80028ee <DMA_CheckFifoParam+0xb6>
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d003      	beq.n	80028f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028ec:	e018      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	73fb      	strb	r3, [r7, #15]
      break;
 80028f2:	e015      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00e      	beq.n	800291e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
      break;
 8002904:	e00b      	b.n	800291e <DMA_CheckFifoParam+0xe6>
      break;
 8002906:	bf00      	nop
 8002908:	e00a      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      break;
 800290a:	bf00      	nop
 800290c:	e008      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      break;
 800290e:	bf00      	nop
 8002910:	e006      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      break;
 8002912:	bf00      	nop
 8002914:	e004      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      break;
 8002916:	bf00      	nop
 8002918:	e002      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      break;   
 800291a:	bf00      	nop
 800291c:	e000      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      break;
 800291e:	bf00      	nop
    }
  } 
  
  return status; 
 8002920:	7bfb      	ldrb	r3, [r7, #15]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop

08002930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002930:	b480      	push	{r7}
 8002932:	b089      	sub	sp, #36	@ 0x24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002942:	2300      	movs	r3, #0
 8002944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
 800294a:	e159      	b.n	8002c00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800294c:	2201      	movs	r2, #1
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	4013      	ands	r3, r2
 800295e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	429a      	cmp	r2, r3
 8002966:	f040 8148 	bne.w	8002bfa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	2b01      	cmp	r3, #1
 8002974:	d005      	beq.n	8002982 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800297e:	2b02      	cmp	r3, #2
 8002980:	d130      	bne.n	80029e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	2203      	movs	r2, #3
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4013      	ands	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029b8:	2201      	movs	r2, #1
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	091b      	lsrs	r3, r3, #4
 80029ce:	f003 0201 	and.w	r2, r3, #1
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	d017      	beq.n	8002a20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	2203      	movs	r2, #3
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d123      	bne.n	8002a74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	08da      	lsrs	r2, r3, #3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3208      	adds	r2, #8
 8002a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	220f      	movs	r2, #15
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	08da      	lsrs	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3208      	adds	r2, #8
 8002a6e:	69b9      	ldr	r1, [r7, #24]
 8002a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	2203      	movs	r2, #3
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 0203 	and.w	r2, r3, #3
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 80a2 	beq.w	8002bfa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	4b57      	ldr	r3, [pc, #348]	@ (8002c18 <HAL_GPIO_Init+0x2e8>)
 8002abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002abe:	4a56      	ldr	r2, [pc, #344]	@ (8002c18 <HAL_GPIO_Init+0x2e8>)
 8002ac0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ac4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ac6:	4b54      	ldr	r3, [pc, #336]	@ (8002c18 <HAL_GPIO_Init+0x2e8>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ad2:	4a52      	ldr	r2, [pc, #328]	@ (8002c1c <HAL_GPIO_Init+0x2ec>)
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	089b      	lsrs	r3, r3, #2
 8002ad8:	3302      	adds	r3, #2
 8002ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	220f      	movs	r2, #15
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4013      	ands	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a49      	ldr	r2, [pc, #292]	@ (8002c20 <HAL_GPIO_Init+0x2f0>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d019      	beq.n	8002b32 <HAL_GPIO_Init+0x202>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a48      	ldr	r2, [pc, #288]	@ (8002c24 <HAL_GPIO_Init+0x2f4>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d013      	beq.n	8002b2e <HAL_GPIO_Init+0x1fe>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a47      	ldr	r2, [pc, #284]	@ (8002c28 <HAL_GPIO_Init+0x2f8>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00d      	beq.n	8002b2a <HAL_GPIO_Init+0x1fa>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a46      	ldr	r2, [pc, #280]	@ (8002c2c <HAL_GPIO_Init+0x2fc>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d007      	beq.n	8002b26 <HAL_GPIO_Init+0x1f6>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a45      	ldr	r2, [pc, #276]	@ (8002c30 <HAL_GPIO_Init+0x300>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d101      	bne.n	8002b22 <HAL_GPIO_Init+0x1f2>
 8002b1e:	2304      	movs	r3, #4
 8002b20:	e008      	b.n	8002b34 <HAL_GPIO_Init+0x204>
 8002b22:	2307      	movs	r3, #7
 8002b24:	e006      	b.n	8002b34 <HAL_GPIO_Init+0x204>
 8002b26:	2303      	movs	r3, #3
 8002b28:	e004      	b.n	8002b34 <HAL_GPIO_Init+0x204>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e002      	b.n	8002b34 <HAL_GPIO_Init+0x204>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <HAL_GPIO_Init+0x204>
 8002b32:	2300      	movs	r3, #0
 8002b34:	69fa      	ldr	r2, [r7, #28]
 8002b36:	f002 0203 	and.w	r2, r2, #3
 8002b3a:	0092      	lsls	r2, r2, #2
 8002b3c:	4093      	lsls	r3, r2
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b44:	4935      	ldr	r1, [pc, #212]	@ (8002c1c <HAL_GPIO_Init+0x2ec>)
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	089b      	lsrs	r3, r3, #2
 8002b4a:	3302      	adds	r3, #2
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b52:	4b38      	ldr	r3, [pc, #224]	@ (8002c34 <HAL_GPIO_Init+0x304>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b76:	4a2f      	ldr	r2, [pc, #188]	@ (8002c34 <HAL_GPIO_Init+0x304>)
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002c34 <HAL_GPIO_Init+0x304>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ba0:	4a24      	ldr	r2, [pc, #144]	@ (8002c34 <HAL_GPIO_Init+0x304>)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ba6:	4b23      	ldr	r3, [pc, #140]	@ (8002c34 <HAL_GPIO_Init+0x304>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bca:	4a1a      	ldr	r2, [pc, #104]	@ (8002c34 <HAL_GPIO_Init+0x304>)
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bd0:	4b18      	ldr	r3, [pc, #96]	@ (8002c34 <HAL_GPIO_Init+0x304>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bf4:	4a0f      	ldr	r2, [pc, #60]	@ (8002c34 <HAL_GPIO_Init+0x304>)
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	61fb      	str	r3, [r7, #28]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	2b0f      	cmp	r3, #15
 8002c04:	f67f aea2 	bls.w	800294c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	3724      	adds	r7, #36	@ 0x24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40013800 	.word	0x40013800
 8002c20:	40020000 	.word	0x40020000
 8002c24:	40020400 	.word	0x40020400
 8002c28:	40020800 	.word	0x40020800
 8002c2c:	40020c00 	.word	0x40020c00
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40013c00 	.word	0x40013c00

08002c38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	887b      	ldrh	r3, [r7, #2]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
 8002c54:	e001      	b.n	8002c5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c56:	2300      	movs	r3, #0
 8002c58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	807b      	strh	r3, [r7, #2]
 8002c74:	4613      	mov	r3, r2
 8002c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c78:	787b      	ldrb	r3, [r7, #1]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c7e:	887a      	ldrh	r2, [r7, #2]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c84:	e003      	b.n	8002c8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c86:	887b      	ldrh	r3, [r7, #2]
 8002c88:	041a      	lsls	r2, r3, #16
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	619a      	str	r2, [r3, #24]
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b085      	sub	sp, #20
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cac:	887a      	ldrh	r2, [r7, #2]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	041a      	lsls	r2, r3, #16
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	43d9      	mvns	r1, r3
 8002cb8:	887b      	ldrh	r3, [r7, #2]
 8002cba:	400b      	ands	r3, r1
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	619a      	str	r2, [r3, #24]
}
 8002cc2:	bf00      	nop
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
	...

08002cd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e267      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d075      	beq.n	8002dda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002cee:	4b88      	ldr	r3, [pc, #544]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d00c      	beq.n	8002d14 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cfa:	4b85      	ldr	r3, [pc, #532]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d112      	bne.n	8002d2c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d06:	4b82      	ldr	r3, [pc, #520]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d12:	d10b      	bne.n	8002d2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d14:	4b7e      	ldr	r3, [pc, #504]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d05b      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x108>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d157      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e242      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d34:	d106      	bne.n	8002d44 <HAL_RCC_OscConfig+0x74>
 8002d36:	4b76      	ldr	r3, [pc, #472]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a75      	ldr	r2, [pc, #468]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	e01d      	b.n	8002d80 <HAL_RCC_OscConfig+0xb0>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d4c:	d10c      	bne.n	8002d68 <HAL_RCC_OscConfig+0x98>
 8002d4e:	4b70      	ldr	r3, [pc, #448]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a6f      	ldr	r2, [pc, #444]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	4b6d      	ldr	r3, [pc, #436]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a6c      	ldr	r2, [pc, #432]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	e00b      	b.n	8002d80 <HAL_RCC_OscConfig+0xb0>
 8002d68:	4b69      	ldr	r3, [pc, #420]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a68      	ldr	r2, [pc, #416]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	4b66      	ldr	r3, [pc, #408]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a65      	ldr	r2, [pc, #404]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d013      	beq.n	8002db0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7fe fb18 	bl	80013bc <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d90:	f7fe fb14 	bl	80013bc <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b64      	cmp	r3, #100	@ 0x64
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e207      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da2:	4b5b      	ldr	r3, [pc, #364]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0xc0>
 8002dae:	e014      	b.n	8002dda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7fe fb04 	bl	80013bc <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db8:	f7fe fb00 	bl	80013bc <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b64      	cmp	r3, #100	@ 0x64
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e1f3      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dca:	4b51      	ldr	r3, [pc, #324]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0xe8>
 8002dd6:	e000      	b.n	8002dda <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d063      	beq.n	8002eae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002de6:	4b4a      	ldr	r3, [pc, #296]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 030c 	and.w	r3, r3, #12
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00b      	beq.n	8002e0a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002df2:	4b47      	ldr	r3, [pc, #284]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002dfa:	2b08      	cmp	r3, #8
 8002dfc:	d11c      	bne.n	8002e38 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dfe:	4b44      	ldr	r3, [pc, #272]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d116      	bne.n	8002e38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0a:	4b41      	ldr	r3, [pc, #260]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d005      	beq.n	8002e22 <HAL_RCC_OscConfig+0x152>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d001      	beq.n	8002e22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e1c7      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e22:	4b3b      	ldr	r3, [pc, #236]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	4937      	ldr	r1, [pc, #220]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e36:	e03a      	b.n	8002eae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d020      	beq.n	8002e82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e40:	4b34      	ldr	r3, [pc, #208]	@ (8002f14 <HAL_RCC_OscConfig+0x244>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e46:	f7fe fab9 	bl	80013bc <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e4e:	f7fe fab5 	bl	80013bc <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e1a8      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e60:	4b2b      	ldr	r3, [pc, #172]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0f0      	beq.n	8002e4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e6c:	4b28      	ldr	r3, [pc, #160]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4925      	ldr	r1, [pc, #148]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	600b      	str	r3, [r1, #0]
 8002e80:	e015      	b.n	8002eae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e82:	4b24      	ldr	r3, [pc, #144]	@ (8002f14 <HAL_RCC_OscConfig+0x244>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7fe fa98 	bl	80013bc <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e90:	f7fe fa94 	bl	80013bc <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e187      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d036      	beq.n	8002f28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d016      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ec2:	4b15      	ldr	r3, [pc, #84]	@ (8002f18 <HAL_RCC_OscConfig+0x248>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec8:	f7fe fa78 	bl	80013bc <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed0:	f7fe fa74 	bl	80013bc <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e167      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x200>
 8002eee:	e01b      	b.n	8002f28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ef0:	4b09      	ldr	r3, [pc, #36]	@ (8002f18 <HAL_RCC_OscConfig+0x248>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef6:	f7fe fa61 	bl	80013bc <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002efc:	e00e      	b.n	8002f1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002efe:	f7fe fa5d 	bl	80013bc <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d907      	bls.n	8002f1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e150      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
 8002f10:	40023800 	.word	0x40023800
 8002f14:	42470000 	.word	0x42470000
 8002f18:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f1c:	4b88      	ldr	r3, [pc, #544]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002f1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1ea      	bne.n	8002efe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 8097 	beq.w	8003064 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f36:	2300      	movs	r3, #0
 8002f38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f3a:	4b81      	ldr	r3, [pc, #516]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10f      	bne.n	8002f66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	4b7d      	ldr	r3, [pc, #500]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	4a7c      	ldr	r2, [pc, #496]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f56:	4b7a      	ldr	r3, [pc, #488]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f5e:	60bb      	str	r3, [r7, #8]
 8002f60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f62:	2301      	movs	r3, #1
 8002f64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f66:	4b77      	ldr	r3, [pc, #476]	@ (8003144 <HAL_RCC_OscConfig+0x474>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d118      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f72:	4b74      	ldr	r3, [pc, #464]	@ (8003144 <HAL_RCC_OscConfig+0x474>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a73      	ldr	r2, [pc, #460]	@ (8003144 <HAL_RCC_OscConfig+0x474>)
 8002f78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f7e:	f7fe fa1d 	bl	80013bc <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f86:	f7fe fa19 	bl	80013bc <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e10c      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f98:	4b6a      	ldr	r3, [pc, #424]	@ (8003144 <HAL_RCC_OscConfig+0x474>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0f0      	beq.n	8002f86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d106      	bne.n	8002fba <HAL_RCC_OscConfig+0x2ea>
 8002fac:	4b64      	ldr	r3, [pc, #400]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb0:	4a63      	ldr	r2, [pc, #396]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fb2:	f043 0301 	orr.w	r3, r3, #1
 8002fb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fb8:	e01c      	b.n	8002ff4 <HAL_RCC_OscConfig+0x324>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b05      	cmp	r3, #5
 8002fc0:	d10c      	bne.n	8002fdc <HAL_RCC_OscConfig+0x30c>
 8002fc2:	4b5f      	ldr	r3, [pc, #380]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc6:	4a5e      	ldr	r2, [pc, #376]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fc8:	f043 0304 	orr.w	r3, r3, #4
 8002fcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fce:	4b5c      	ldr	r3, [pc, #368]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd2:	4a5b      	ldr	r2, [pc, #364]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fda:	e00b      	b.n	8002ff4 <HAL_RCC_OscConfig+0x324>
 8002fdc:	4b58      	ldr	r3, [pc, #352]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe0:	4a57      	ldr	r2, [pc, #348]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fe2:	f023 0301 	bic.w	r3, r3, #1
 8002fe6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fe8:	4b55      	ldr	r3, [pc, #340]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fec:	4a54      	ldr	r2, [pc, #336]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fee:	f023 0304 	bic.w	r3, r3, #4
 8002ff2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d015      	beq.n	8003028 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffc:	f7fe f9de 	bl	80013bc <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003002:	e00a      	b.n	800301a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003004:	f7fe f9da 	bl	80013bc <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e0cb      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301a:	4b49      	ldr	r3, [pc, #292]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0ee      	beq.n	8003004 <HAL_RCC_OscConfig+0x334>
 8003026:	e014      	b.n	8003052 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003028:	f7fe f9c8 	bl	80013bc <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800302e:	e00a      	b.n	8003046 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003030:	f7fe f9c4 	bl	80013bc <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e0b5      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003046:	4b3e      	ldr	r3, [pc, #248]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8003048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1ee      	bne.n	8003030 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003052:	7dfb      	ldrb	r3, [r7, #23]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d105      	bne.n	8003064 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003058:	4b39      	ldr	r3, [pc, #228]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 800305a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305c:	4a38      	ldr	r2, [pc, #224]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 800305e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003062:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80a1 	beq.w	80031b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800306e:	4b34      	ldr	r3, [pc, #208]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	2b08      	cmp	r3, #8
 8003078:	d05c      	beq.n	8003134 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d141      	bne.n	8003106 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003082:	4b31      	ldr	r3, [pc, #196]	@ (8003148 <HAL_RCC_OscConfig+0x478>)
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7fe f998 	bl	80013bc <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003090:	f7fe f994 	bl	80013bc <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e087      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a2:	4b27      	ldr	r3, [pc, #156]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69da      	ldr	r2, [r3, #28]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030bc:	019b      	lsls	r3, r3, #6
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c4:	085b      	lsrs	r3, r3, #1
 80030c6:	3b01      	subs	r3, #1
 80030c8:	041b      	lsls	r3, r3, #16
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d0:	061b      	lsls	r3, r3, #24
 80030d2:	491b      	ldr	r1, [pc, #108]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003148 <HAL_RCC_OscConfig+0x478>)
 80030da:	2201      	movs	r2, #1
 80030dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030de:	f7fe f96d 	bl	80013bc <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e6:	f7fe f969 	bl	80013bc <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e05c      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f8:	4b11      	ldr	r3, [pc, #68]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0f0      	beq.n	80030e6 <HAL_RCC_OscConfig+0x416>
 8003104:	e054      	b.n	80031b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003106:	4b10      	ldr	r3, [pc, #64]	@ (8003148 <HAL_RCC_OscConfig+0x478>)
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310c:	f7fe f956 	bl	80013bc <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003114:	f7fe f952 	bl	80013bc <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e045      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003126:	4b06      	ldr	r3, [pc, #24]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f0      	bne.n	8003114 <HAL_RCC_OscConfig+0x444>
 8003132:	e03d      	b.n	80031b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d107      	bne.n	800314c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e038      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
 8003140:	40023800 	.word	0x40023800
 8003144:	40007000 	.word	0x40007000
 8003148:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800314c:	4b1b      	ldr	r3, [pc, #108]	@ (80031bc <HAL_RCC_OscConfig+0x4ec>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d028      	beq.n	80031ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003164:	429a      	cmp	r2, r3
 8003166:	d121      	bne.n	80031ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003172:	429a      	cmp	r2, r3
 8003174:	d11a      	bne.n	80031ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800317c:	4013      	ands	r3, r2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003182:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003184:	4293      	cmp	r3, r2
 8003186:	d111      	bne.n	80031ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003192:	085b      	lsrs	r3, r3, #1
 8003194:	3b01      	subs	r3, #1
 8003196:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003198:	429a      	cmp	r2, r3
 800319a:	d107      	bne.n	80031ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d001      	beq.n	80031b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40023800 	.word	0x40023800

080031c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e0cc      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031d4:	4b68      	ldr	r3, [pc, #416]	@ (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d90c      	bls.n	80031fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e2:	4b65      	ldr	r3, [pc, #404]	@ (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ea:	4b63      	ldr	r3, [pc, #396]	@ (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d001      	beq.n	80031fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e0b8      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d020      	beq.n	800324a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003214:	4b59      	ldr	r3, [pc, #356]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	4a58      	ldr	r2, [pc, #352]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800321e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0308 	and.w	r3, r3, #8
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800322c:	4b53      	ldr	r3, [pc, #332]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	4a52      	ldr	r2, [pc, #328]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003236:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003238:	4b50      	ldr	r3, [pc, #320]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	494d      	ldr	r1, [pc, #308]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	4313      	orrs	r3, r2
 8003248:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d044      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d107      	bne.n	800326e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325e:	4b47      	ldr	r3, [pc, #284]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d119      	bne.n	800329e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e07f      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b02      	cmp	r3, #2
 8003274:	d003      	beq.n	800327e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800327a:	2b03      	cmp	r3, #3
 800327c:	d107      	bne.n	800328e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327e:	4b3f      	ldr	r3, [pc, #252]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d109      	bne.n	800329e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e06f      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328e:	4b3b      	ldr	r3, [pc, #236]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e067      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800329e:	4b37      	ldr	r3, [pc, #220]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f023 0203 	bic.w	r2, r3, #3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	4934      	ldr	r1, [pc, #208]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032b0:	f7fe f884 	bl	80013bc <HAL_GetTick>
 80032b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b6:	e00a      	b.n	80032ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b8:	f7fe f880 	bl	80013bc <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e04f      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ce:	4b2b      	ldr	r3, [pc, #172]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 020c 	and.w	r2, r3, #12
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	429a      	cmp	r2, r3
 80032de:	d1eb      	bne.n	80032b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032e0:	4b25      	ldr	r3, [pc, #148]	@ (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d20c      	bcs.n	8003308 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ee:	4b22      	ldr	r3, [pc, #136]	@ (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f6:	4b20      	ldr	r3, [pc, #128]	@ (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	429a      	cmp	r2, r3
 8003302:	d001      	beq.n	8003308 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e032      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003314:	4b19      	ldr	r3, [pc, #100]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	4916      	ldr	r1, [pc, #88]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	4313      	orrs	r3, r2
 8003324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d009      	beq.n	8003346 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003332:	4b12      	ldr	r3, [pc, #72]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	490e      	ldr	r1, [pc, #56]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	4313      	orrs	r3, r2
 8003344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003346:	f000 f821 	bl	800338c <HAL_RCC_GetSysClockFreq>
 800334a:	4602      	mov	r2, r0
 800334c:	4b0b      	ldr	r3, [pc, #44]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	091b      	lsrs	r3, r3, #4
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	490a      	ldr	r1, [pc, #40]	@ (8003380 <HAL_RCC_ClockConfig+0x1c0>)
 8003358:	5ccb      	ldrb	r3, [r1, r3]
 800335a:	fa22 f303 	lsr.w	r3, r2, r3
 800335e:	4a09      	ldr	r2, [pc, #36]	@ (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 8003360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003362:	4b09      	ldr	r3, [pc, #36]	@ (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7fd ffe4 	bl	8001334 <HAL_InitTick>

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40023c00 	.word	0x40023c00
 800337c:	40023800 	.word	0x40023800
 8003380:	0800a388 	.word	0x0800a388
 8003384:	20000004 	.word	0x20000004
 8003388:	20000008 	.word	0x20000008

0800338c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800338c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003390:	b090      	sub	sp, #64	@ 0x40
 8003392:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033a4:	4b59      	ldr	r3, [pc, #356]	@ (800350c <HAL_RCC_GetSysClockFreq+0x180>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 030c 	and.w	r3, r3, #12
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d00d      	beq.n	80033cc <HAL_RCC_GetSysClockFreq+0x40>
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	f200 80a1 	bhi.w	80034f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <HAL_RCC_GetSysClockFreq+0x34>
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d003      	beq.n	80033c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80033be:	e09b      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033c0:	4b53      	ldr	r3, [pc, #332]	@ (8003510 <HAL_RCC_GetSysClockFreq+0x184>)
 80033c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033c4:	e09b      	b.n	80034fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033c6:	4b53      	ldr	r3, [pc, #332]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x188>)
 80033c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033ca:	e098      	b.n	80034fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033cc:	4b4f      	ldr	r3, [pc, #316]	@ (800350c <HAL_RCC_GetSysClockFreq+0x180>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033d6:	4b4d      	ldr	r3, [pc, #308]	@ (800350c <HAL_RCC_GetSysClockFreq+0x180>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d028      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e2:	4b4a      	ldr	r3, [pc, #296]	@ (800350c <HAL_RCC_GetSysClockFreq+0x180>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	099b      	lsrs	r3, r3, #6
 80033e8:	2200      	movs	r2, #0
 80033ea:	623b      	str	r3, [r7, #32]
 80033ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033f4:	2100      	movs	r1, #0
 80033f6:	4b47      	ldr	r3, [pc, #284]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x188>)
 80033f8:	fb03 f201 	mul.w	r2, r3, r1
 80033fc:	2300      	movs	r3, #0
 80033fe:	fb00 f303 	mul.w	r3, r0, r3
 8003402:	4413      	add	r3, r2
 8003404:	4a43      	ldr	r2, [pc, #268]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x188>)
 8003406:	fba0 1202 	umull	r1, r2, r0, r2
 800340a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800340c:	460a      	mov	r2, r1
 800340e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003410:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003412:	4413      	add	r3, r2
 8003414:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003418:	2200      	movs	r2, #0
 800341a:	61bb      	str	r3, [r7, #24]
 800341c:	61fa      	str	r2, [r7, #28]
 800341e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003422:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003426:	f7fc ff33 	bl	8000290 <__aeabi_uldivmod>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4613      	mov	r3, r2
 8003430:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003432:	e053      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003434:	4b35      	ldr	r3, [pc, #212]	@ (800350c <HAL_RCC_GetSysClockFreq+0x180>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	099b      	lsrs	r3, r3, #6
 800343a:	2200      	movs	r2, #0
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	617a      	str	r2, [r7, #20]
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003446:	f04f 0b00 	mov.w	fp, #0
 800344a:	4652      	mov	r2, sl
 800344c:	465b      	mov	r3, fp
 800344e:	f04f 0000 	mov.w	r0, #0
 8003452:	f04f 0100 	mov.w	r1, #0
 8003456:	0159      	lsls	r1, r3, #5
 8003458:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800345c:	0150      	lsls	r0, r2, #5
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	ebb2 080a 	subs.w	r8, r2, sl
 8003466:	eb63 090b 	sbc.w	r9, r3, fp
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	f04f 0300 	mov.w	r3, #0
 8003472:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003476:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800347a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800347e:	ebb2 0408 	subs.w	r4, r2, r8
 8003482:	eb63 0509 	sbc.w	r5, r3, r9
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	f04f 0300 	mov.w	r3, #0
 800348e:	00eb      	lsls	r3, r5, #3
 8003490:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003494:	00e2      	lsls	r2, r4, #3
 8003496:	4614      	mov	r4, r2
 8003498:	461d      	mov	r5, r3
 800349a:	eb14 030a 	adds.w	r3, r4, sl
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	eb45 030b 	adc.w	r3, r5, fp
 80034a4:	607b      	str	r3, [r7, #4]
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034b2:	4629      	mov	r1, r5
 80034b4:	028b      	lsls	r3, r1, #10
 80034b6:	4621      	mov	r1, r4
 80034b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034bc:	4621      	mov	r1, r4
 80034be:	028a      	lsls	r2, r1, #10
 80034c0:	4610      	mov	r0, r2
 80034c2:	4619      	mov	r1, r3
 80034c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c6:	2200      	movs	r2, #0
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	60fa      	str	r2, [r7, #12]
 80034cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034d0:	f7fc fede 	bl	8000290 <__aeabi_uldivmod>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4613      	mov	r3, r2
 80034da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80034dc:	4b0b      	ldr	r3, [pc, #44]	@ (800350c <HAL_RCC_GetSysClockFreq+0x180>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	0c1b      	lsrs	r3, r3, #16
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	3301      	adds	r3, #1
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80034ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034f6:	e002      	b.n	80034fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034f8:	4b05      	ldr	r3, [pc, #20]	@ (8003510 <HAL_RCC_GetSysClockFreq+0x184>)
 80034fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003500:	4618      	mov	r0, r3
 8003502:	3740      	adds	r7, #64	@ 0x40
 8003504:	46bd      	mov	sp, r7
 8003506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800350a:	bf00      	nop
 800350c:	40023800 	.word	0x40023800
 8003510:	00f42400 	.word	0x00f42400
 8003514:	017d7840 	.word	0x017d7840

08003518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800351c:	4b03      	ldr	r3, [pc, #12]	@ (800352c <HAL_RCC_GetHCLKFreq+0x14>)
 800351e:	681b      	ldr	r3, [r3, #0]
}
 8003520:	4618      	mov	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	20000004 	.word	0x20000004

08003530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003534:	f7ff fff0 	bl	8003518 <HAL_RCC_GetHCLKFreq>
 8003538:	4602      	mov	r2, r0
 800353a:	4b05      	ldr	r3, [pc, #20]	@ (8003550 <HAL_RCC_GetPCLK1Freq+0x20>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	0a9b      	lsrs	r3, r3, #10
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	4903      	ldr	r1, [pc, #12]	@ (8003554 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003546:	5ccb      	ldrb	r3, [r1, r3]
 8003548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800354c:	4618      	mov	r0, r3
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40023800 	.word	0x40023800
 8003554:	0800a398 	.word	0x0800a398

08003558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800355c:	f7ff ffdc 	bl	8003518 <HAL_RCC_GetHCLKFreq>
 8003560:	4602      	mov	r2, r0
 8003562:	4b05      	ldr	r3, [pc, #20]	@ (8003578 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	0b5b      	lsrs	r3, r3, #13
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	4903      	ldr	r1, [pc, #12]	@ (800357c <HAL_RCC_GetPCLK2Freq+0x24>)
 800356e:	5ccb      	ldrb	r3, [r1, r3]
 8003570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003574:	4618      	mov	r0, r3
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40023800 	.word	0x40023800
 800357c:	0800a398 	.word	0x0800a398

08003580 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e022      	b.n	80035d8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d105      	bne.n	80035aa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7fd fc45 	bl	8000e34 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2203      	movs	r2, #3
 80035ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f814 	bl	80035e0 <HAL_SD_InitCard>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e00a      	b.n	80035d8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80035e0:	b5b0      	push	{r4, r5, r7, lr}
 80035e2:	b08e      	sub	sp, #56	@ 0x38
 80035e4:	af04      	add	r7, sp, #16
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80035f0:	2300      	movs	r3, #0
 80035f2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80035f8:	2300      	movs	r3, #0
 80035fa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80035fc:	2376      	movs	r3, #118	@ 0x76
 80035fe:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681d      	ldr	r5, [r3, #0]
 8003604:	466c      	mov	r4, sp
 8003606:	f107 0314 	add.w	r3, r7, #20
 800360a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800360e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003612:	f107 0308 	add.w	r3, r7, #8
 8003616:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003618:	4628      	mov	r0, r5
 800361a:	f002 fb9d 	bl	8005d58 <SDIO_Init>
 800361e:	4603      	mov	r3, r0
 8003620:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8003624:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e04f      	b.n	80036d0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003630:	4b29      	ldr	r3, [pc, #164]	@ (80036d8 <HAL_SD_InitCard+0xf8>)
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f002 fbd5 	bl	8005dea <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003640:	4b25      	ldr	r3, [pc, #148]	@ (80036d8 <HAL_SD_InitCard+0xf8>)
 8003642:	2201      	movs	r2, #1
 8003644:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003646:	2002      	movs	r0, #2
 8003648:	f7fd fec4 	bl	80013d4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f001 f877 	bl	8004740 <SD_PowerON>
 8003652:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00b      	beq.n	8003672 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	431a      	orrs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e02e      	b.n	80036d0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 ff96 	bl	80045a4 <SD_InitCard>
 8003678:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00b      	beq.n	8003698 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e01b      	b.n	80036d0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80036a0:	4618      	mov	r0, r3
 80036a2:	f002 fc34 	bl	8005f0e <SDMMC_CmdBlockLength>
 80036a6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00f      	beq.n	80036ce <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a0a      	ldr	r2, [pc, #40]	@ (80036dc <HAL_SD_InitCard+0xfc>)
 80036b4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	431a      	orrs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3728      	adds	r7, #40	@ 0x28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bdb0      	pop	{r4, r5, r7, pc}
 80036d8:	422580a0 	.word	0x422580a0
 80036dc:	004005ff 	.word	0x004005ff

080036e0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b092      	sub	sp, #72	@ 0x48
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80036ee:	f7fd fe65 	bl	80013bc <HAL_GetTick>
 80036f2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d107      	bne.n	8003712 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003706:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e1c5      	b.n	8003a9e <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b01      	cmp	r3, #1
 800371c:	f040 81b8 	bne.w	8003a90 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003726:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	441a      	add	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003730:	429a      	cmp	r2, r3
 8003732:	d907      	bls.n	8003744 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003738:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e1ac      	b.n	8003a9e <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2203      	movs	r2, #3
 8003748:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2200      	movs	r2, #0
 8003752:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003758:	2b01      	cmp	r3, #1
 800375a:	d002      	beq.n	8003762 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800375c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800375e:	025b      	lsls	r3, r3, #9
 8003760:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003762:	f04f 33ff 	mov.w	r3, #4294967295
 8003766:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	025b      	lsls	r3, r3, #9
 800376c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800376e:	2390      	movs	r3, #144	@ 0x90
 8003770:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003772:	2302      	movs	r3, #2
 8003774:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003776:	2300      	movs	r3, #0
 8003778:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800377a:	2301      	movs	r3, #1
 800377c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f107 0214 	add.w	r2, r7, #20
 8003786:	4611      	mov	r1, r2
 8003788:	4618      	mov	r0, r3
 800378a:	f002 fb94 	bl	8005eb6 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d90a      	bls.n	80037aa <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2202      	movs	r2, #2
 8003798:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80037a0:	4618      	mov	r0, r3
 80037a2:	f002 fbf8 	bl	8005f96 <SDMMC_CmdReadMultiBlock>
 80037a6:	6478      	str	r0, [r7, #68]	@ 0x44
 80037a8:	e009      	b.n	80037be <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2201      	movs	r2, #1
 80037ae:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80037b6:	4618      	mov	r0, r3
 80037b8:	f002 fbcb 	bl	8005f52 <SDMMC_CmdReadSingleBlock>
 80037bc:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80037be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d012      	beq.n	80037ea <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a7e      	ldr	r2, [pc, #504]	@ (80039c4 <HAL_SD_ReadBlocks+0x2e4>)
 80037ca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037d2:	431a      	orrs	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e159      	b.n	8003a9e <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80037ee:	e061      	b.n	80038b4 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d03c      	beq.n	8003878 <HAL_SD_ReadBlocks+0x198>
 80037fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003800:	2b00      	cmp	r3, #0
 8003802:	d039      	beq.n	8003878 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003804:	2300      	movs	r3, #0
 8003806:	643b      	str	r3, [r7, #64]	@ 0x40
 8003808:	e033      	b.n	8003872 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f002 facd 	bl	8005dae <SDIO_ReadFIFO>
 8003814:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003818:	b2da      	uxtb	r2, r3
 800381a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800381c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800381e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003820:	3301      	adds	r3, #1
 8003822:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003826:	3b01      	subs	r3, #1
 8003828:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800382a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800382c:	0a1b      	lsrs	r3, r3, #8
 800382e:	b2da      	uxtb	r2, r3
 8003830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003832:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003836:	3301      	adds	r3, #1
 8003838:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800383a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800383c:	3b01      	subs	r3, #1
 800383e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003842:	0c1b      	lsrs	r3, r3, #16
 8003844:	b2da      	uxtb	r2, r3
 8003846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003848:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800384a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800384c:	3301      	adds	r3, #1
 800384e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003852:	3b01      	subs	r3, #1
 8003854:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003858:	0e1b      	lsrs	r3, r3, #24
 800385a:	b2da      	uxtb	r2, r3
 800385c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800385e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003862:	3301      	adds	r3, #1
 8003864:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003868:	3b01      	subs	r3, #1
 800386a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800386c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800386e:	3301      	adds	r3, #1
 8003870:	643b      	str	r3, [r7, #64]	@ 0x40
 8003872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003874:	2b07      	cmp	r3, #7
 8003876:	d9c8      	bls.n	800380a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003878:	f7fd fda0 	bl	80013bc <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003884:	429a      	cmp	r2, r3
 8003886:	d902      	bls.n	800388e <HAL_SD_ReadBlocks+0x1ae>
 8003888:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800388a:	2b00      	cmp	r3, #0
 800388c:	d112      	bne.n	80038b4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a4c      	ldr	r2, [pc, #304]	@ (80039c4 <HAL_SD_ReadBlocks+0x2e4>)
 8003894:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800389a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e0f4      	b.n	8003a9e <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038ba:	f240 332a 	movw	r3, #810	@ 0x32a
 80038be:	4013      	ands	r3, r2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d095      	beq.n	80037f0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d022      	beq.n	8003918 <HAL_SD_ReadBlocks+0x238>
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d91f      	bls.n	8003918 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d01b      	beq.n	8003918 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f002 fbbd 	bl	8006064 <SDMMC_CmdStopTransfer>
 80038ea:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80038ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d012      	beq.n	8003918 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a33      	ldr	r2, [pc, #204]	@ (80039c4 <HAL_SD_ReadBlocks+0x2e4>)
 80038f8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003900:	431a      	orrs	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e0c2      	b.n	8003a9e <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b00      	cmp	r3, #0
 8003924:	d106      	bne.n	8003934 <HAL_SD_ReadBlocks+0x254>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800392c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003930:	2b00      	cmp	r3, #0
 8003932:	d012      	beq.n	800395a <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a22      	ldr	r2, [pc, #136]	@ (80039c4 <HAL_SD_ReadBlocks+0x2e4>)
 800393a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003940:	f043 0208 	orr.w	r2, r3, #8
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e0a1      	b.n	8003a9e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d012      	beq.n	800398e <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a15      	ldr	r2, [pc, #84]	@ (80039c4 <HAL_SD_ReadBlocks+0x2e4>)
 800396e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003974:	f043 0202 	orr.w	r2, r3, #2
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e087      	b.n	8003a9e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b00      	cmp	r3, #0
 800399a:	d064      	beq.n	8003a66 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a08      	ldr	r2, [pc, #32]	@ (80039c4 <HAL_SD_ReadBlocks+0x2e4>)
 80039a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a8:	f043 0220 	orr.w	r2, r3, #32
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e06d      	b.n	8003a9e <HAL_SD_ReadBlocks+0x3be>
 80039c2:	bf00      	nop
 80039c4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f002 f9ee 	bl	8005dae <SDIO_ReadFIFO>
 80039d2:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80039d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039da:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80039dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039de:	3301      	adds	r3, #1
 80039e0:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80039e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039e4:	3b01      	subs	r3, #1
 80039e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80039e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ea:	0a1b      	lsrs	r3, r3, #8
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039f0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80039f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039f4:	3301      	adds	r3, #1
 80039f6:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80039f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039fa:	3b01      	subs	r3, #1
 80039fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80039fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a00:	0c1b      	lsrs	r3, r3, #16
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a06:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003a0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a10:	3b01      	subs	r3, #1
 8003a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a16:	0e1b      	lsrs	r3, r3, #24
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a1c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a20:	3301      	adds	r3, #1
 8003a22:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a26:	3b01      	subs	r3, #1
 8003a28:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003a2a:	f7fd fcc7 	bl	80013bc <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d902      	bls.n	8003a40 <HAL_SD_ReadBlocks+0x360>
 8003a3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d112      	bne.n	8003a66 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a18      	ldr	r2, [pc, #96]	@ (8003aa8 <HAL_SD_ReadBlocks+0x3c8>)
 8003a46:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a4c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e01b      	b.n	8003a9e <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <HAL_SD_ReadBlocks+0x39a>
 8003a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1a6      	bne.n	80039c8 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003a82:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	e006      	b.n	8003a9e <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a94:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
  }
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3748      	adds	r7, #72	@ 0x48
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	004005ff 	.word	0x004005ff

08003aac <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b092      	sub	sp, #72	@ 0x48
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003aba:	f7fd fc7f 	bl	80013bc <HAL_GetTick>
 8003abe:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d107      	bne.n	8003ade <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e16d      	b.n	8003dba <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	f040 8160 	bne.w	8003dac <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003af2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	441a      	add	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d907      	bls.n	8003b10 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b04:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e154      	b.n	8003dba <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2203      	movs	r2, #3
 8003b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d002      	beq.n	8003b2e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b2a:	025b      	lsls	r3, r3, #9
 8003b2c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b32:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	025b      	lsls	r3, r3, #9
 8003b38:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003b3a:	2390      	movs	r3, #144	@ 0x90
 8003b3c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003b46:	2301      	movs	r3, #1
 8003b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f107 0218 	add.w	r2, r7, #24
 8003b52:	4611      	mov	r1, r2
 8003b54:	4618      	mov	r0, r3
 8003b56:	f002 f9ae 	bl	8005eb6 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d90a      	bls.n	8003b76 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2220      	movs	r2, #32
 8003b64:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f002 fa56 	bl	800601e <SDMMC_CmdWriteMultiBlock>
 8003b72:	6478      	str	r0, [r7, #68]	@ 0x44
 8003b74:	e009      	b.n	8003b8a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2210      	movs	r2, #16
 8003b7a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b82:	4618      	mov	r0, r3
 8003b84:	f002 fa29 	bl	8005fda <SDMMC_CmdWriteSingleBlock>
 8003b88:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d012      	beq.n	8003bb6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a8b      	ldr	r2, [pc, #556]	@ (8003dc4 <HAL_SD_WriteBlocks+0x318>)
 8003b96:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e101      	b.n	8003dba <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003bba:	e065      	b.n	8003c88 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d040      	beq.n	8003c4c <HAL_SD_WriteBlocks+0x1a0>
 8003bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d03d      	beq.n	8003c4c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bd4:	e037      	b.n	8003c46 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bde:	3301      	adds	r3, #1
 8003be0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003be4:	3b01      	subs	r3, #1
 8003be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	021a      	lsls	r2, r3, #8
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	041a      	lsls	r2, r3, #16
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c0e:	3301      	adds	r3, #1
 8003c10:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003c12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c14:	3b01      	subs	r3, #1
 8003c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	061a      	lsls	r2, r3, #24
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c26:	3301      	adds	r3, #1
 8003c28:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f107 0214 	add.w	r2, r7, #20
 8003c38:	4611      	mov	r1, r2
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f002 f8c4 	bl	8005dc8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003c40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c42:	3301      	adds	r3, #1
 8003c44:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c48:	2b07      	cmp	r3, #7
 8003c4a:	d9c4      	bls.n	8003bd6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003c4c:	f7fd fbb6 	bl	80013bc <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d902      	bls.n	8003c62 <HAL_SD_WriteBlocks+0x1b6>
 8003c5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d112      	bne.n	8003c88 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a57      	ldr	r2, [pc, #348]	@ (8003dc4 <HAL_SD_WriteBlocks+0x318>)
 8003c68:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c70:	431a      	orrs	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e098      	b.n	8003dba <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c8e:	f240 331a 	movw	r3, #794	@ 0x31a
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d091      	beq.n	8003bbc <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d022      	beq.n	8003cec <HAL_SD_WriteBlocks+0x240>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d91f      	bls.n	8003cec <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb0:	2b03      	cmp	r3, #3
 8003cb2:	d01b      	beq.n	8003cec <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f002 f9d3 	bl	8006064 <SDMMC_CmdStopTransfer>
 8003cbe:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003cc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d012      	beq.n	8003cec <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a3e      	ldr	r2, [pc, #248]	@ (8003dc4 <HAL_SD_WriteBlocks+0x318>)
 8003ccc:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e066      	b.n	8003dba <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <HAL_SD_WriteBlocks+0x25c>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d012      	beq.n	8003d2e <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a2d      	ldr	r2, [pc, #180]	@ (8003dc4 <HAL_SD_WriteBlocks+0x318>)
 8003d0e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d14:	f043 0208 	orr.w	r2, r3, #8
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e045      	b.n	8003dba <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d012      	beq.n	8003d62 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a20      	ldr	r2, [pc, #128]	@ (8003dc4 <HAL_SD_WriteBlocks+0x318>)
 8003d42:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d48:	f043 0202 	orr.w	r2, r3, #2
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e02b      	b.n	8003dba <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d68:	f003 0310 	and.w	r3, r3, #16
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d012      	beq.n	8003d96 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a13      	ldr	r2, [pc, #76]	@ (8003dc4 <HAL_SD_WriteBlocks+0x318>)
 8003d76:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7c:	f043 0210 	orr.w	r2, r3, #16
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e011      	b.n	8003dba <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003d9e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8003da8:	2300      	movs	r3, #0
 8003daa:	e006      	b.n	8003dba <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
  }
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3748      	adds	r7, #72	@ 0x48
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	004005ff 	.word	0x004005ff

08003dc8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ddc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d008      	beq.n	8003df6 <HAL_SD_IRQHandler+0x2e>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fd5c 	bl	80048ac <SD_Read_IT>
 8003df4:	e165      	b.n	80040c2 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 808f 	beq.w	8003f24 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e0e:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6812      	ldr	r2, [r2, #0]
 8003e1a:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8003e1e:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8003e22:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0201 	bic.w	r2, r2, #1
 8003e32:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d039      	beq.n	8003eb2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d104      	bne.n	8003e52 <HAL_SD_IRQHandler+0x8a>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f003 0320 	and.w	r3, r3, #32
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d011      	beq.n	8003e76 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f002 f904 	bl	8006064 <SDMMC_CmdStopTransfer>
 8003e5c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f92f 	bl	80040d4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003e7e:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d104      	bne.n	8003ea2 <HAL_SD_IRQHandler+0xda>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f002 fd2a 	bl	80068fc <HAL_SD_RxCpltCallback>
 8003ea8:	e10b      	b.n	80040c2 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f002 fd1c 	bl	80068e8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003eb0:	e107      	b.n	80040c2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 8102 	beq.w	80040c2 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d011      	beq.n	8003eec <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f002 f8c9 	bl	8006064 <SDMMC_CmdStopTransfer>
 8003ed2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d008      	beq.n	8003eec <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f8f4 	bl	80040d4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f040 80e5 	bne.w	80040c2 <HAL_SD_IRQHandler+0x2fa>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f040 80df 	bne.w	80040c2 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0208 	bic.w	r2, r2, #8
 8003f12:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f002 fce3 	bl	80068e8 <HAL_SD_TxCpltCallback>
}
 8003f22:	e0ce      	b.n	80040c2 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d008      	beq.n	8003f44 <HAL_SD_IRQHandler+0x17c>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 fd06 	bl	800494e <SD_Write_IT>
 8003f42:	e0be      	b.n	80040c2 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f4a:	f240 233a 	movw	r3, #570	@ 0x23a
 8003f4e:	4013      	ands	r3, r2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 80b6 	beq.w	80040c2 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d005      	beq.n	8003f70 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f68:	f043 0202 	orr.w	r2, r3, #2
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d005      	beq.n	8003f8a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f82:	f043 0208 	orr.w	r2, r3, #8
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f90:	f003 0320 	and.w	r3, r3, #32
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d005      	beq.n	8003fa4 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f9c:	f043 0220 	orr.w	r2, r3, #32
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003faa:	f003 0310 	and.w	r3, r3, #16
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d005      	beq.n	8003fbe <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb6:	f043 0210 	orr.w	r2, r3, #16
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd0:	f043 0208 	orr.w	r2, r3, #8
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f240 723a 	movw	r2, #1850	@ 0x73a
 8003fe0:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6812      	ldr	r2, [r2, #0]
 8003fec:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8003ff0:	f023 0302 	bic.w	r3, r3, #2
 8003ff4:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f002 f832 	bl	8006064 <SDMMC_CmdStopTransfer>
 8004000:	4602      	mov	r2, r0
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f855 	bl	80040d4 <HAL_SD_ErrorCallback>
}
 800402a:	e04a      	b.n	80040c2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004032:	2b00      	cmp	r3, #0
 8004034:	d045      	beq.n	80040c2 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f003 0310 	and.w	r3, r3, #16
 800403c:	2b00      	cmp	r3, #0
 800403e:	d104      	bne.n	800404a <HAL_SD_IRQHandler+0x282>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 0320 	and.w	r3, r3, #32
 8004046:	2b00      	cmp	r3, #0
 8004048:	d011      	beq.n	800406e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800404e:	4a1f      	ldr	r2, [pc, #124]	@ (80040cc <HAL_SD_IRQHandler+0x304>)
 8004050:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004056:	4618      	mov	r0, r3
 8004058:	f7fe f9de 	bl	8002418 <HAL_DMA_Abort_IT>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d02f      	beq.n	80040c2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fa2e 	bl	80044c8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800406c:	e029      	b.n	80040c2 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d104      	bne.n	8004082 <HAL_SD_IRQHandler+0x2ba>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d011      	beq.n	80040a6 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004086:	4a12      	ldr	r2, [pc, #72]	@ (80040d0 <HAL_SD_IRQHandler+0x308>)
 8004088:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408e:	4618      	mov	r0, r3
 8004090:	f7fe f9c2 	bl	8002418 <HAL_DMA_Abort_IT>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d013      	beq.n	80040c2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fa49 	bl	8004536 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80040a4:	e00d      	b.n	80040c2 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f002 fc0a 	bl	80068d4 <HAL_SD_AbortCallback>
}
 80040c0:	e7ff      	b.n	80040c2 <HAL_SD_IRQHandler+0x2fa>
 80040c2:	bf00      	nop
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	080044c9 	.word	0x080044c9
 80040d0:	08004537 	.word	0x08004537

080040d4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040f6:	0f9b      	lsrs	r3, r3, #30
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004102:	0e9b      	lsrs	r3, r3, #26
 8004104:	b2db      	uxtb	r3, r3
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	b2da      	uxtb	r2, r3
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004114:	0e1b      	lsrs	r3, r3, #24
 8004116:	b2db      	uxtb	r3, r3
 8004118:	f003 0303 	and.w	r3, r3, #3
 800411c:	b2da      	uxtb	r2, r3
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004126:	0c1b      	lsrs	r3, r3, #16
 8004128:	b2da      	uxtb	r2, r3
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004132:	0a1b      	lsrs	r3, r3, #8
 8004134:	b2da      	uxtb	r2, r3
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800413e:	b2da      	uxtb	r2, r3
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004148:	0d1b      	lsrs	r3, r3, #20
 800414a:	b29a      	uxth	r2, r3
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004154:	0c1b      	lsrs	r3, r3, #16
 8004156:	b2db      	uxtb	r3, r3
 8004158:	f003 030f 	and.w	r3, r3, #15
 800415c:	b2da      	uxtb	r2, r3
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004166:	0bdb      	lsrs	r3, r3, #15
 8004168:	b2db      	uxtb	r3, r3
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	b2da      	uxtb	r2, r3
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004178:	0b9b      	lsrs	r3, r3, #14
 800417a:	b2db      	uxtb	r3, r3
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	b2da      	uxtb	r2, r3
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800418a:	0b5b      	lsrs	r3, r3, #13
 800418c:	b2db      	uxtb	r3, r3
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	b2da      	uxtb	r2, r3
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800419c:	0b1b      	lsrs	r3, r3, #12
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2200      	movs	r2, #0
 80041ae:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d163      	bne.n	8004280 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041bc:	009a      	lsls	r2, r3, #2
 80041be:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80041c2:	4013      	ands	r3, r2
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80041c8:	0f92      	lsrs	r2, r2, #30
 80041ca:	431a      	orrs	r2, r3
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041d4:	0edb      	lsrs	r3, r3, #27
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041e6:	0e1b      	lsrs	r3, r3, #24
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041f8:	0d5b      	lsrs	r3, r3, #21
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	b2da      	uxtb	r2, r3
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800420a:	0c9b      	lsrs	r3, r3, #18
 800420c:	b2db      	uxtb	r3, r3
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	b2da      	uxtb	r2, r3
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800421c:	0bdb      	lsrs	r3, r3, #15
 800421e:	b2db      	uxtb	r3, r3
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	b2da      	uxtb	r2, r3
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	7e1b      	ldrb	r3, [r3, #24]
 8004238:	b2db      	uxtb	r3, r3
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	3302      	adds	r3, #2
 8004240:	2201      	movs	r2, #1
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800424a:	fb03 f202 	mul.w	r2, r3, r2
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	7a1b      	ldrb	r3, [r3, #8]
 8004256:	b2db      	uxtb	r3, r3
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	2201      	movs	r2, #1
 800425e:	409a      	lsls	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800426c:	0a52      	lsrs	r2, r2, #9
 800426e:	fb03 f202 	mul.w	r2, r3, r2
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800427c:	661a      	str	r2, [r3, #96]	@ 0x60
 800427e:	e031      	b.n	80042e4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004284:	2b01      	cmp	r3, #1
 8004286:	d11d      	bne.n	80042c4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800428c:	041b      	lsls	r3, r3, #16
 800428e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004296:	0c1b      	lsrs	r3, r3, #16
 8004298:	431a      	orrs	r2, r3
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	3301      	adds	r3, #1
 80042a4:	029a      	lsls	r2, r3, #10
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042b8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	661a      	str	r2, [r3, #96]	@ 0x60
 80042c2:	e00f      	b.n	80042e4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a58      	ldr	r2, [pc, #352]	@ (800442c <HAL_SD_GetCardCSD+0x344>)
 80042ca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e09d      	b.n	8004420 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042e8:	0b9b      	lsrs	r3, r3, #14
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042fa:	09db      	lsrs	r3, r3, #7
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004302:	b2da      	uxtb	r2, r3
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800430c:	b2db      	uxtb	r3, r3
 800430e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004312:	b2da      	uxtb	r2, r3
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800431c:	0fdb      	lsrs	r3, r3, #31
 800431e:	b2da      	uxtb	r2, r3
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004328:	0f5b      	lsrs	r3, r3, #29
 800432a:	b2db      	uxtb	r3, r3
 800432c:	f003 0303 	and.w	r3, r3, #3
 8004330:	b2da      	uxtb	r2, r3
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800433a:	0e9b      	lsrs	r3, r3, #26
 800433c:	b2db      	uxtb	r3, r3
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	b2da      	uxtb	r2, r3
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800434c:	0d9b      	lsrs	r3, r3, #22
 800434e:	b2db      	uxtb	r3, r3
 8004350:	f003 030f 	and.w	r3, r3, #15
 8004354:	b2da      	uxtb	r2, r3
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800435e:	0d5b      	lsrs	r3, r3, #21
 8004360:	b2db      	uxtb	r3, r3
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	b2da      	uxtb	r2, r3
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800437a:	0c1b      	lsrs	r3, r3, #16
 800437c:	b2db      	uxtb	r3, r3
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	b2da      	uxtb	r2, r3
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800438e:	0bdb      	lsrs	r3, r3, #15
 8004390:	b2db      	uxtb	r3, r3
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	b2da      	uxtb	r2, r3
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a2:	0b9b      	lsrs	r3, r3, #14
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b6:	0b5b      	lsrs	r3, r3, #13
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ca:	0b1b      	lsrs	r3, r3, #12
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043de:	0a9b      	lsrs	r3, r3, #10
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f2:	0a1b      	lsrs	r3, r3, #8
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004406:	085b      	lsrs	r3, r3, #1
 8004408:	b2db      	uxtb	r3, r3
 800440a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800440e:	b2da      	uxtb	r2, r3
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	004005ff 	.word	0x004005ff

08004430 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004490:	2300      	movs	r3, #0
 8004492:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004494:	f107 030c 	add.w	r3, r7, #12
 8004498:	4619      	mov	r1, r3
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f9de 	bl	800485c <SD_SendStatus>
 80044a0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	0a5b      	lsrs	r3, r3, #9
 80044b8:	f003 030f 	and.w	r3, r3, #15
 80044bc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80044be:	693b      	ldr	r3, [r7, #16]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f240 523a 	movw	r2, #1338	@ 0x53a
 80044de:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f7ff ffd1 	bl	8004488 <HAL_SD_GetCardState>
 80044e6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2b06      	cmp	r3, #6
 80044fa:	d002      	beq.n	8004502 <SD_DMATxAbort+0x3a>
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2b05      	cmp	r3, #5
 8004500:	d10a      	bne.n	8004518 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f001 fdac 	bl	8006064 <SDMMC_CmdStopTransfer>
 800450c:	4602      	mov	r2, r0
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004512:	431a      	orrs	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451c:	2b00      	cmp	r3, #0
 800451e:	d103      	bne.n	8004528 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f002 f9d7 	bl	80068d4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004526:	e002      	b.n	800452e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f7ff fdd3 	bl	80040d4 <HAL_SD_ErrorCallback>
}
 800452e:	bf00      	nop
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004542:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f240 523a 	movw	r2, #1338	@ 0x53a
 800454c:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f7ff ff9a 	bl	8004488 <HAL_SD_GetCardState>
 8004554:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2b06      	cmp	r3, #6
 8004568:	d002      	beq.n	8004570 <SD_DMARxAbort+0x3a>
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2b05      	cmp	r3, #5
 800456e:	d10a      	bne.n	8004586 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4618      	mov	r0, r3
 8004576:	f001 fd75 	bl	8006064 <SDMMC_CmdStopTransfer>
 800457a:	4602      	mov	r2, r0
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004580:	431a      	orrs	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458a:	2b00      	cmp	r3, #0
 800458c:	d103      	bne.n	8004596 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f002 f9a0 	bl	80068d4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004594:	e002      	b.n	800459c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f7ff fd9c 	bl	80040d4 <HAL_SD_ErrorCallback>
}
 800459c:	bf00      	nop
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80045a4:	b5b0      	push	{r4, r5, r7, lr}
 80045a6:	b094      	sub	sp, #80	@ 0x50
 80045a8:	af04      	add	r7, sp, #16
 80045aa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80045ac:	2301      	movs	r3, #1
 80045ae:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f001 fc26 	bl	8005e06 <SDIO_GetPowerState>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d102      	bne.n	80045c6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80045c0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80045c4:	e0b8      	b.n	8004738 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ca:	2b03      	cmp	r3, #3
 80045cc:	d02f      	beq.n	800462e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f001 fe0d 	bl	80061f2 <SDMMC_CmdSendCID>
 80045d8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80045da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <SD_InitCard+0x40>
    {
      return errorstate;
 80045e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045e2:	e0a9      	b.n	8004738 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2100      	movs	r1, #0
 80045ea:	4618      	mov	r0, r3
 80045ec:	f001 fc50 	bl	8005e90 <SDIO_GetResponse>
 80045f0:	4602      	mov	r2, r0
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2104      	movs	r1, #4
 80045fc:	4618      	mov	r0, r3
 80045fe:	f001 fc47 	bl	8005e90 <SDIO_GetResponse>
 8004602:	4602      	mov	r2, r0
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2108      	movs	r1, #8
 800460e:	4618      	mov	r0, r3
 8004610:	f001 fc3e 	bl	8005e90 <SDIO_GetResponse>
 8004614:	4602      	mov	r2, r0
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	210c      	movs	r1, #12
 8004620:	4618      	mov	r0, r3
 8004622:	f001 fc35 	bl	8005e90 <SDIO_GetResponse>
 8004626:	4602      	mov	r2, r0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004632:	2b03      	cmp	r3, #3
 8004634:	d00d      	beq.n	8004652 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f107 020e 	add.w	r2, r7, #14
 800463e:	4611      	mov	r1, r2
 8004640:	4618      	mov	r0, r3
 8004642:	f001 fe13 	bl	800626c <SDMMC_CmdSetRelAdd>
 8004646:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <SD_InitCard+0xae>
    {
      return errorstate;
 800464e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004650:	e072      	b.n	8004738 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004656:	2b03      	cmp	r3, #3
 8004658:	d036      	beq.n	80046c8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800465a:	89fb      	ldrh	r3, [r7, #14]
 800465c:	461a      	mov	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800466a:	041b      	lsls	r3, r3, #16
 800466c:	4619      	mov	r1, r3
 800466e:	4610      	mov	r0, r2
 8004670:	f001 fddd 	bl	800622e <SDMMC_CmdSendCSD>
 8004674:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <SD_InitCard+0xdc>
    {
      return errorstate;
 800467c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800467e:	e05b      	b.n	8004738 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2100      	movs	r1, #0
 8004686:	4618      	mov	r0, r3
 8004688:	f001 fc02 	bl	8005e90 <SDIO_GetResponse>
 800468c:	4602      	mov	r2, r0
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2104      	movs	r1, #4
 8004698:	4618      	mov	r0, r3
 800469a:	f001 fbf9 	bl	8005e90 <SDIO_GetResponse>
 800469e:	4602      	mov	r2, r0
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2108      	movs	r1, #8
 80046aa:	4618      	mov	r0, r3
 80046ac:	f001 fbf0 	bl	8005e90 <SDIO_GetResponse>
 80046b0:	4602      	mov	r2, r0
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	210c      	movs	r1, #12
 80046bc:	4618      	mov	r0, r3
 80046be:	f001 fbe7 	bl	8005e90 <SDIO_GetResponse>
 80046c2:	4602      	mov	r2, r0
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2104      	movs	r1, #4
 80046ce:	4618      	mov	r0, r3
 80046d0:	f001 fbde 	bl	8005e90 <SDIO_GetResponse>
 80046d4:	4603      	mov	r3, r0
 80046d6:	0d1a      	lsrs	r2, r3, #20
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80046dc:	f107 0310 	add.w	r3, r7, #16
 80046e0:	4619      	mov	r1, r3
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7ff fd00 	bl	80040e8 <HAL_SD_GetCardCSD>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d002      	beq.n	80046f4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046ee:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80046f2:	e021      	b.n	8004738 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6819      	ldr	r1, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046fc:	041b      	lsls	r3, r3, #16
 80046fe:	2200      	movs	r2, #0
 8004700:	461c      	mov	r4, r3
 8004702:	4615      	mov	r5, r2
 8004704:	4622      	mov	r2, r4
 8004706:	462b      	mov	r3, r5
 8004708:	4608      	mov	r0, r1
 800470a:	f001 fccd 	bl	80060a8 <SDMMC_CmdSelDesel>
 800470e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <SD_InitCard+0x176>
  {
    return errorstate;
 8004716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004718:	e00e      	b.n	8004738 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681d      	ldr	r5, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	466c      	mov	r4, sp
 8004722:	f103 0210 	add.w	r2, r3, #16
 8004726:	ca07      	ldmia	r2, {r0, r1, r2}
 8004728:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800472c:	3304      	adds	r3, #4
 800472e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004730:	4628      	mov	r0, r5
 8004732:	f001 fb11 	bl	8005d58 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3740      	adds	r7, #64	@ 0x40
 800473c:	46bd      	mov	sp, r7
 800473e:	bdb0      	pop	{r4, r5, r7, pc}

08004740 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	2300      	movs	r3, #0
 8004752:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f001 fcc8 	bl	80060ee <SDMMC_CmdGoIdleState>
 800475e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <SD_PowerON+0x2a>
  {
    return errorstate;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	e072      	b.n	8004850 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f001 fcdb 	bl	800612a <SDMMC_CmdOperCond>
 8004774:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00d      	beq.n	8004798 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f001 fcb1 	bl	80060ee <SDMMC_CmdGoIdleState>
 800478c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d004      	beq.n	800479e <SD_PowerON+0x5e>
    {
      return errorstate;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	e05b      	b.n	8004850 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d137      	bne.n	8004816 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2100      	movs	r1, #0
 80047ac:	4618      	mov	r0, r3
 80047ae:	f001 fcdb 	bl	8006168 <SDMMC_CmdAppCommand>
 80047b2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d02d      	beq.n	8004816 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047ba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80047be:	e047      	b.n	8004850 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2100      	movs	r1, #0
 80047c6:	4618      	mov	r0, r3
 80047c8:	f001 fcce 	bl	8006168 <SDMMC_CmdAppCommand>
 80047cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <SD_PowerON+0x98>
    {
      return errorstate;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	e03b      	b.n	8004850 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	491e      	ldr	r1, [pc, #120]	@ (8004858 <SD_PowerON+0x118>)
 80047de:	4618      	mov	r0, r3
 80047e0:	f001 fce4 	bl	80061ac <SDMMC_CmdAppOperCommand>
 80047e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047ec:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80047f0:	e02e      	b.n	8004850 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2100      	movs	r1, #0
 80047f8:	4618      	mov	r0, r3
 80047fa:	f001 fb49 	bl	8005e90 <SDIO_GetResponse>
 80047fe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	0fdb      	lsrs	r3, r3, #31
 8004804:	2b01      	cmp	r3, #1
 8004806:	d101      	bne.n	800480c <SD_PowerON+0xcc>
 8004808:	2301      	movs	r3, #1
 800480a:	e000      	b.n	800480e <SD_PowerON+0xce>
 800480c:	2300      	movs	r3, #0
 800480e:	613b      	str	r3, [r7, #16]

    count++;
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	3301      	adds	r3, #1
 8004814:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800481c:	4293      	cmp	r3, r2
 800481e:	d802      	bhi.n	8004826 <SD_PowerON+0xe6>
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0cc      	beq.n	80047c0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800482c:	4293      	cmp	r3, r2
 800482e:	d902      	bls.n	8004836 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004830:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004834:	e00c      	b.n	8004850 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	645a      	str	r2, [r3, #68]	@ 0x44
 8004846:	e002      	b.n	800484e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	c1100000 	.word	0xc1100000

0800485c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d102      	bne.n	8004872 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800486c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004870:	e018      	b.n	80048a4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800487a:	041b      	lsls	r3, r3, #16
 800487c:	4619      	mov	r1, r3
 800487e:	4610      	mov	r0, r2
 8004880:	f001 fd15 	bl	80062ae <SDMMC_CmdSendStatus>
 8004884:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <SD_SendStatus+0x34>
  {
    return errorstate;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	e009      	b.n	80048a4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2100      	movs	r1, #0
 8004896:	4618      	mov	r0, r3
 8004898:	f001 fafa 	bl	8005e90 <SDIO_GetResponse>
 800489c:	4602      	mov	r2, r0
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048be:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d03f      	beq.n	8004946 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80048c6:	2300      	movs	r3, #0
 80048c8:	617b      	str	r3, [r7, #20]
 80048ca:	e033      	b.n	8004934 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f001 fa6c 	bl	8005dae <SDIO_ReadFIFO>
 80048d6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	701a      	strb	r2, [r3, #0]
      tmp++;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3301      	adds	r3, #1
 80048e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	3b01      	subs	r3, #1
 80048ea:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	0a1b      	lsrs	r3, r3, #8
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3301      	adds	r3, #1
 80048fa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	3b01      	subs	r3, #1
 8004900:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	0c1b      	lsrs	r3, r3, #16
 8004906:	b2da      	uxtb	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	3301      	adds	r3, #1
 8004910:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	3b01      	subs	r3, #1
 8004916:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	0e1b      	lsrs	r3, r3, #24
 800491c:	b2da      	uxtb	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	3301      	adds	r3, #1
 8004926:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	3b01      	subs	r3, #1
 800492c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	3301      	adds	r3, #1
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	2b07      	cmp	r3, #7
 8004938:	d9c8      	bls.n	80048cc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8004946:	bf00      	nop
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b086      	sub	sp, #24
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004960:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d043      	beq.n	80049f0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004968:	2300      	movs	r3, #0
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	e037      	b.n	80049de <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	3301      	adds	r3, #1
 8004978:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	3b01      	subs	r3, #1
 800497e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	021a      	lsls	r2, r3, #8
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	4313      	orrs	r3, r2
 800498a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	3301      	adds	r3, #1
 8004990:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	3b01      	subs	r3, #1
 8004996:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	041a      	lsls	r2, r3, #16
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	3301      	adds	r3, #1
 80049a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	3b01      	subs	r3, #1
 80049ae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	061a      	lsls	r2, r3, #24
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60bb      	str	r3, [r7, #8]
      tmp++;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	3301      	adds	r3, #1
 80049c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	3b01      	subs	r3, #1
 80049c6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f107 0208 	add.w	r2, r7, #8
 80049d0:	4611      	mov	r1, r2
 80049d2:	4618      	mov	r0, r3
 80049d4:	f001 f9f8 	bl	8005dc8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	3301      	adds	r3, #1
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	2b07      	cmp	r3, #7
 80049e2:	d9c4      	bls.n	800496e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80049f0:	bf00      	nop
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e041      	b.n	8004a8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d106      	bne.n	8004a24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7fc fb18 	bl	8001054 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3304      	adds	r3, #4
 8004a34:	4619      	mov	r1, r3
 8004a36:	4610      	mov	r0, r2
 8004a38:	f000 fac2 	bl	8004fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d109      	bne.n	8004abc <HAL_TIM_PWM_Start+0x24>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	bf14      	ite	ne
 8004ab4:	2301      	movne	r3, #1
 8004ab6:	2300      	moveq	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	e022      	b.n	8004b02 <HAL_TIM_PWM_Start+0x6a>
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d109      	bne.n	8004ad6 <HAL_TIM_PWM_Start+0x3e>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	bf14      	ite	ne
 8004ace:	2301      	movne	r3, #1
 8004ad0:	2300      	moveq	r3, #0
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	e015      	b.n	8004b02 <HAL_TIM_PWM_Start+0x6a>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d109      	bne.n	8004af0 <HAL_TIM_PWM_Start+0x58>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	bf14      	ite	ne
 8004ae8:	2301      	movne	r3, #1
 8004aea:	2300      	moveq	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	e008      	b.n	8004b02 <HAL_TIM_PWM_Start+0x6a>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	bf14      	ite	ne
 8004afc:	2301      	movne	r3, #1
 8004afe:	2300      	moveq	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e068      	b.n	8004bdc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d104      	bne.n	8004b1a <HAL_TIM_PWM_Start+0x82>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b18:	e013      	b.n	8004b42 <HAL_TIM_PWM_Start+0xaa>
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b04      	cmp	r3, #4
 8004b1e:	d104      	bne.n	8004b2a <HAL_TIM_PWM_Start+0x92>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2202      	movs	r2, #2
 8004b24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b28:	e00b      	b.n	8004b42 <HAL_TIM_PWM_Start+0xaa>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	d104      	bne.n	8004b3a <HAL_TIM_PWM_Start+0xa2>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b38:	e003      	b.n	8004b42 <HAL_TIM_PWM_Start+0xaa>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2201      	movs	r2, #1
 8004b48:	6839      	ldr	r1, [r7, #0]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 fc50 	bl	80053f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a23      	ldr	r2, [pc, #140]	@ (8004be4 <HAL_TIM_PWM_Start+0x14c>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d107      	bne.n	8004b6a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b68:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a1d      	ldr	r2, [pc, #116]	@ (8004be4 <HAL_TIM_PWM_Start+0x14c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d018      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0x10e>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b7c:	d013      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0x10e>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a19      	ldr	r2, [pc, #100]	@ (8004be8 <HAL_TIM_PWM_Start+0x150>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d00e      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0x10e>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a17      	ldr	r2, [pc, #92]	@ (8004bec <HAL_TIM_PWM_Start+0x154>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d009      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0x10e>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a16      	ldr	r2, [pc, #88]	@ (8004bf0 <HAL_TIM_PWM_Start+0x158>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d004      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0x10e>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a14      	ldr	r2, [pc, #80]	@ (8004bf4 <HAL_TIM_PWM_Start+0x15c>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d111      	bne.n	8004bca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2b06      	cmp	r3, #6
 8004bb6:	d010      	beq.n	8004bda <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f042 0201 	orr.w	r2, r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc8:	e007      	b.n	8004bda <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f042 0201 	orr.w	r2, r2, #1
 8004bd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	40010000 	.word	0x40010000
 8004be8:	40000400 	.word	0x40000400
 8004bec:	40000800 	.word	0x40000800
 8004bf0:	40000c00 	.word	0x40000c00
 8004bf4:	40014000 	.word	0x40014000

08004bf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d020      	beq.n	8004c5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d01b      	beq.n	8004c5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f06f 0202 	mvn.w	r2, #2
 8004c2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f99e 	bl	8004f84 <HAL_TIM_IC_CaptureCallback>
 8004c48:	e005      	b.n	8004c56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f990 	bl	8004f70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f9a1 	bl	8004f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d020      	beq.n	8004ca8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d01b      	beq.n	8004ca8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f06f 0204 	mvn.w	r2, #4
 8004c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f978 	bl	8004f84 <HAL_TIM_IC_CaptureCallback>
 8004c94:	e005      	b.n	8004ca2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f96a 	bl	8004f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f97b 	bl	8004f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	f003 0308 	and.w	r3, r3, #8
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d020      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f003 0308 	and.w	r3, r3, #8
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d01b      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f06f 0208 	mvn.w	r2, #8
 8004cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2204      	movs	r2, #4
 8004cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f952 	bl	8004f84 <HAL_TIM_IC_CaptureCallback>
 8004ce0:	e005      	b.n	8004cee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f944 	bl	8004f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f955 	bl	8004f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f003 0310 	and.w	r3, r3, #16
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d020      	beq.n	8004d40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f003 0310 	and.w	r3, r3, #16
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d01b      	beq.n	8004d40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0210 	mvn.w	r2, #16
 8004d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2208      	movs	r2, #8
 8004d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f92c 	bl	8004f84 <HAL_TIM_IC_CaptureCallback>
 8004d2c:	e005      	b.n	8004d3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f91e 	bl	8004f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f92f 	bl	8004f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00c      	beq.n	8004d64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d007      	beq.n	8004d64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f06f 0201 	mvn.w	r2, #1
 8004d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f8fc 	bl	8004f5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00c      	beq.n	8004d88 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d007      	beq.n	8004d88 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 fbd2 	bl	800552c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00c      	beq.n	8004dac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d007      	beq.n	8004dac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f900 	bl	8004fac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00c      	beq.n	8004dd0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f003 0320 	and.w	r3, r3, #32
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d007      	beq.n	8004dd0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f06f 0220 	mvn.w	r2, #32
 8004dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 fba4 	bl	8005518 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dd0:	bf00      	nop
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d101      	bne.n	8004df6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004df2:	2302      	movs	r3, #2
 8004df4:	e0ae      	b.n	8004f54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b0c      	cmp	r3, #12
 8004e02:	f200 809f 	bhi.w	8004f44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e06:	a201      	add	r2, pc, #4	@ (adr r2, 8004e0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0c:	08004e41 	.word	0x08004e41
 8004e10:	08004f45 	.word	0x08004f45
 8004e14:	08004f45 	.word	0x08004f45
 8004e18:	08004f45 	.word	0x08004f45
 8004e1c:	08004e81 	.word	0x08004e81
 8004e20:	08004f45 	.word	0x08004f45
 8004e24:	08004f45 	.word	0x08004f45
 8004e28:	08004f45 	.word	0x08004f45
 8004e2c:	08004ec3 	.word	0x08004ec3
 8004e30:	08004f45 	.word	0x08004f45
 8004e34:	08004f45 	.word	0x08004f45
 8004e38:	08004f45 	.word	0x08004f45
 8004e3c:	08004f03 	.word	0x08004f03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68b9      	ldr	r1, [r7, #8]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 f946 	bl	80050d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	699a      	ldr	r2, [r3, #24]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 0208 	orr.w	r2, r2, #8
 8004e5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699a      	ldr	r2, [r3, #24]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 0204 	bic.w	r2, r2, #4
 8004e6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6999      	ldr	r1, [r3, #24]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	691a      	ldr	r2, [r3, #16]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	619a      	str	r2, [r3, #24]
      break;
 8004e7e:	e064      	b.n	8004f4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68b9      	ldr	r1, [r7, #8]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 f98c 	bl	80051a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699a      	ldr	r2, [r3, #24]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699a      	ldr	r2, [r3, #24]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6999      	ldr	r1, [r3, #24]
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	021a      	lsls	r2, r3, #8
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	619a      	str	r2, [r3, #24]
      break;
 8004ec0:	e043      	b.n	8004f4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68b9      	ldr	r1, [r7, #8]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 f9d7 	bl	800527c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69da      	ldr	r2, [r3, #28]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f042 0208 	orr.w	r2, r2, #8
 8004edc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69da      	ldr	r2, [r3, #28]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 0204 	bic.w	r2, r2, #4
 8004eec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69d9      	ldr	r1, [r3, #28]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	691a      	ldr	r2, [r3, #16]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	61da      	str	r2, [r3, #28]
      break;
 8004f00:	e023      	b.n	8004f4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68b9      	ldr	r1, [r7, #8]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 fa21 	bl	8005350 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69da      	ldr	r2, [r3, #28]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69da      	ldr	r2, [r3, #28]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	69d9      	ldr	r1, [r3, #28]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	021a      	lsls	r2, r3, #8
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	61da      	str	r2, [r3, #28]
      break;
 8004f42:	e002      	b.n	8004f4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	75fb      	strb	r3, [r7, #23]
      break;
 8004f48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3718      	adds	r7, #24
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a3a      	ldr	r2, [pc, #232]	@ (80050bc <TIM_Base_SetConfig+0xfc>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00f      	beq.n	8004ff8 <TIM_Base_SetConfig+0x38>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fde:	d00b      	beq.n	8004ff8 <TIM_Base_SetConfig+0x38>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a37      	ldr	r2, [pc, #220]	@ (80050c0 <TIM_Base_SetConfig+0x100>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d007      	beq.n	8004ff8 <TIM_Base_SetConfig+0x38>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a36      	ldr	r2, [pc, #216]	@ (80050c4 <TIM_Base_SetConfig+0x104>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d003      	beq.n	8004ff8 <TIM_Base_SetConfig+0x38>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a35      	ldr	r2, [pc, #212]	@ (80050c8 <TIM_Base_SetConfig+0x108>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d108      	bne.n	800500a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a2b      	ldr	r2, [pc, #172]	@ (80050bc <TIM_Base_SetConfig+0xfc>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d01b      	beq.n	800504a <TIM_Base_SetConfig+0x8a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005018:	d017      	beq.n	800504a <TIM_Base_SetConfig+0x8a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a28      	ldr	r2, [pc, #160]	@ (80050c0 <TIM_Base_SetConfig+0x100>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d013      	beq.n	800504a <TIM_Base_SetConfig+0x8a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a27      	ldr	r2, [pc, #156]	@ (80050c4 <TIM_Base_SetConfig+0x104>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d00f      	beq.n	800504a <TIM_Base_SetConfig+0x8a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a26      	ldr	r2, [pc, #152]	@ (80050c8 <TIM_Base_SetConfig+0x108>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d00b      	beq.n	800504a <TIM_Base_SetConfig+0x8a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a25      	ldr	r2, [pc, #148]	@ (80050cc <TIM_Base_SetConfig+0x10c>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d007      	beq.n	800504a <TIM_Base_SetConfig+0x8a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a24      	ldr	r2, [pc, #144]	@ (80050d0 <TIM_Base_SetConfig+0x110>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d003      	beq.n	800504a <TIM_Base_SetConfig+0x8a>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a23      	ldr	r2, [pc, #140]	@ (80050d4 <TIM_Base_SetConfig+0x114>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d108      	bne.n	800505c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4313      	orrs	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a0e      	ldr	r2, [pc, #56]	@ (80050bc <TIM_Base_SetConfig+0xfc>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d103      	bne.n	8005090 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	691a      	ldr	r2, [r3, #16]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d105      	bne.n	80050ae <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	f023 0201 	bic.w	r2, r3, #1
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	611a      	str	r2, [r3, #16]
  }
}
 80050ae:	bf00      	nop
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	40010000 	.word	0x40010000
 80050c0:	40000400 	.word	0x40000400
 80050c4:	40000800 	.word	0x40000800
 80050c8:	40000c00 	.word	0x40000c00
 80050cc:	40014000 	.word	0x40014000
 80050d0:	40014400 	.word	0x40014400
 80050d4:	40014800 	.word	0x40014800

080050d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	f023 0201 	bic.w	r2, r3, #1
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0303 	bic.w	r3, r3, #3
 800510e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f023 0302 	bic.w	r3, r3, #2
 8005120:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	4313      	orrs	r3, r2
 800512a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a1c      	ldr	r2, [pc, #112]	@ (80051a0 <TIM_OC1_SetConfig+0xc8>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d10c      	bne.n	800514e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f023 0308 	bic.w	r3, r3, #8
 800513a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f023 0304 	bic.w	r3, r3, #4
 800514c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a13      	ldr	r2, [pc, #76]	@ (80051a0 <TIM_OC1_SetConfig+0xc8>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d111      	bne.n	800517a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800515c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	621a      	str	r2, [r3, #32]
}
 8005194:	bf00      	nop
 8005196:	371c      	adds	r7, #28
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	40010000 	.word	0x40010000

080051a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	f023 0210 	bic.w	r2, r3, #16
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	021b      	lsls	r3, r3, #8
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f023 0320 	bic.w	r3, r3, #32
 80051ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	011b      	lsls	r3, r3, #4
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005278 <TIM_OC2_SetConfig+0xd4>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d10d      	bne.n	8005220 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800520a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	011b      	lsls	r3, r3, #4
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	4313      	orrs	r3, r2
 8005216:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800521e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a15      	ldr	r2, [pc, #84]	@ (8005278 <TIM_OC2_SetConfig+0xd4>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d113      	bne.n	8005250 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800522e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005236:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	4313      	orrs	r3, r2
 8005242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	4313      	orrs	r3, r2
 800524e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	621a      	str	r2, [r3, #32]
}
 800526a:	bf00      	nop
 800526c:	371c      	adds	r7, #28
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	40010000 	.word	0x40010000

0800527c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f023 0303 	bic.w	r3, r3, #3
 80052b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	021b      	lsls	r3, r3, #8
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a1d      	ldr	r2, [pc, #116]	@ (800534c <TIM_OC3_SetConfig+0xd0>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d10d      	bne.n	80052f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	021b      	lsls	r3, r3, #8
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a14      	ldr	r2, [pc, #80]	@ (800534c <TIM_OC3_SetConfig+0xd0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d113      	bne.n	8005326 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005304:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800530c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	4313      	orrs	r3, r2
 8005318:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4313      	orrs	r3, r2
 8005324:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	621a      	str	r2, [r3, #32]
}
 8005340:	bf00      	nop
 8005342:	371c      	adds	r7, #28
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	40010000 	.word	0x40010000

08005350 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800537e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	021b      	lsls	r3, r3, #8
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	4313      	orrs	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800539a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	031b      	lsls	r3, r3, #12
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a10      	ldr	r2, [pc, #64]	@ (80053ec <TIM_OC4_SetConfig+0x9c>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d109      	bne.n	80053c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	019b      	lsls	r3, r3, #6
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	621a      	str	r2, [r3, #32]
}
 80053de:	bf00      	nop
 80053e0:	371c      	adds	r7, #28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	40010000 	.word	0x40010000

080053f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f003 031f 	and.w	r3, r3, #31
 8005402:	2201      	movs	r2, #1
 8005404:	fa02 f303 	lsl.w	r3, r2, r3
 8005408:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a1a      	ldr	r2, [r3, #32]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	43db      	mvns	r3, r3
 8005412:	401a      	ands	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6a1a      	ldr	r2, [r3, #32]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f003 031f 	and.w	r3, r3, #31
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	fa01 f303 	lsl.w	r3, r1, r3
 8005428:	431a      	orrs	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	621a      	str	r2, [r3, #32]
}
 800542e:	bf00      	nop
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800544c:	2b01      	cmp	r3, #1
 800544e:	d101      	bne.n	8005454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005450:	2302      	movs	r3, #2
 8005452:	e050      	b.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800547a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	4313      	orrs	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a1c      	ldr	r2, [pc, #112]	@ (8005504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d018      	beq.n	80054ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054a0:	d013      	beq.n	80054ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a18      	ldr	r2, [pc, #96]	@ (8005508 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d00e      	beq.n	80054ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a16      	ldr	r2, [pc, #88]	@ (800550c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d009      	beq.n	80054ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a15      	ldr	r2, [pc, #84]	@ (8005510 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d004      	beq.n	80054ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a13      	ldr	r2, [pc, #76]	@ (8005514 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d10c      	bne.n	80054e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	4313      	orrs	r3, r2
 80054da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40010000 	.word	0x40010000
 8005508:	40000400 	.word	0x40000400
 800550c:	40000800 	.word	0x40000800
 8005510:	40000c00 	.word	0x40000c00
 8005514:	40014000 	.word	0x40014000

08005518 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e042      	b.n	80055d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7fb fd9c 	bl	80010a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2224      	movs	r2, #36	@ 0x24
 8005570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005582:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f973 	bl	8005870 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	691a      	ldr	r2, [r3, #16]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005598:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	695a      	ldr	r2, [r3, #20]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68da      	ldr	r2, [r3, #12]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b08a      	sub	sp, #40	@ 0x28
 80055e4:	af02      	add	r7, sp, #8
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	603b      	str	r3, [r7, #0]
 80055ec:	4613      	mov	r3, r2
 80055ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b20      	cmp	r3, #32
 80055fe:	d175      	bne.n	80056ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <HAL_UART_Transmit+0x2c>
 8005606:	88fb      	ldrh	r3, [r7, #6]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e06e      	b.n	80056ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2221      	movs	r2, #33	@ 0x21
 800561a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800561e:	f7fb fecd 	bl	80013bc <HAL_GetTick>
 8005622:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	88fa      	ldrh	r2, [r7, #6]
 8005628:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	88fa      	ldrh	r2, [r7, #6]
 800562e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005638:	d108      	bne.n	800564c <HAL_UART_Transmit+0x6c>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d104      	bne.n	800564c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005642:	2300      	movs	r3, #0
 8005644:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	61bb      	str	r3, [r7, #24]
 800564a:	e003      	b.n	8005654 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005650:	2300      	movs	r3, #0
 8005652:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005654:	e02e      	b.n	80056b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2200      	movs	r2, #0
 800565e:	2180      	movs	r1, #128	@ 0x80
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f000 f848 	bl	80056f6 <UART_WaitOnFlagUntilTimeout>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d005      	beq.n	8005678 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2220      	movs	r2, #32
 8005670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e03a      	b.n	80056ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10b      	bne.n	8005696 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	881b      	ldrh	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800568c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	3302      	adds	r3, #2
 8005692:	61bb      	str	r3, [r7, #24]
 8005694:	e007      	b.n	80056a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	781a      	ldrb	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	3301      	adds	r3, #1
 80056a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	3b01      	subs	r3, #1
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1cb      	bne.n	8005656 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	2200      	movs	r2, #0
 80056c6:	2140      	movs	r1, #64	@ 0x40
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 f814 	bl	80056f6 <UART_WaitOnFlagUntilTimeout>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d005      	beq.n	80056e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e006      	b.n	80056ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2220      	movs	r2, #32
 80056e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80056e8:	2300      	movs	r3, #0
 80056ea:	e000      	b.n	80056ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80056ec:	2302      	movs	r3, #2
  }
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3720      	adds	r7, #32
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b086      	sub	sp, #24
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	60f8      	str	r0, [r7, #12]
 80056fe:	60b9      	str	r1, [r7, #8]
 8005700:	603b      	str	r3, [r7, #0]
 8005702:	4613      	mov	r3, r2
 8005704:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005706:	e03b      	b.n	8005780 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570e:	d037      	beq.n	8005780 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005710:	f7fb fe54 	bl	80013bc <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	6a3a      	ldr	r2, [r7, #32]
 800571c:	429a      	cmp	r2, r3
 800571e:	d302      	bcc.n	8005726 <UART_WaitOnFlagUntilTimeout+0x30>
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e03a      	b.n	80057a0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f003 0304 	and.w	r3, r3, #4
 8005734:	2b00      	cmp	r3, #0
 8005736:	d023      	beq.n	8005780 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2b80      	cmp	r3, #128	@ 0x80
 800573c:	d020      	beq.n	8005780 <UART_WaitOnFlagUntilTimeout+0x8a>
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2b40      	cmp	r3, #64	@ 0x40
 8005742:	d01d      	beq.n	8005780 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0308 	and.w	r3, r3, #8
 800574e:	2b08      	cmp	r3, #8
 8005750:	d116      	bne.n	8005780 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005752:	2300      	movs	r3, #0
 8005754:	617b      	str	r3, [r7, #20]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	617b      	str	r3, [r7, #20]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	617b      	str	r3, [r7, #20]
 8005766:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f000 f81d 	bl	80057a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2208      	movs	r2, #8
 8005772:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e00f      	b.n	80057a0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	4013      	ands	r3, r2
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	429a      	cmp	r2, r3
 800578e:	bf0c      	ite	eq
 8005790:	2301      	moveq	r3, #1
 8005792:	2300      	movne	r3, #0
 8005794:	b2db      	uxtb	r3, r3
 8005796:	461a      	mov	r2, r3
 8005798:	79fb      	ldrb	r3, [r7, #7]
 800579a:	429a      	cmp	r2, r3
 800579c:	d0b4      	beq.n	8005708 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b095      	sub	sp, #84	@ 0x54
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	330c      	adds	r3, #12
 80057b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ba:	e853 3f00 	ldrex	r3, [r3]
 80057be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	330c      	adds	r3, #12
 80057ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057d0:	643a      	str	r2, [r7, #64]	@ 0x40
 80057d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057d8:	e841 2300 	strex	r3, r2, [r1]
 80057dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1e5      	bne.n	80057b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3314      	adds	r3, #20
 80057ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	e853 3f00 	ldrex	r3, [r3]
 80057f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	f023 0301 	bic.w	r3, r3, #1
 80057fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3314      	adds	r3, #20
 8005802:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005804:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005806:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005808:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800580a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800580c:	e841 2300 	strex	r3, r2, [r1]
 8005810:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1e5      	bne.n	80057e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581c:	2b01      	cmp	r3, #1
 800581e:	d119      	bne.n	8005854 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	330c      	adds	r3, #12
 8005826:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	e853 3f00 	ldrex	r3, [r3]
 800582e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f023 0310 	bic.w	r3, r3, #16
 8005836:	647b      	str	r3, [r7, #68]	@ 0x44
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	330c      	adds	r3, #12
 800583e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005840:	61ba      	str	r2, [r7, #24]
 8005842:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005844:	6979      	ldr	r1, [r7, #20]
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	e841 2300 	strex	r3, r2, [r1]
 800584c:	613b      	str	r3, [r7, #16]
   return(result);
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1e5      	bne.n	8005820 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2220      	movs	r2, #32
 8005858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005862:	bf00      	nop
 8005864:	3754      	adds	r7, #84	@ 0x54
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
	...

08005870 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005874:	b0c0      	sub	sp, #256	@ 0x100
 8005876:	af00      	add	r7, sp, #0
 8005878:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800587c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800588c:	68d9      	ldr	r1, [r3, #12]
 800588e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	ea40 0301 	orr.w	r3, r0, r1
 8005898:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800589a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	431a      	orrs	r2, r3
 80058a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	431a      	orrs	r2, r3
 80058b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80058c8:	f021 010c 	bic.w	r1, r1, #12
 80058cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058d6:	430b      	orrs	r3, r1
 80058d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80058e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ea:	6999      	ldr	r1, [r3, #24]
 80058ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	ea40 0301 	orr.w	r3, r0, r1
 80058f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	4b8f      	ldr	r3, [pc, #572]	@ (8005b3c <UART_SetConfig+0x2cc>)
 8005900:	429a      	cmp	r2, r3
 8005902:	d005      	beq.n	8005910 <UART_SetConfig+0xa0>
 8005904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	4b8d      	ldr	r3, [pc, #564]	@ (8005b40 <UART_SetConfig+0x2d0>)
 800590c:	429a      	cmp	r2, r3
 800590e:	d104      	bne.n	800591a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005910:	f7fd fe22 	bl	8003558 <HAL_RCC_GetPCLK2Freq>
 8005914:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005918:	e003      	b.n	8005922 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800591a:	f7fd fe09 	bl	8003530 <HAL_RCC_GetPCLK1Freq>
 800591e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800592c:	f040 810c 	bne.w	8005b48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005930:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005934:	2200      	movs	r2, #0
 8005936:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800593a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800593e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005942:	4622      	mov	r2, r4
 8005944:	462b      	mov	r3, r5
 8005946:	1891      	adds	r1, r2, r2
 8005948:	65b9      	str	r1, [r7, #88]	@ 0x58
 800594a:	415b      	adcs	r3, r3
 800594c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800594e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005952:	4621      	mov	r1, r4
 8005954:	eb12 0801 	adds.w	r8, r2, r1
 8005958:	4629      	mov	r1, r5
 800595a:	eb43 0901 	adc.w	r9, r3, r1
 800595e:	f04f 0200 	mov.w	r2, #0
 8005962:	f04f 0300 	mov.w	r3, #0
 8005966:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800596a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800596e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005972:	4690      	mov	r8, r2
 8005974:	4699      	mov	r9, r3
 8005976:	4623      	mov	r3, r4
 8005978:	eb18 0303 	adds.w	r3, r8, r3
 800597c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005980:	462b      	mov	r3, r5
 8005982:	eb49 0303 	adc.w	r3, r9, r3
 8005986:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800598a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005996:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800599a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800599e:	460b      	mov	r3, r1
 80059a0:	18db      	adds	r3, r3, r3
 80059a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80059a4:	4613      	mov	r3, r2
 80059a6:	eb42 0303 	adc.w	r3, r2, r3
 80059aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80059ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80059b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80059b4:	f7fa fc6c 	bl	8000290 <__aeabi_uldivmod>
 80059b8:	4602      	mov	r2, r0
 80059ba:	460b      	mov	r3, r1
 80059bc:	4b61      	ldr	r3, [pc, #388]	@ (8005b44 <UART_SetConfig+0x2d4>)
 80059be:	fba3 2302 	umull	r2, r3, r3, r2
 80059c2:	095b      	lsrs	r3, r3, #5
 80059c4:	011c      	lsls	r4, r3, #4
 80059c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059ca:	2200      	movs	r2, #0
 80059cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80059d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80059d8:	4642      	mov	r2, r8
 80059da:	464b      	mov	r3, r9
 80059dc:	1891      	adds	r1, r2, r2
 80059de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80059e0:	415b      	adcs	r3, r3
 80059e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80059e8:	4641      	mov	r1, r8
 80059ea:	eb12 0a01 	adds.w	sl, r2, r1
 80059ee:	4649      	mov	r1, r9
 80059f0:	eb43 0b01 	adc.w	fp, r3, r1
 80059f4:	f04f 0200 	mov.w	r2, #0
 80059f8:	f04f 0300 	mov.w	r3, #0
 80059fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a08:	4692      	mov	sl, r2
 8005a0a:	469b      	mov	fp, r3
 8005a0c:	4643      	mov	r3, r8
 8005a0e:	eb1a 0303 	adds.w	r3, sl, r3
 8005a12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a16:	464b      	mov	r3, r9
 8005a18:	eb4b 0303 	adc.w	r3, fp, r3
 8005a1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a2c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005a30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a34:	460b      	mov	r3, r1
 8005a36:	18db      	adds	r3, r3, r3
 8005a38:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	eb42 0303 	adc.w	r3, r2, r3
 8005a40:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005a46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005a4a:	f7fa fc21 	bl	8000290 <__aeabi_uldivmod>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	460b      	mov	r3, r1
 8005a52:	4611      	mov	r1, r2
 8005a54:	4b3b      	ldr	r3, [pc, #236]	@ (8005b44 <UART_SetConfig+0x2d4>)
 8005a56:	fba3 2301 	umull	r2, r3, r3, r1
 8005a5a:	095b      	lsrs	r3, r3, #5
 8005a5c:	2264      	movs	r2, #100	@ 0x64
 8005a5e:	fb02 f303 	mul.w	r3, r2, r3
 8005a62:	1acb      	subs	r3, r1, r3
 8005a64:	00db      	lsls	r3, r3, #3
 8005a66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005a6a:	4b36      	ldr	r3, [pc, #216]	@ (8005b44 <UART_SetConfig+0x2d4>)
 8005a6c:	fba3 2302 	umull	r2, r3, r3, r2
 8005a70:	095b      	lsrs	r3, r3, #5
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005a78:	441c      	add	r4, r3
 8005a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a8c:	4642      	mov	r2, r8
 8005a8e:	464b      	mov	r3, r9
 8005a90:	1891      	adds	r1, r2, r2
 8005a92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a94:	415b      	adcs	r3, r3
 8005a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005a9c:	4641      	mov	r1, r8
 8005a9e:	1851      	adds	r1, r2, r1
 8005aa0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005aa2:	4649      	mov	r1, r9
 8005aa4:	414b      	adcs	r3, r1
 8005aa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aa8:	f04f 0200 	mov.w	r2, #0
 8005aac:	f04f 0300 	mov.w	r3, #0
 8005ab0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005ab4:	4659      	mov	r1, fp
 8005ab6:	00cb      	lsls	r3, r1, #3
 8005ab8:	4651      	mov	r1, sl
 8005aba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005abe:	4651      	mov	r1, sl
 8005ac0:	00ca      	lsls	r2, r1, #3
 8005ac2:	4610      	mov	r0, r2
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	4642      	mov	r2, r8
 8005aca:	189b      	adds	r3, r3, r2
 8005acc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ad0:	464b      	mov	r3, r9
 8005ad2:	460a      	mov	r2, r1
 8005ad4:	eb42 0303 	adc.w	r3, r2, r3
 8005ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ae8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005aec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005af0:	460b      	mov	r3, r1
 8005af2:	18db      	adds	r3, r3, r3
 8005af4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005af6:	4613      	mov	r3, r2
 8005af8:	eb42 0303 	adc.w	r3, r2, r3
 8005afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005afe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b06:	f7fa fbc3 	bl	8000290 <__aeabi_uldivmod>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b44 <UART_SetConfig+0x2d4>)
 8005b10:	fba3 1302 	umull	r1, r3, r3, r2
 8005b14:	095b      	lsrs	r3, r3, #5
 8005b16:	2164      	movs	r1, #100	@ 0x64
 8005b18:	fb01 f303 	mul.w	r3, r1, r3
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	3332      	adds	r3, #50	@ 0x32
 8005b22:	4a08      	ldr	r2, [pc, #32]	@ (8005b44 <UART_SetConfig+0x2d4>)
 8005b24:	fba2 2303 	umull	r2, r3, r2, r3
 8005b28:	095b      	lsrs	r3, r3, #5
 8005b2a:	f003 0207 	and.w	r2, r3, #7
 8005b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4422      	add	r2, r4
 8005b36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b38:	e106      	b.n	8005d48 <UART_SetConfig+0x4d8>
 8005b3a:	bf00      	nop
 8005b3c:	40011000 	.word	0x40011000
 8005b40:	40011400 	.word	0x40011400
 8005b44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005b5a:	4642      	mov	r2, r8
 8005b5c:	464b      	mov	r3, r9
 8005b5e:	1891      	adds	r1, r2, r2
 8005b60:	6239      	str	r1, [r7, #32]
 8005b62:	415b      	adcs	r3, r3
 8005b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b6a:	4641      	mov	r1, r8
 8005b6c:	1854      	adds	r4, r2, r1
 8005b6e:	4649      	mov	r1, r9
 8005b70:	eb43 0501 	adc.w	r5, r3, r1
 8005b74:	f04f 0200 	mov.w	r2, #0
 8005b78:	f04f 0300 	mov.w	r3, #0
 8005b7c:	00eb      	lsls	r3, r5, #3
 8005b7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b82:	00e2      	lsls	r2, r4, #3
 8005b84:	4614      	mov	r4, r2
 8005b86:	461d      	mov	r5, r3
 8005b88:	4643      	mov	r3, r8
 8005b8a:	18e3      	adds	r3, r4, r3
 8005b8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b90:	464b      	mov	r3, r9
 8005b92:	eb45 0303 	adc.w	r3, r5, r3
 8005b96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ba6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005baa:	f04f 0200 	mov.w	r2, #0
 8005bae:	f04f 0300 	mov.w	r3, #0
 8005bb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005bb6:	4629      	mov	r1, r5
 8005bb8:	008b      	lsls	r3, r1, #2
 8005bba:	4621      	mov	r1, r4
 8005bbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bc0:	4621      	mov	r1, r4
 8005bc2:	008a      	lsls	r2, r1, #2
 8005bc4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005bc8:	f7fa fb62 	bl	8000290 <__aeabi_uldivmod>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4b60      	ldr	r3, [pc, #384]	@ (8005d54 <UART_SetConfig+0x4e4>)
 8005bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8005bd6:	095b      	lsrs	r3, r3, #5
 8005bd8:	011c      	lsls	r4, r3, #4
 8005bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bde:	2200      	movs	r2, #0
 8005be0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005be4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005be8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005bec:	4642      	mov	r2, r8
 8005bee:	464b      	mov	r3, r9
 8005bf0:	1891      	adds	r1, r2, r2
 8005bf2:	61b9      	str	r1, [r7, #24]
 8005bf4:	415b      	adcs	r3, r3
 8005bf6:	61fb      	str	r3, [r7, #28]
 8005bf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bfc:	4641      	mov	r1, r8
 8005bfe:	1851      	adds	r1, r2, r1
 8005c00:	6139      	str	r1, [r7, #16]
 8005c02:	4649      	mov	r1, r9
 8005c04:	414b      	adcs	r3, r1
 8005c06:	617b      	str	r3, [r7, #20]
 8005c08:	f04f 0200 	mov.w	r2, #0
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c14:	4659      	mov	r1, fp
 8005c16:	00cb      	lsls	r3, r1, #3
 8005c18:	4651      	mov	r1, sl
 8005c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c1e:	4651      	mov	r1, sl
 8005c20:	00ca      	lsls	r2, r1, #3
 8005c22:	4610      	mov	r0, r2
 8005c24:	4619      	mov	r1, r3
 8005c26:	4603      	mov	r3, r0
 8005c28:	4642      	mov	r2, r8
 8005c2a:	189b      	adds	r3, r3, r2
 8005c2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c30:	464b      	mov	r3, r9
 8005c32:	460a      	mov	r2, r1
 8005c34:	eb42 0303 	adc.w	r3, r2, r3
 8005c38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c48:	f04f 0200 	mov.w	r2, #0
 8005c4c:	f04f 0300 	mov.w	r3, #0
 8005c50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005c54:	4649      	mov	r1, r9
 8005c56:	008b      	lsls	r3, r1, #2
 8005c58:	4641      	mov	r1, r8
 8005c5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c5e:	4641      	mov	r1, r8
 8005c60:	008a      	lsls	r2, r1, #2
 8005c62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c66:	f7fa fb13 	bl	8000290 <__aeabi_uldivmod>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	4611      	mov	r1, r2
 8005c70:	4b38      	ldr	r3, [pc, #224]	@ (8005d54 <UART_SetConfig+0x4e4>)
 8005c72:	fba3 2301 	umull	r2, r3, r3, r1
 8005c76:	095b      	lsrs	r3, r3, #5
 8005c78:	2264      	movs	r2, #100	@ 0x64
 8005c7a:	fb02 f303 	mul.w	r3, r2, r3
 8005c7e:	1acb      	subs	r3, r1, r3
 8005c80:	011b      	lsls	r3, r3, #4
 8005c82:	3332      	adds	r3, #50	@ 0x32
 8005c84:	4a33      	ldr	r2, [pc, #204]	@ (8005d54 <UART_SetConfig+0x4e4>)
 8005c86:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8a:	095b      	lsrs	r3, r3, #5
 8005c8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c90:	441c      	add	r4, r3
 8005c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c96:	2200      	movs	r2, #0
 8005c98:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005c9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ca0:	4642      	mov	r2, r8
 8005ca2:	464b      	mov	r3, r9
 8005ca4:	1891      	adds	r1, r2, r2
 8005ca6:	60b9      	str	r1, [r7, #8]
 8005ca8:	415b      	adcs	r3, r3
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cb0:	4641      	mov	r1, r8
 8005cb2:	1851      	adds	r1, r2, r1
 8005cb4:	6039      	str	r1, [r7, #0]
 8005cb6:	4649      	mov	r1, r9
 8005cb8:	414b      	adcs	r3, r1
 8005cba:	607b      	str	r3, [r7, #4]
 8005cbc:	f04f 0200 	mov.w	r2, #0
 8005cc0:	f04f 0300 	mov.w	r3, #0
 8005cc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005cc8:	4659      	mov	r1, fp
 8005cca:	00cb      	lsls	r3, r1, #3
 8005ccc:	4651      	mov	r1, sl
 8005cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cd2:	4651      	mov	r1, sl
 8005cd4:	00ca      	lsls	r2, r1, #3
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	4619      	mov	r1, r3
 8005cda:	4603      	mov	r3, r0
 8005cdc:	4642      	mov	r2, r8
 8005cde:	189b      	adds	r3, r3, r2
 8005ce0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ce2:	464b      	mov	r3, r9
 8005ce4:	460a      	mov	r2, r1
 8005ce6:	eb42 0303 	adc.w	r3, r2, r3
 8005cea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005cf6:	667a      	str	r2, [r7, #100]	@ 0x64
 8005cf8:	f04f 0200 	mov.w	r2, #0
 8005cfc:	f04f 0300 	mov.w	r3, #0
 8005d00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d04:	4649      	mov	r1, r9
 8005d06:	008b      	lsls	r3, r1, #2
 8005d08:	4641      	mov	r1, r8
 8005d0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d0e:	4641      	mov	r1, r8
 8005d10:	008a      	lsls	r2, r1, #2
 8005d12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005d16:	f7fa fabb 	bl	8000290 <__aeabi_uldivmod>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d54 <UART_SetConfig+0x4e4>)
 8005d20:	fba3 1302 	umull	r1, r3, r3, r2
 8005d24:	095b      	lsrs	r3, r3, #5
 8005d26:	2164      	movs	r1, #100	@ 0x64
 8005d28:	fb01 f303 	mul.w	r3, r1, r3
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	011b      	lsls	r3, r3, #4
 8005d30:	3332      	adds	r3, #50	@ 0x32
 8005d32:	4a08      	ldr	r2, [pc, #32]	@ (8005d54 <UART_SetConfig+0x4e4>)
 8005d34:	fba2 2303 	umull	r2, r3, r2, r3
 8005d38:	095b      	lsrs	r3, r3, #5
 8005d3a:	f003 020f 	and.w	r2, r3, #15
 8005d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4422      	add	r2, r4
 8005d46:	609a      	str	r2, [r3, #8]
}
 8005d48:	bf00      	nop
 8005d4a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d54:	51eb851f 	.word	0x51eb851f

08005d58 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005d58:	b084      	sub	sp, #16
 8005d5a:	b480      	push	{r7}
 8005d5c:	b085      	sub	sp, #20
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	f107 001c 	add.w	r0, r7, #28
 8005d66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005d6e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005d70:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005d72:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8005d76:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8005d7a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8005d7e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8005d82:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8005d92:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	b004      	add	sp, #16
 8005dac:	4770      	bx	lr

08005dae <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b083      	sub	sp, #12
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005dea:	b480      	push	{r7}
 8005dec:	b083      	sub	sp, #12
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2203      	movs	r2, #3
 8005df6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005e06:	b480      	push	{r7}
 8005e08:	b083      	sub	sp, #12
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0303 	and.w	r3, r3, #3
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b085      	sub	sp, #20
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005e40:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005e46:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005e4c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005e5c:	f023 030f 	bic.w	r3, r3, #15
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	431a      	orrs	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b083      	sub	sp, #12
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	b2db      	uxtb	r3, r3
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	3314      	adds	r3, #20
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
}  
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b085      	sub	sp, #20
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
 8005ebe:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005edc:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005ee2:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005ee8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef4:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	431a      	orrs	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0

}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b088      	sub	sp, #32
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005f1c:	2310      	movs	r3, #16
 8005f1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f20:	2340      	movs	r3, #64	@ 0x40
 8005f22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f24:	2300      	movs	r3, #0
 8005f26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f2e:	f107 0308 	add.w	r3, r7, #8
 8005f32:	4619      	mov	r1, r3
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7ff ff74 	bl	8005e22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f3e:	2110      	movs	r1, #16
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f9d7 	bl	80062f4 <SDMMC_GetCmdResp1>
 8005f46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f48:	69fb      	ldr	r3, [r7, #28]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3720      	adds	r7, #32
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b088      	sub	sp, #32
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
 8005f5a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005f60:	2311      	movs	r3, #17
 8005f62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f64:	2340      	movs	r3, #64	@ 0x40
 8005f66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f72:	f107 0308 	add.w	r3, r7, #8
 8005f76:	4619      	mov	r1, r3
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f7ff ff52 	bl	8005e22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005f7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f82:	2111      	movs	r1, #17
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f9b5 	bl	80062f4 <SDMMC_GetCmdResp1>
 8005f8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f8c:	69fb      	ldr	r3, [r7, #28]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3720      	adds	r7, #32
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b088      	sub	sp, #32
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
 8005f9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005fa4:	2312      	movs	r3, #18
 8005fa6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fa8:	2340      	movs	r3, #64	@ 0x40
 8005faa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fac:	2300      	movs	r3, #0
 8005fae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005fb4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fb6:	f107 0308 	add.w	r3, r7, #8
 8005fba:	4619      	mov	r1, r3
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7ff ff30 	bl	8005e22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fc6:	2112      	movs	r1, #18
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f993 	bl	80062f4 <SDMMC_GetCmdResp1>
 8005fce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fd0:	69fb      	ldr	r3, [r7, #28]
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3720      	adds	r7, #32
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b088      	sub	sp, #32
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
 8005fe2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005fe8:	2318      	movs	r3, #24
 8005fea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fec:	2340      	movs	r3, #64	@ 0x40
 8005fee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ff4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ff8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ffa:	f107 0308 	add.w	r3, r7, #8
 8005ffe:	4619      	mov	r1, r3
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f7ff ff0e 	bl	8005e22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800600a:	2118      	movs	r1, #24
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f971 	bl	80062f4 <SDMMC_GetCmdResp1>
 8006012:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006014:	69fb      	ldr	r3, [r7, #28]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3720      	adds	r7, #32
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b088      	sub	sp, #32
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800602c:	2319      	movs	r3, #25
 800602e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006030:	2340      	movs	r3, #64	@ 0x40
 8006032:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006034:	2300      	movs	r3, #0
 8006036:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006038:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800603c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800603e:	f107 0308 	add.w	r3, r7, #8
 8006042:	4619      	mov	r1, r3
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f7ff feec 	bl	8005e22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800604a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800604e:	2119      	movs	r1, #25
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f94f 	bl	80062f4 <SDMMC_GetCmdResp1>
 8006056:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006058:	69fb      	ldr	r3, [r7, #28]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3720      	adds	r7, #32
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
	...

08006064 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b088      	sub	sp, #32
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800606c:	2300      	movs	r3, #0
 800606e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006070:	230c      	movs	r3, #12
 8006072:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006074:	2340      	movs	r3, #64	@ 0x40
 8006076:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006078:	2300      	movs	r3, #0
 800607a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800607c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006080:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006082:	f107 0308 	add.w	r3, r7, #8
 8006086:	4619      	mov	r1, r3
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f7ff feca 	bl	8005e22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800608e:	4a05      	ldr	r2, [pc, #20]	@ (80060a4 <SDMMC_CmdStopTransfer+0x40>)
 8006090:	210c      	movs	r1, #12
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f92e 	bl	80062f4 <SDMMC_GetCmdResp1>
 8006098:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800609a:	69fb      	ldr	r3, [r7, #28]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3720      	adds	r7, #32
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	05f5e100 	.word	0x05f5e100

080060a8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b08a      	sub	sp, #40	@ 0x28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80060b8:	2307      	movs	r3, #7
 80060ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060bc:	2340      	movs	r3, #64	@ 0x40
 80060be:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060c0:	2300      	movs	r3, #0
 80060c2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80060c8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060ca:	f107 0310 	add.w	r3, r7, #16
 80060ce:	4619      	mov	r1, r3
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f7ff fea6 	bl	8005e22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80060d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060da:	2107      	movs	r1, #7
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 f909 	bl	80062f4 <SDMMC_GetCmdResp1>
 80060e2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80060e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3728      	adds	r7, #40	@ 0x28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b088      	sub	sp, #32
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80060fa:	2300      	movs	r3, #0
 80060fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80060fe:	2300      	movs	r3, #0
 8006100:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006102:	2300      	movs	r3, #0
 8006104:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006106:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800610a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800610c:	f107 0308 	add.w	r3, r7, #8
 8006110:	4619      	mov	r1, r3
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7ff fe85 	bl	8005e22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fb23 	bl	8006764 <SDMMC_GetCmdError>
 800611e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006120:	69fb      	ldr	r3, [r7, #28]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3720      	adds	r7, #32
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b088      	sub	sp, #32
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006132:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8006136:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006138:	2308      	movs	r3, #8
 800613a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800613c:	2340      	movs	r3, #64	@ 0x40
 800613e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006140:	2300      	movs	r3, #0
 8006142:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006144:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006148:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800614a:	f107 0308 	add.w	r3, r7, #8
 800614e:	4619      	mov	r1, r3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7ff fe66 	bl	8005e22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fab6 	bl	80066c8 <SDMMC_GetCmdResp7>
 800615c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800615e:	69fb      	ldr	r3, [r7, #28]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3720      	adds	r7, #32
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006176:	2337      	movs	r3, #55	@ 0x37
 8006178:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800617a:	2340      	movs	r3, #64	@ 0x40
 800617c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800617e:	2300      	movs	r3, #0
 8006180:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006182:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006186:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006188:	f107 0308 	add.w	r3, r7, #8
 800618c:	4619      	mov	r1, r3
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7ff fe47 	bl	8005e22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006194:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006198:	2137      	movs	r1, #55	@ 0x37
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f8aa 	bl	80062f4 <SDMMC_GetCmdResp1>
 80061a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061a2:	69fb      	ldr	r3, [r7, #28]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3720      	adds	r7, #32
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b088      	sub	sp, #32
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80061c2:	2329      	movs	r3, #41	@ 0x29
 80061c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061c6:	2340      	movs	r3, #64	@ 0x40
 80061c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061ca:	2300      	movs	r3, #0
 80061cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061d4:	f107 0308 	add.w	r3, r7, #8
 80061d8:	4619      	mov	r1, r3
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7ff fe21 	bl	8005e22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f9bd 	bl	8006560 <SDMMC_GetCmdResp3>
 80061e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061e8:	69fb      	ldr	r3, [r7, #28]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3720      	adds	r7, #32
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b088      	sub	sp, #32
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80061fe:	2302      	movs	r3, #2
 8006200:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006202:	23c0      	movs	r3, #192	@ 0xc0
 8006204:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006206:	2300      	movs	r3, #0
 8006208:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800620a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800620e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006210:	f107 0308 	add.w	r3, r7, #8
 8006214:	4619      	mov	r1, r3
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7ff fe03 	bl	8005e22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f957 	bl	80064d0 <SDMMC_GetCmdResp2>
 8006222:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006224:	69fb      	ldr	r3, [r7, #28]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3720      	adds	r7, #32
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b088      	sub	sp, #32
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
 8006236:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800623c:	2309      	movs	r3, #9
 800623e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006240:	23c0      	movs	r3, #192	@ 0xc0
 8006242:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006244:	2300      	movs	r3, #0
 8006246:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006248:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800624c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800624e:	f107 0308 	add.w	r3, r7, #8
 8006252:	4619      	mov	r1, r3
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f7ff fde4 	bl	8005e22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f938 	bl	80064d0 <SDMMC_GetCmdResp2>
 8006260:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006262:	69fb      	ldr	r3, [r7, #28]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3720      	adds	r7, #32
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b088      	sub	sp, #32
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006276:	2300      	movs	r3, #0
 8006278:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800627a:	2303      	movs	r3, #3
 800627c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800627e:	2340      	movs	r3, #64	@ 0x40
 8006280:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006282:	2300      	movs	r3, #0
 8006284:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006286:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800628a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800628c:	f107 0308 	add.w	r3, r7, #8
 8006290:	4619      	mov	r1, r3
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7ff fdc5 	bl	8005e22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006298:	683a      	ldr	r2, [r7, #0]
 800629a:	2103      	movs	r1, #3
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 f99d 	bl	80065dc <SDMMC_GetCmdResp6>
 80062a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062a4:	69fb      	ldr	r3, [r7, #28]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3720      	adds	r7, #32
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b088      	sub	sp, #32
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80062bc:	230d      	movs	r3, #13
 80062be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80062c0:	2340      	movs	r3, #64	@ 0x40
 80062c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062c4:	2300      	movs	r3, #0
 80062c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062ce:	f107 0308 	add.w	r3, r7, #8
 80062d2:	4619      	mov	r1, r3
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f7ff fda4 	bl	8005e22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80062da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062de:	210d      	movs	r1, #13
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 f807 	bl	80062f4 <SDMMC_GetCmdResp1>
 80062e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062e8:	69fb      	ldr	r3, [r7, #28]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3720      	adds	r7, #32
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
	...

080062f4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b088      	sub	sp, #32
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	460b      	mov	r3, r1
 80062fe:	607a      	str	r2, [r7, #4]
 8006300:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006302:	4b70      	ldr	r3, [pc, #448]	@ (80064c4 <SDMMC_GetCmdResp1+0x1d0>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a70      	ldr	r2, [pc, #448]	@ (80064c8 <SDMMC_GetCmdResp1+0x1d4>)
 8006308:	fba2 2303 	umull	r2, r3, r2, r3
 800630c:	0a5a      	lsrs	r2, r3, #9
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	fb02 f303 	mul.w	r3, r2, r3
 8006314:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	1e5a      	subs	r2, r3, #1
 800631a:	61fa      	str	r2, [r7, #28]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d102      	bne.n	8006326 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006320:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006324:	e0c9      	b.n	80064ba <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800632a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006332:	2b00      	cmp	r3, #0
 8006334:	d0ef      	beq.n	8006316 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1ea      	bne.n	8006316 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b00      	cmp	r3, #0
 800634a:	d004      	beq.n	8006356 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2204      	movs	r2, #4
 8006350:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006352:	2304      	movs	r3, #4
 8006354:	e0b1      	b.n	80064ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d004      	beq.n	800636c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2201      	movs	r2, #1
 8006366:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006368:	2301      	movs	r3, #1
 800636a:	e0a6      	b.n	80064ba <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	22c5      	movs	r2, #197	@ 0xc5
 8006370:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f7ff fd7f 	bl	8005e76 <SDIO_GetCommandResponse>
 8006378:	4603      	mov	r3, r0
 800637a:	461a      	mov	r2, r3
 800637c:	7afb      	ldrb	r3, [r7, #11]
 800637e:	4293      	cmp	r3, r2
 8006380:	d001      	beq.n	8006386 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006382:	2301      	movs	r3, #1
 8006384:	e099      	b.n	80064ba <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006386:	2100      	movs	r1, #0
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f7ff fd81 	bl	8005e90 <SDIO_GetResponse>
 800638e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	4b4e      	ldr	r3, [pc, #312]	@ (80064cc <SDMMC_GetCmdResp1+0x1d8>)
 8006394:	4013      	ands	r3, r2
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800639a:	2300      	movs	r3, #0
 800639c:	e08d      	b.n	80064ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	da02      	bge.n	80063aa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80063a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80063a8:	e087      	b.n	80064ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d001      	beq.n	80063b8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80063b4:	2340      	movs	r3, #64	@ 0x40
 80063b6:	e080      	b.n	80064ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80063c2:	2380      	movs	r3, #128	@ 0x80
 80063c4:	e079      	b.n	80064ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d002      	beq.n	80063d6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80063d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80063d4:	e071      	b.n	80064ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80063e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80063e4:	e069      	b.n	80064ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d002      	beq.n	80063f6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80063f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063f4:	e061      	b.n	80064ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d002      	beq.n	8006406 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006400:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006404:	e059      	b.n	80064ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d002      	beq.n	8006416 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006410:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006414:	e051      	b.n	80064ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006420:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006424:	e049      	b.n	80064ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d002      	beq.n	8006436 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006430:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006434:	e041      	b.n	80064ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d002      	beq.n	8006446 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006440:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006444:	e039      	b.n	80064ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d002      	beq.n	8006456 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006450:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006454:	e031      	b.n	80064ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d002      	beq.n	8006466 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006460:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006464:	e029      	b.n	80064ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006470:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006474:	e021      	b.n	80064ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d002      	beq.n	8006486 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006480:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006484:	e019      	b.n	80064ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006490:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006494:	e011      	b.n	80064ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d002      	beq.n	80064a6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80064a0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80064a4:	e009      	b.n	80064ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f003 0308 	and.w	r3, r3, #8
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80064b0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80064b4:	e001      	b.n	80064ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80064b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3720      	adds	r7, #32
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	20000004 	.word	0x20000004
 80064c8:	10624dd3 	.word	0x10624dd3
 80064cc:	fdffe008 	.word	0xfdffe008

080064d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80064d8:	4b1f      	ldr	r3, [pc, #124]	@ (8006558 <SDMMC_GetCmdResp2+0x88>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a1f      	ldr	r2, [pc, #124]	@ (800655c <SDMMC_GetCmdResp2+0x8c>)
 80064de:	fba2 2303 	umull	r2, r3, r2, r3
 80064e2:	0a5b      	lsrs	r3, r3, #9
 80064e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064e8:	fb02 f303 	mul.w	r3, r2, r3
 80064ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	1e5a      	subs	r2, r3, #1
 80064f2:	60fa      	str	r2, [r7, #12]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d102      	bne.n	80064fe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80064f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80064fc:	e026      	b.n	800654c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006502:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800650a:	2b00      	cmp	r3, #0
 800650c:	d0ef      	beq.n	80064ee <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1ea      	bne.n	80064ee <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800651c:	f003 0304 	and.w	r3, r3, #4
 8006520:	2b00      	cmp	r3, #0
 8006522:	d004      	beq.n	800652e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2204      	movs	r2, #4
 8006528:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800652a:	2304      	movs	r3, #4
 800652c:	e00e      	b.n	800654c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	2b00      	cmp	r3, #0
 8006538:	d004      	beq.n	8006544 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006540:	2301      	movs	r3, #1
 8006542:	e003      	b.n	800654c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	22c5      	movs	r2, #197	@ 0xc5
 8006548:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	20000004 	.word	0x20000004
 800655c:	10624dd3 	.word	0x10624dd3

08006560 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006568:	4b1a      	ldr	r3, [pc, #104]	@ (80065d4 <SDMMC_GetCmdResp3+0x74>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a1a      	ldr	r2, [pc, #104]	@ (80065d8 <SDMMC_GetCmdResp3+0x78>)
 800656e:	fba2 2303 	umull	r2, r3, r2, r3
 8006572:	0a5b      	lsrs	r3, r3, #9
 8006574:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006578:	fb02 f303 	mul.w	r3, r2, r3
 800657c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	1e5a      	subs	r2, r3, #1
 8006582:	60fa      	str	r2, [r7, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d102      	bne.n	800658e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006588:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800658c:	e01b      	b.n	80065c6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006592:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800659a:	2b00      	cmp	r3, #0
 800659c:	d0ef      	beq.n	800657e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1ea      	bne.n	800657e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d004      	beq.n	80065be <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2204      	movs	r2, #4
 80065b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80065ba:	2304      	movs	r3, #4
 80065bc:	e003      	b.n	80065c6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	22c5      	movs	r2, #197	@ 0xc5
 80065c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	20000004 	.word	0x20000004
 80065d8:	10624dd3 	.word	0x10624dd3

080065dc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b088      	sub	sp, #32
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	460b      	mov	r3, r1
 80065e6:	607a      	str	r2, [r7, #4]
 80065e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80065ea:	4b35      	ldr	r3, [pc, #212]	@ (80066c0 <SDMMC_GetCmdResp6+0xe4>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a35      	ldr	r2, [pc, #212]	@ (80066c4 <SDMMC_GetCmdResp6+0xe8>)
 80065f0:	fba2 2303 	umull	r2, r3, r2, r3
 80065f4:	0a5b      	lsrs	r3, r3, #9
 80065f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065fa:	fb02 f303 	mul.w	r3, r2, r3
 80065fe:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	1e5a      	subs	r2, r3, #1
 8006604:	61fa      	str	r2, [r7, #28]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d102      	bne.n	8006610 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800660a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800660e:	e052      	b.n	80066b6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006614:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800661c:	2b00      	cmp	r3, #0
 800661e:	d0ef      	beq.n	8006600 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1ea      	bne.n	8006600 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800662e:	f003 0304 	and.w	r3, r3, #4
 8006632:	2b00      	cmp	r3, #0
 8006634:	d004      	beq.n	8006640 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2204      	movs	r2, #4
 800663a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800663c:	2304      	movs	r3, #4
 800663e:	e03a      	b.n	80066b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b00      	cmp	r3, #0
 800664a:	d004      	beq.n	8006656 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2201      	movs	r2, #1
 8006650:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006652:	2301      	movs	r3, #1
 8006654:	e02f      	b.n	80066b6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f7ff fc0d 	bl	8005e76 <SDIO_GetCommandResponse>
 800665c:	4603      	mov	r3, r0
 800665e:	461a      	mov	r2, r3
 8006660:	7afb      	ldrb	r3, [r7, #11]
 8006662:	4293      	cmp	r3, r2
 8006664:	d001      	beq.n	800666a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006666:	2301      	movs	r3, #1
 8006668:	e025      	b.n	80066b6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	22c5      	movs	r2, #197	@ 0xc5
 800666e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006670:	2100      	movs	r1, #0
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f7ff fc0c 	bl	8005e90 <SDIO_GetResponse>
 8006678:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d106      	bne.n	8006692 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	0c1b      	lsrs	r3, r3, #16
 8006688:	b29a      	uxth	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800668e:	2300      	movs	r3, #0
 8006690:	e011      	b.n	80066b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d002      	beq.n	80066a2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800669c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80066a0:	e009      	b.n	80066b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d002      	beq.n	80066b2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80066ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80066b0:	e001      	b.n	80066b6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80066b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3720      	adds	r7, #32
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	20000004 	.word	0x20000004
 80066c4:	10624dd3 	.word	0x10624dd3

080066c8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80066d0:	4b22      	ldr	r3, [pc, #136]	@ (800675c <SDMMC_GetCmdResp7+0x94>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a22      	ldr	r2, [pc, #136]	@ (8006760 <SDMMC_GetCmdResp7+0x98>)
 80066d6:	fba2 2303 	umull	r2, r3, r2, r3
 80066da:	0a5b      	lsrs	r3, r3, #9
 80066dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066e0:	fb02 f303 	mul.w	r3, r2, r3
 80066e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	1e5a      	subs	r2, r3, #1
 80066ea:	60fa      	str	r2, [r7, #12]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d102      	bne.n	80066f6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80066f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80066f4:	e02c      	b.n	8006750 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006702:	2b00      	cmp	r3, #0
 8006704:	d0ef      	beq.n	80066e6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1ea      	bne.n	80066e6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006714:	f003 0304 	and.w	r3, r3, #4
 8006718:	2b00      	cmp	r3, #0
 800671a:	d004      	beq.n	8006726 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2204      	movs	r2, #4
 8006720:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006722:	2304      	movs	r3, #4
 8006724:	e014      	b.n	8006750 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b00      	cmp	r3, #0
 8006730:	d004      	beq.n	800673c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006738:	2301      	movs	r3, #1
 800673a:	e009      	b.n	8006750 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006744:	2b00      	cmp	r3, #0
 8006746:	d002      	beq.n	800674e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2240      	movs	r2, #64	@ 0x40
 800674c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800674e:	2300      	movs	r3, #0
  
}
 8006750:	4618      	mov	r0, r3
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	20000004 	.word	0x20000004
 8006760:	10624dd3 	.word	0x10624dd3

08006764 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800676c:	4b11      	ldr	r3, [pc, #68]	@ (80067b4 <SDMMC_GetCmdError+0x50>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a11      	ldr	r2, [pc, #68]	@ (80067b8 <SDMMC_GetCmdError+0x54>)
 8006772:	fba2 2303 	umull	r2, r3, r2, r3
 8006776:	0a5b      	lsrs	r3, r3, #9
 8006778:	f241 3288 	movw	r2, #5000	@ 0x1388
 800677c:	fb02 f303 	mul.w	r3, r2, r3
 8006780:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	1e5a      	subs	r2, r3, #1
 8006786:	60fa      	str	r2, [r7, #12]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d102      	bne.n	8006792 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800678c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006790:	e009      	b.n	80067a6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800679a:	2b00      	cmp	r3, #0
 800679c:	d0f1      	beq.n	8006782 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	22c5      	movs	r2, #197	@ 0xc5
 80067a2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	20000004 	.word	0x20000004
 80067b8:	10624dd3 	.word	0x10624dd3

080067bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80067c0:	4904      	ldr	r1, [pc, #16]	@ (80067d4 <MX_FATFS_Init+0x18>)
 80067c2:	4805      	ldr	r0, [pc, #20]	@ (80067d8 <MX_FATFS_Init+0x1c>)
 80067c4:	f002 ffd8 	bl	8009778 <FATFS_LinkDriver>
 80067c8:	4603      	mov	r3, r0
 80067ca:	461a      	mov	r2, r3
 80067cc:	4b03      	ldr	r3, [pc, #12]	@ (80067dc <MX_FATFS_Init+0x20>)
 80067ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80067d0:	bf00      	nop
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	20008a44 	.word	0x20008a44
 80067d8:	0800a3a8 	.word	0x0800a3a8
 80067dc:	20008a40 	.word	0x20008a40

080067e0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80067e0:	b480      	push	{r7}
 80067e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80067e4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80067fa:	f000 f89e 	bl	800693a <BSP_SD_IsDetected>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b01      	cmp	r3, #1
 8006802:	d001      	beq.n	8006808 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e005      	b.n	8006814 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006808:	4804      	ldr	r0, [pc, #16]	@ (800681c <BSP_SD_Init+0x2c>)
 800680a:	f7fc feb9 	bl	8003580 <HAL_SD_Init>
 800680e:	4603      	mov	r3, r0
 8006810:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8006812:	79fb      	ldrb	r3, [r7, #7]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3708      	adds	r7, #8
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	20000124 	.word	0x20000124

08006820 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b088      	sub	sp, #32
 8006824:	af02      	add	r7, sp, #8
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
 800682c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800682e:	2300      	movs	r3, #0
 8006830:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	9300      	str	r3, [sp, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	68f9      	ldr	r1, [r7, #12]
 800683c:	4806      	ldr	r0, [pc, #24]	@ (8006858 <BSP_SD_ReadBlocks+0x38>)
 800683e:	f7fc ff4f 	bl	80036e0 <HAL_SD_ReadBlocks>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d001      	beq.n	800684c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800684c:	7dfb      	ldrb	r3, [r7, #23]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3718      	adds	r7, #24
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	20000124 	.word	0x20000124

0800685c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b088      	sub	sp, #32
 8006860:	af02      	add	r7, sp, #8
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
 8006868:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800686a:	2300      	movs	r3, #0
 800686c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	68f9      	ldr	r1, [r7, #12]
 8006878:	4806      	ldr	r0, [pc, #24]	@ (8006894 <BSP_SD_WriteBlocks+0x38>)
 800687a:	f7fd f917 	bl	8003aac <HAL_SD_WriteBlocks>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006888:	7dfb      	ldrb	r3, [r7, #23]
}
 800688a:	4618      	mov	r0, r3
 800688c:	3718      	adds	r7, #24
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	20000124 	.word	0x20000124

08006898 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800689c:	4805      	ldr	r0, [pc, #20]	@ (80068b4 <BSP_SD_GetCardState+0x1c>)
 800689e:	f7fd fdf3 	bl	8004488 <HAL_SD_GetCardState>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b04      	cmp	r3, #4
 80068a6:	bf14      	ite	ne
 80068a8:	2301      	movne	r3, #1
 80068aa:	2300      	moveq	r3, #0
 80068ac:	b2db      	uxtb	r3, r3
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	20000124 	.word	0x20000124

080068b8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80068c0:	6879      	ldr	r1, [r7, #4]
 80068c2:	4803      	ldr	r0, [pc, #12]	@ (80068d0 <BSP_SD_GetCardInfo+0x18>)
 80068c4:	f7fd fdb4 	bl	8004430 <HAL_SD_GetCardInfo>
}
 80068c8:	bf00      	nop
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	20000124 	.word	0x20000124

080068d4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80068dc:	f000 f818 	bl	8006910 <BSP_SD_AbortCallback>
}
 80068e0:	bf00      	nop
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80068f0:	f000 f815 	bl	800691e <BSP_SD_WriteCpltCallback>
}
 80068f4:	bf00      	nop
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006904:	f000 f812 	bl	800692c <BSP_SD_ReadCpltCallback>
}
 8006908:	bf00      	nop
 800690a:	3708      	adds	r7, #8
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006910:	b480      	push	{r7}
 8006912:	af00      	add	r7, sp, #0

}
 8006914:	bf00      	nop
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr

0800691e <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800691e:	b480      	push	{r7}
 8006920:	af00      	add	r7, sp, #0

}
 8006922:	bf00      	nop
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800692c:	b480      	push	{r7}
 800692e:	af00      	add	r7, sp, #0

}
 8006930:	bf00      	nop
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b082      	sub	sp, #8
 800693e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006940:	2301      	movs	r3, #1
 8006942:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8006944:	f000 f80c 	bl	8006960 <BSP_PlatformIsDetected>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800694e:	2300      	movs	r3, #0
 8006950:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006952:	79fb      	ldrb	r3, [r7, #7]
 8006954:	b2db      	uxtb	r3, r3
}
 8006956:	4618      	mov	r0, r3
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
	...

08006960 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8006966:	2301      	movs	r3, #1
 8006968:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800696a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800696e:	4806      	ldr	r0, [pc, #24]	@ (8006988 <BSP_PlatformIsDetected+0x28>)
 8006970:	f7fc f962 	bl	8002c38 <HAL_GPIO_ReadPin>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d001      	beq.n	800697e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800697a:	2300      	movs	r3, #0
 800697c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800697e:	79fb      	ldrb	r3, [r7, #7]
}
 8006980:	4618      	mov	r0, r3
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	40020800 	.word	0x40020800

0800698c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	4603      	mov	r3, r0
 8006994:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006996:	4b0b      	ldr	r3, [pc, #44]	@ (80069c4 <SD_CheckStatus+0x38>)
 8006998:	2201      	movs	r2, #1
 800699a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800699c:	f7ff ff7c 	bl	8006898 <BSP_SD_GetCardState>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d107      	bne.n	80069b6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80069a6:	4b07      	ldr	r3, [pc, #28]	@ (80069c4 <SD_CheckStatus+0x38>)
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	f023 0301 	bic.w	r3, r3, #1
 80069b0:	b2da      	uxtb	r2, r3
 80069b2:	4b04      	ldr	r3, [pc, #16]	@ (80069c4 <SD_CheckStatus+0x38>)
 80069b4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80069b6:	4b03      	ldr	r3, [pc, #12]	@ (80069c4 <SD_CheckStatus+0x38>)
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	b2db      	uxtb	r3, r3
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	2000000d 	.word	0x2000000d

080069c8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	4603      	mov	r3, r0
 80069d0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80069d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006a00 <SD_initialize+0x38>)
 80069d4:	2201      	movs	r2, #1
 80069d6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80069d8:	f7ff ff0a 	bl	80067f0 <BSP_SD_Init>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d107      	bne.n	80069f2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80069e2:	79fb      	ldrb	r3, [r7, #7]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7ff ffd1 	bl	800698c <SD_CheckStatus>
 80069ea:	4603      	mov	r3, r0
 80069ec:	461a      	mov	r2, r3
 80069ee:	4b04      	ldr	r3, [pc, #16]	@ (8006a00 <SD_initialize+0x38>)
 80069f0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80069f2:	4b03      	ldr	r3, [pc, #12]	@ (8006a00 <SD_initialize+0x38>)
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	b2db      	uxtb	r3, r3
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	2000000d 	.word	0x2000000d

08006a04 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006a0e:	79fb      	ldrb	r3, [r7, #7]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7ff ffbb 	bl	800698c <SD_CheckStatus>
 8006a16:	4603      	mov	r3, r0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3708      	adds	r7, #8
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60b9      	str	r1, [r7, #8]
 8006a28:	607a      	str	r2, [r7, #4]
 8006a2a:	603b      	str	r3, [r7, #0]
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8006a34:	f04f 33ff 	mov.w	r3, #4294967295
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	6879      	ldr	r1, [r7, #4]
 8006a3c:	68b8      	ldr	r0, [r7, #8]
 8006a3e:	f7ff feef 	bl	8006820 <BSP_SD_ReadBlocks>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d107      	bne.n	8006a58 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8006a48:	bf00      	nop
 8006a4a:	f7ff ff25 	bl	8006898 <BSP_SD_GetCardState>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1fa      	bne.n	8006a4a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8006a54:	2300      	movs	r3, #0
 8006a56:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3718      	adds	r7, #24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b086      	sub	sp, #24
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
 8006a6c:	603b      	str	r3, [r7, #0]
 8006a6e:	4603      	mov	r3, r0
 8006a70:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8006a76:	f04f 33ff 	mov.w	r3, #4294967295
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	6879      	ldr	r1, [r7, #4]
 8006a7e:	68b8      	ldr	r0, [r7, #8]
 8006a80:	f7ff feec 	bl	800685c <BSP_SD_WriteBlocks>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d107      	bne.n	8006a9a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8006a8a:	bf00      	nop
 8006a8c:	f7ff ff04 	bl	8006898 <BSP_SD_GetCardState>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1fa      	bne.n	8006a8c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3718      	adds	r7, #24
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b08c      	sub	sp, #48	@ 0x30
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	4603      	mov	r3, r0
 8006aac:	603a      	str	r2, [r7, #0]
 8006aae:	71fb      	strb	r3, [r7, #7]
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006aba:	4b25      	ldr	r3, [pc, #148]	@ (8006b50 <SD_ioctl+0xac>)
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d001      	beq.n	8006acc <SD_ioctl+0x28>
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e03c      	b.n	8006b46 <SD_ioctl+0xa2>

  switch (cmd)
 8006acc:	79bb      	ldrb	r3, [r7, #6]
 8006ace:	2b03      	cmp	r3, #3
 8006ad0:	d834      	bhi.n	8006b3c <SD_ioctl+0x98>
 8006ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ad8 <SD_ioctl+0x34>)
 8006ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad8:	08006ae9 	.word	0x08006ae9
 8006adc:	08006af1 	.word	0x08006af1
 8006ae0:	08006b09 	.word	0x08006b09
 8006ae4:	08006b23 	.word	0x08006b23
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006aee:	e028      	b.n	8006b42 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006af0:	f107 030c 	add.w	r3, r7, #12
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7ff fedf 	bl	80068b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006b06:	e01c      	b.n	8006b42 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006b08:	f107 030c 	add.w	r3, r7, #12
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7ff fed3 	bl	80068b8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006b20:	e00f      	b.n	8006b42 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006b22:	f107 030c 	add.w	r3, r7, #12
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7ff fec6 	bl	80068b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b2e:	0a5a      	lsrs	r2, r3, #9
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006b34:	2300      	movs	r3, #0
 8006b36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006b3a:	e002      	b.n	8006b42 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006b3c:	2304      	movs	r3, #4
 8006b3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8006b42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3730      	adds	r7, #48	@ 0x30
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	2000000d 	.word	0x2000000d

08006b54 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006b5e:	79fb      	ldrb	r3, [r7, #7]
 8006b60:	4a08      	ldr	r2, [pc, #32]	@ (8006b84 <disk_status+0x30>)
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4413      	add	r3, r2
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	79fa      	ldrb	r2, [r7, #7]
 8006b6c:	4905      	ldr	r1, [pc, #20]	@ (8006b84 <disk_status+0x30>)
 8006b6e:	440a      	add	r2, r1
 8006b70:	7a12      	ldrb	r2, [r2, #8]
 8006b72:	4610      	mov	r0, r2
 8006b74:	4798      	blx	r3
 8006b76:	4603      	mov	r3, r0
 8006b78:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	20008a80 	.word	0x20008a80

08006b88 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	4603      	mov	r3, r0
 8006b90:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006b96:	79fb      	ldrb	r3, [r7, #7]
 8006b98:	4a0e      	ldr	r2, [pc, #56]	@ (8006bd4 <disk_initialize+0x4c>)
 8006b9a:	5cd3      	ldrb	r3, [r2, r3]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d114      	bne.n	8006bca <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006ba0:	79fb      	ldrb	r3, [r7, #7]
 8006ba2:	4a0c      	ldr	r2, [pc, #48]	@ (8006bd4 <disk_initialize+0x4c>)
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	79fa      	ldrb	r2, [r7, #7]
 8006bae:	4909      	ldr	r1, [pc, #36]	@ (8006bd4 <disk_initialize+0x4c>)
 8006bb0:	440a      	add	r2, r1
 8006bb2:	7a12      	ldrb	r2, [r2, #8]
 8006bb4:	4610      	mov	r0, r2
 8006bb6:	4798      	blx	r3
 8006bb8:	4603      	mov	r3, r0
 8006bba:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d103      	bne.n	8006bca <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8006bc2:	79fb      	ldrb	r3, [r7, #7]
 8006bc4:	4a03      	ldr	r2, [pc, #12]	@ (8006bd4 <disk_initialize+0x4c>)
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8006bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	20008a80 	.word	0x20008a80

08006bd8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006bd8:	b590      	push	{r4, r7, lr}
 8006bda:	b087      	sub	sp, #28
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60b9      	str	r1, [r7, #8]
 8006be0:	607a      	str	r2, [r7, #4]
 8006be2:	603b      	str	r3, [r7, #0]
 8006be4:	4603      	mov	r3, r0
 8006be6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
 8006bea:	4a0a      	ldr	r2, [pc, #40]	@ (8006c14 <disk_read+0x3c>)
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	689c      	ldr	r4, [r3, #8]
 8006bf4:	7bfb      	ldrb	r3, [r7, #15]
 8006bf6:	4a07      	ldr	r2, [pc, #28]	@ (8006c14 <disk_read+0x3c>)
 8006bf8:	4413      	add	r3, r2
 8006bfa:	7a18      	ldrb	r0, [r3, #8]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	68b9      	ldr	r1, [r7, #8]
 8006c02:	47a0      	blx	r4
 8006c04:	4603      	mov	r3, r0
 8006c06:	75fb      	strb	r3, [r7, #23]
  return res;
 8006c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	371c      	adds	r7, #28
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd90      	pop	{r4, r7, pc}
 8006c12:	bf00      	nop
 8006c14:	20008a80 	.word	0x20008a80

08006c18 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006c18:	b590      	push	{r4, r7, lr}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60b9      	str	r1, [r7, #8]
 8006c20:	607a      	str	r2, [r7, #4]
 8006c22:	603b      	str	r3, [r7, #0]
 8006c24:	4603      	mov	r3, r0
 8006c26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
 8006c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8006c54 <disk_write+0x3c>)
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	68dc      	ldr	r4, [r3, #12]
 8006c34:	7bfb      	ldrb	r3, [r7, #15]
 8006c36:	4a07      	ldr	r2, [pc, #28]	@ (8006c54 <disk_write+0x3c>)
 8006c38:	4413      	add	r3, r2
 8006c3a:	7a18      	ldrb	r0, [r3, #8]
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	68b9      	ldr	r1, [r7, #8]
 8006c42:	47a0      	blx	r4
 8006c44:	4603      	mov	r3, r0
 8006c46:	75fb      	strb	r3, [r7, #23]
  return res;
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	371c      	adds	r7, #28
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd90      	pop	{r4, r7, pc}
 8006c52:	bf00      	nop
 8006c54:	20008a80 	.word	0x20008a80

08006c58 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	4603      	mov	r3, r0
 8006c60:	603a      	str	r2, [r7, #0]
 8006c62:	71fb      	strb	r3, [r7, #7]
 8006c64:	460b      	mov	r3, r1
 8006c66:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006c68:	79fb      	ldrb	r3, [r7, #7]
 8006c6a:	4a09      	ldr	r2, [pc, #36]	@ (8006c90 <disk_ioctl+0x38>)
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	79fa      	ldrb	r2, [r7, #7]
 8006c76:	4906      	ldr	r1, [pc, #24]	@ (8006c90 <disk_ioctl+0x38>)
 8006c78:	440a      	add	r2, r1
 8006c7a:	7a10      	ldrb	r0, [r2, #8]
 8006c7c:	79b9      	ldrb	r1, [r7, #6]
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	4798      	blx	r3
 8006c82:	4603      	mov	r3, r0
 8006c84:	73fb      	strb	r3, [r7, #15]
  return res;
 8006c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	20008a80 	.word	0x20008a80

08006c94 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006ca4:	89fb      	ldrh	r3, [r7, #14]
 8006ca6:	021b      	lsls	r3, r3, #8
 8006ca8:	b21a      	sxth	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	b21b      	sxth	r3, r3
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	b21b      	sxth	r3, r3
 8006cb4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006cb6:	89fb      	ldrh	r3, [r7, #14]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	3303      	adds	r3, #3
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	021b      	lsls	r3, r3, #8
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	3202      	adds	r2, #2
 8006cdc:	7812      	ldrb	r2, [r2, #0]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	021b      	lsls	r3, r3, #8
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	3201      	adds	r2, #1
 8006cea:	7812      	ldrb	r2, [r2, #0]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	021b      	lsls	r3, r3, #8
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	7812      	ldrb	r2, [r2, #0]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	60fb      	str	r3, [r7, #12]
	return rv;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b083      	sub	sp, #12
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
 8006d12:	460b      	mov	r3, r1
 8006d14:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	607a      	str	r2, [r7, #4]
 8006d1c:	887a      	ldrh	r2, [r7, #2]
 8006d1e:	b2d2      	uxtb	r2, r2
 8006d20:	701a      	strb	r2, [r3, #0]
 8006d22:	887b      	ldrh	r3, [r7, #2]
 8006d24:	0a1b      	lsrs	r3, r3, #8
 8006d26:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	1c5a      	adds	r2, r3, #1
 8006d2c:	607a      	str	r2, [r7, #4]
 8006d2e:	887a      	ldrh	r2, [r7, #2]
 8006d30:	b2d2      	uxtb	r2, r2
 8006d32:	701a      	strb	r2, [r3, #0]
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	1c5a      	adds	r2, r3, #1
 8006d4e:	607a      	str	r2, [r7, #4]
 8006d50:	683a      	ldr	r2, [r7, #0]
 8006d52:	b2d2      	uxtb	r2, r2
 8006d54:	701a      	strb	r2, [r3, #0]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	0a1b      	lsrs	r3, r3, #8
 8006d5a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	1c5a      	adds	r2, r3, #1
 8006d60:	607a      	str	r2, [r7, #4]
 8006d62:	683a      	ldr	r2, [r7, #0]
 8006d64:	b2d2      	uxtb	r2, r2
 8006d66:	701a      	strb	r2, [r3, #0]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	0a1b      	lsrs	r3, r3, #8
 8006d6c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	1c5a      	adds	r2, r3, #1
 8006d72:	607a      	str	r2, [r7, #4]
 8006d74:	683a      	ldr	r2, [r7, #0]
 8006d76:	b2d2      	uxtb	r2, r2
 8006d78:	701a      	strb	r2, [r3, #0]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	0a1b      	lsrs	r3, r3, #8
 8006d7e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	607a      	str	r2, [r7, #4]
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	b2d2      	uxtb	r2, r2
 8006d8a:	701a      	strb	r2, [r3, #0]
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006d98:	b480      	push	{r7}
 8006d9a:	b087      	sub	sp, #28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00d      	beq.n	8006dce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	1c53      	adds	r3, r2, #1
 8006db6:	613b      	str	r3, [r7, #16]
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	1c59      	adds	r1, r3, #1
 8006dbc:	6179      	str	r1, [r7, #20]
 8006dbe:	7812      	ldrb	r2, [r2, #0]
 8006dc0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	607b      	str	r3, [r7, #4]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1f1      	bne.n	8006db2 <mem_cpy+0x1a>
	}
}
 8006dce:	bf00      	nop
 8006dd0:	371c      	adds	r7, #28
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006dda:	b480      	push	{r7}
 8006ddc:	b087      	sub	sp, #28
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	60f8      	str	r0, [r7, #12]
 8006de2:	60b9      	str	r1, [r7, #8]
 8006de4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	1c5a      	adds	r2, r3, #1
 8006dee:	617a      	str	r2, [r7, #20]
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	b2d2      	uxtb	r2, r2
 8006df4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	607b      	str	r3, [r7, #4]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1f3      	bne.n	8006dea <mem_set+0x10>
}
 8006e02:	bf00      	nop
 8006e04:	bf00      	nop
 8006e06:	371c      	adds	r7, #28
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006e10:	b480      	push	{r7}
 8006e12:	b089      	sub	sp, #36	@ 0x24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	61fb      	str	r3, [r7, #28]
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006e24:	2300      	movs	r3, #0
 8006e26:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	1c5a      	adds	r2, r3, #1
 8006e2c:	61fa      	str	r2, [r7, #28]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	4619      	mov	r1, r3
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	1c5a      	adds	r2, r3, #1
 8006e36:	61ba      	str	r2, [r7, #24]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	1acb      	subs	r3, r1, r3
 8006e3c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	3b01      	subs	r3, #1
 8006e42:	607b      	str	r3, [r7, #4]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d002      	beq.n	8006e50 <mem_cmp+0x40>
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d0eb      	beq.n	8006e28 <mem_cmp+0x18>

	return r;
 8006e50:	697b      	ldr	r3, [r7, #20]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3724      	adds	r7, #36	@ 0x24
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006e5e:	b480      	push	{r7}
 8006e60:	b083      	sub	sp, #12
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006e68:	e002      	b.n	8006e70 <chk_chr+0x12>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	607b      	str	r3, [r7, #4]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d005      	beq.n	8006e84 <chk_chr+0x26>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d1f2      	bne.n	8006e6a <chk_chr+0xc>
	return *str;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	781b      	ldrb	r3, [r3, #0]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	60bb      	str	r3, [r7, #8]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	60fb      	str	r3, [r7, #12]
 8006ea6:	e029      	b.n	8006efc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006ea8:	4a27      	ldr	r2, [pc, #156]	@ (8006f48 <chk_lock+0xb4>)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	011b      	lsls	r3, r3, #4
 8006eae:	4413      	add	r3, r2
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d01d      	beq.n	8006ef2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006eb6:	4a24      	ldr	r2, [pc, #144]	@ (8006f48 <chk_lock+0xb4>)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	011b      	lsls	r3, r3, #4
 8006ebc:	4413      	add	r3, r2
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d116      	bne.n	8006ef6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006ec8:	4a1f      	ldr	r2, [pc, #124]	@ (8006f48 <chk_lock+0xb4>)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	011b      	lsls	r3, r3, #4
 8006ece:	4413      	add	r3, r2
 8006ed0:	3304      	adds	r3, #4
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d10c      	bne.n	8006ef6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006edc:	4a1a      	ldr	r2, [pc, #104]	@ (8006f48 <chk_lock+0xb4>)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	011b      	lsls	r3, r3, #4
 8006ee2:	4413      	add	r3, r2
 8006ee4:	3308      	adds	r3, #8
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d102      	bne.n	8006ef6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006ef0:	e007      	b.n	8006f02 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	60fb      	str	r3, [r7, #12]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d9d2      	bls.n	8006ea8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2b03      	cmp	r3, #3
 8006f06:	d109      	bne.n	8006f1c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d102      	bne.n	8006f14 <chk_lock+0x80>
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d101      	bne.n	8006f18 <chk_lock+0x84>
 8006f14:	2300      	movs	r3, #0
 8006f16:	e010      	b.n	8006f3a <chk_lock+0xa6>
 8006f18:	2312      	movs	r3, #18
 8006f1a:	e00e      	b.n	8006f3a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d108      	bne.n	8006f34 <chk_lock+0xa0>
 8006f22:	4a09      	ldr	r2, [pc, #36]	@ (8006f48 <chk_lock+0xb4>)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	011b      	lsls	r3, r3, #4
 8006f28:	4413      	add	r3, r2
 8006f2a:	330c      	adds	r3, #12
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f32:	d101      	bne.n	8006f38 <chk_lock+0xa4>
 8006f34:	2310      	movs	r3, #16
 8006f36:	e000      	b.n	8006f3a <chk_lock+0xa6>
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3714      	adds	r7, #20
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	20008a50 	.word	0x20008a50

08006f4c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006f52:	2300      	movs	r3, #0
 8006f54:	607b      	str	r3, [r7, #4]
 8006f56:	e002      	b.n	8006f5e <enq_lock+0x12>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	607b      	str	r3, [r7, #4]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d806      	bhi.n	8006f72 <enq_lock+0x26>
 8006f64:	4a09      	ldr	r2, [pc, #36]	@ (8006f8c <enq_lock+0x40>)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	011b      	lsls	r3, r3, #4
 8006f6a:	4413      	add	r3, r2
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1f2      	bne.n	8006f58 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2b03      	cmp	r3, #3
 8006f76:	bf14      	ite	ne
 8006f78:	2301      	movne	r3, #1
 8006f7a:	2300      	moveq	r3, #0
 8006f7c:	b2db      	uxtb	r3, r3
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	20008a50 	.word	0x20008a50

08006f90 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60fb      	str	r3, [r7, #12]
 8006f9e:	e01f      	b.n	8006fe0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006fa0:	4a41      	ldr	r2, [pc, #260]	@ (80070a8 <inc_lock+0x118>)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	011b      	lsls	r3, r3, #4
 8006fa6:	4413      	add	r3, r2
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d113      	bne.n	8006fda <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006fb2:	4a3d      	ldr	r2, [pc, #244]	@ (80070a8 <inc_lock+0x118>)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	011b      	lsls	r3, r3, #4
 8006fb8:	4413      	add	r3, r2
 8006fba:	3304      	adds	r3, #4
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d109      	bne.n	8006fda <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006fc6:	4a38      	ldr	r2, [pc, #224]	@ (80070a8 <inc_lock+0x118>)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	011b      	lsls	r3, r3, #4
 8006fcc:	4413      	add	r3, r2
 8006fce:	3308      	adds	r3, #8
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d006      	beq.n	8006fe8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d9dc      	bls.n	8006fa0 <inc_lock+0x10>
 8006fe6:	e000      	b.n	8006fea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006fe8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2b03      	cmp	r3, #3
 8006fee:	d132      	bne.n	8007056 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	60fb      	str	r3, [r7, #12]
 8006ff4:	e002      	b.n	8006ffc <inc_lock+0x6c>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	60fb      	str	r3, [r7, #12]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d806      	bhi.n	8007010 <inc_lock+0x80>
 8007002:	4a29      	ldr	r2, [pc, #164]	@ (80070a8 <inc_lock+0x118>)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	011b      	lsls	r3, r3, #4
 8007008:	4413      	add	r3, r2
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1f2      	bne.n	8006ff6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2b03      	cmp	r3, #3
 8007014:	d101      	bne.n	800701a <inc_lock+0x8a>
 8007016:	2300      	movs	r3, #0
 8007018:	e040      	b.n	800709c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	4922      	ldr	r1, [pc, #136]	@ (80070a8 <inc_lock+0x118>)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	011b      	lsls	r3, r3, #4
 8007024:	440b      	add	r3, r1
 8007026:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	689a      	ldr	r2, [r3, #8]
 800702c:	491e      	ldr	r1, [pc, #120]	@ (80070a8 <inc_lock+0x118>)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	011b      	lsls	r3, r3, #4
 8007032:	440b      	add	r3, r1
 8007034:	3304      	adds	r3, #4
 8007036:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	695a      	ldr	r2, [r3, #20]
 800703c:	491a      	ldr	r1, [pc, #104]	@ (80070a8 <inc_lock+0x118>)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	011b      	lsls	r3, r3, #4
 8007042:	440b      	add	r3, r1
 8007044:	3308      	adds	r3, #8
 8007046:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007048:	4a17      	ldr	r2, [pc, #92]	@ (80070a8 <inc_lock+0x118>)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	011b      	lsls	r3, r3, #4
 800704e:	4413      	add	r3, r2
 8007050:	330c      	adds	r3, #12
 8007052:	2200      	movs	r2, #0
 8007054:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d009      	beq.n	8007070 <inc_lock+0xe0>
 800705c:	4a12      	ldr	r2, [pc, #72]	@ (80070a8 <inc_lock+0x118>)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	011b      	lsls	r3, r3, #4
 8007062:	4413      	add	r3, r2
 8007064:	330c      	adds	r3, #12
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d001      	beq.n	8007070 <inc_lock+0xe0>
 800706c:	2300      	movs	r3, #0
 800706e:	e015      	b.n	800709c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d108      	bne.n	8007088 <inc_lock+0xf8>
 8007076:	4a0c      	ldr	r2, [pc, #48]	@ (80070a8 <inc_lock+0x118>)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	011b      	lsls	r3, r3, #4
 800707c:	4413      	add	r3, r2
 800707e:	330c      	adds	r3, #12
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	3301      	adds	r3, #1
 8007084:	b29a      	uxth	r2, r3
 8007086:	e001      	b.n	800708c <inc_lock+0xfc>
 8007088:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800708c:	4906      	ldr	r1, [pc, #24]	@ (80070a8 <inc_lock+0x118>)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	011b      	lsls	r3, r3, #4
 8007092:	440b      	add	r3, r1
 8007094:	330c      	adds	r3, #12
 8007096:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	3301      	adds	r3, #1
}
 800709c:	4618      	mov	r0, r3
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	20008a50 	.word	0x20008a50

080070ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80070b4:	2300      	movs	r3, #0
 80070b6:	60fb      	str	r3, [r7, #12]
 80070b8:	e010      	b.n	80070dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80070ba:	4a0d      	ldr	r2, [pc, #52]	@ (80070f0 <clear_lock+0x44>)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	011b      	lsls	r3, r3, #4
 80070c0:	4413      	add	r3, r2
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d105      	bne.n	80070d6 <clear_lock+0x2a>
 80070ca:	4a09      	ldr	r2, [pc, #36]	@ (80070f0 <clear_lock+0x44>)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	011b      	lsls	r3, r3, #4
 80070d0:	4413      	add	r3, r2
 80070d2:	2200      	movs	r2, #0
 80070d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3301      	adds	r3, #1
 80070da:	60fb      	str	r3, [r7, #12]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d9eb      	bls.n	80070ba <clear_lock+0xe>
	}
}
 80070e2:	bf00      	nop
 80070e4:	bf00      	nop
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	20008a50 	.word	0x20008a50

080070f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80070fc:	2300      	movs	r3, #0
 80070fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	78db      	ldrb	r3, [r3, #3]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d034      	beq.n	8007172 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800710c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	7858      	ldrb	r0, [r3, #1]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007118:	2301      	movs	r3, #1
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	f7ff fd7c 	bl	8006c18 <disk_write>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d002      	beq.n	800712c <sync_window+0x38>
			res = FR_DISK_ERR;
 8007126:	2301      	movs	r3, #1
 8007128:	73fb      	strb	r3, [r7, #15]
 800712a:	e022      	b.n	8007172 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	1ad2      	subs	r2, r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	429a      	cmp	r2, r3
 8007140:	d217      	bcs.n	8007172 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	789b      	ldrb	r3, [r3, #2]
 8007146:	613b      	str	r3, [r7, #16]
 8007148:	e010      	b.n	800716c <sync_window+0x78>
					wsect += fs->fsize;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	4413      	add	r3, r2
 8007152:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	7858      	ldrb	r0, [r3, #1]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800715e:	2301      	movs	r3, #1
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	f7ff fd59 	bl	8006c18 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	3b01      	subs	r3, #1
 800716a:	613b      	str	r3, [r7, #16]
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d8eb      	bhi.n	800714a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007172:	7bfb      	ldrb	r3, [r7, #15]
}
 8007174:	4618      	mov	r0, r3
 8007176:	3718      	adds	r7, #24
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007186:	2300      	movs	r3, #0
 8007188:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	429a      	cmp	r2, r3
 8007192:	d01b      	beq.n	80071cc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7ff ffad 	bl	80070f4 <sync_window>
 800719a:	4603      	mov	r3, r0
 800719c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800719e:	7bfb      	ldrb	r3, [r7, #15]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d113      	bne.n	80071cc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	7858      	ldrb	r0, [r3, #1]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80071ae:	2301      	movs	r3, #1
 80071b0:	683a      	ldr	r2, [r7, #0]
 80071b2:	f7ff fd11 	bl	8006bd8 <disk_read>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d004      	beq.n	80071c6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80071bc:	f04f 33ff 	mov.w	r3, #4294967295
 80071c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	683a      	ldr	r2, [r7, #0]
 80071ca:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
	...

080071d8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7ff ff87 	bl	80070f4 <sync_window>
 80071e6:	4603      	mov	r3, r0
 80071e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d159      	bne.n	80072a4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	2b03      	cmp	r3, #3
 80071f6:	d149      	bne.n	800728c <sync_fs+0xb4>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	791b      	ldrb	r3, [r3, #4]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d145      	bne.n	800728c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	899b      	ldrh	r3, [r3, #12]
 800720a:	461a      	mov	r2, r3
 800720c:	2100      	movs	r1, #0
 800720e:	f7ff fde4 	bl	8006dda <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	3338      	adds	r3, #56	@ 0x38
 8007216:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800721a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800721e:	4618      	mov	r0, r3
 8007220:	f7ff fd73 	bl	8006d0a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	3338      	adds	r3, #56	@ 0x38
 8007228:	4921      	ldr	r1, [pc, #132]	@ (80072b0 <sync_fs+0xd8>)
 800722a:	4618      	mov	r0, r3
 800722c:	f7ff fd88 	bl	8006d40 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	3338      	adds	r3, #56	@ 0x38
 8007234:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007238:	491e      	ldr	r1, [pc, #120]	@ (80072b4 <sync_fs+0xdc>)
 800723a:	4618      	mov	r0, r3
 800723c:	f7ff fd80 	bl	8006d40 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	3338      	adds	r3, #56	@ 0x38
 8007244:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	4619      	mov	r1, r3
 800724e:	4610      	mov	r0, r2
 8007250:	f7ff fd76 	bl	8006d40 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	3338      	adds	r3, #56	@ 0x38
 8007258:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	695b      	ldr	r3, [r3, #20]
 8007260:	4619      	mov	r1, r3
 8007262:	4610      	mov	r0, r2
 8007264:	f7ff fd6c 	bl	8006d40 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800726c:	1c5a      	adds	r2, r3, #1
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	7858      	ldrb	r0, [r3, #1]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007280:	2301      	movs	r3, #1
 8007282:	f7ff fcc9 	bl	8006c18 <disk_write>
			fs->fsi_flag = 0;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	785b      	ldrb	r3, [r3, #1]
 8007290:	2200      	movs	r2, #0
 8007292:	2100      	movs	r1, #0
 8007294:	4618      	mov	r0, r3
 8007296:	f7ff fcdf 	bl	8006c58 <disk_ioctl>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d001      	beq.n	80072a4 <sync_fs+0xcc>
 80072a0:	2301      	movs	r3, #1
 80072a2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80072a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	41615252 	.word	0x41615252
 80072b4:	61417272 	.word	0x61417272

080072b8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	3b02      	subs	r3, #2
 80072c6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	69db      	ldr	r3, [r3, #28]
 80072cc:	3b02      	subs	r3, #2
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d301      	bcc.n	80072d8 <clust2sect+0x20>
 80072d4:	2300      	movs	r3, #0
 80072d6:	e008      	b.n	80072ea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	895b      	ldrh	r3, [r3, #10]
 80072dc:	461a      	mov	r2, r3
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	fb03 f202 	mul.w	r2, r3, r2
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e8:	4413      	add	r3, r2
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	370c      	adds	r7, #12
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b086      	sub	sp, #24
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
 80072fe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d904      	bls.n	8007316 <get_fat+0x20>
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	69db      	ldr	r3, [r3, #28]
 8007310:	683a      	ldr	r2, [r7, #0]
 8007312:	429a      	cmp	r2, r3
 8007314:	d302      	bcc.n	800731c <get_fat+0x26>
		val = 1;	/* Internal error */
 8007316:	2301      	movs	r3, #1
 8007318:	617b      	str	r3, [r7, #20]
 800731a:	e0ba      	b.n	8007492 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800731c:	f04f 33ff 	mov.w	r3, #4294967295
 8007320:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b03      	cmp	r3, #3
 8007328:	f000 8082 	beq.w	8007430 <get_fat+0x13a>
 800732c:	2b03      	cmp	r3, #3
 800732e:	f300 80a6 	bgt.w	800747e <get_fat+0x188>
 8007332:	2b01      	cmp	r3, #1
 8007334:	d002      	beq.n	800733c <get_fat+0x46>
 8007336:	2b02      	cmp	r3, #2
 8007338:	d055      	beq.n	80073e6 <get_fat+0xf0>
 800733a:	e0a0      	b.n	800747e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	60fb      	str	r3, [r7, #12]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	085b      	lsrs	r3, r3, #1
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	4413      	add	r3, r2
 8007348:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	899b      	ldrh	r3, [r3, #12]
 8007352:	4619      	mov	r1, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	fbb3 f3f1 	udiv	r3, r3, r1
 800735a:	4413      	add	r3, r2
 800735c:	4619      	mov	r1, r3
 800735e:	6938      	ldr	r0, [r7, #16]
 8007360:	f7ff ff0c 	bl	800717c <move_window>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	f040 808c 	bne.w	8007484 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	1c5a      	adds	r2, r3, #1
 8007370:	60fa      	str	r2, [r7, #12]
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	8992      	ldrh	r2, [r2, #12]
 8007376:	fbb3 f1f2 	udiv	r1, r3, r2
 800737a:	fb01 f202 	mul.w	r2, r1, r2
 800737e:	1a9b      	subs	r3, r3, r2
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	4413      	add	r3, r2
 8007384:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007388:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	899b      	ldrh	r3, [r3, #12]
 8007392:	4619      	mov	r1, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	fbb3 f3f1 	udiv	r3, r3, r1
 800739a:	4413      	add	r3, r2
 800739c:	4619      	mov	r1, r3
 800739e:	6938      	ldr	r0, [r7, #16]
 80073a0:	f7ff feec 	bl	800717c <move_window>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d16e      	bne.n	8007488 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	899b      	ldrh	r3, [r3, #12]
 80073ae:	461a      	mov	r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80073b6:	fb01 f202 	mul.w	r2, r1, r2
 80073ba:	1a9b      	subs	r3, r3, r2
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	4413      	add	r3, r2
 80073c0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80073c4:	021b      	lsls	r3, r3, #8
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d002      	beq.n	80073dc <get_fat+0xe6>
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	091b      	lsrs	r3, r3, #4
 80073da:	e002      	b.n	80073e2 <get_fat+0xec>
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073e2:	617b      	str	r3, [r7, #20]
			break;
 80073e4:	e055      	b.n	8007492 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	899b      	ldrh	r3, [r3, #12]
 80073ee:	085b      	lsrs	r3, r3, #1
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	4619      	mov	r1, r3
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80073fa:	4413      	add	r3, r2
 80073fc:	4619      	mov	r1, r3
 80073fe:	6938      	ldr	r0, [r7, #16]
 8007400:	f7ff febc 	bl	800717c <move_window>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d140      	bne.n	800748c <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	005b      	lsls	r3, r3, #1
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	8992      	ldrh	r2, [r2, #12]
 8007418:	fbb3 f0f2 	udiv	r0, r3, r2
 800741c:	fb00 f202 	mul.w	r2, r0, r2
 8007420:	1a9b      	subs	r3, r3, r2
 8007422:	440b      	add	r3, r1
 8007424:	4618      	mov	r0, r3
 8007426:	f7ff fc35 	bl	8006c94 <ld_word>
 800742a:	4603      	mov	r3, r0
 800742c:	617b      	str	r3, [r7, #20]
			break;
 800742e:	e030      	b.n	8007492 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	899b      	ldrh	r3, [r3, #12]
 8007438:	089b      	lsrs	r3, r3, #2
 800743a:	b29b      	uxth	r3, r3
 800743c:	4619      	mov	r1, r3
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	fbb3 f3f1 	udiv	r3, r3, r1
 8007444:	4413      	add	r3, r2
 8007446:	4619      	mov	r1, r3
 8007448:	6938      	ldr	r0, [r7, #16]
 800744a:	f7ff fe97 	bl	800717c <move_window>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d11d      	bne.n	8007490 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	8992      	ldrh	r2, [r2, #12]
 8007462:	fbb3 f0f2 	udiv	r0, r3, r2
 8007466:	fb00 f202 	mul.w	r2, r0, r2
 800746a:	1a9b      	subs	r3, r3, r2
 800746c:	440b      	add	r3, r1
 800746e:	4618      	mov	r0, r3
 8007470:	f7ff fc28 	bl	8006cc4 <ld_dword>
 8007474:	4603      	mov	r3, r0
 8007476:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800747a:	617b      	str	r3, [r7, #20]
			break;
 800747c:	e009      	b.n	8007492 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800747e:	2301      	movs	r3, #1
 8007480:	617b      	str	r3, [r7, #20]
 8007482:	e006      	b.n	8007492 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007484:	bf00      	nop
 8007486:	e004      	b.n	8007492 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007488:	bf00      	nop
 800748a:	e002      	b.n	8007492 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800748c:	bf00      	nop
 800748e:	e000      	b.n	8007492 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007490:	bf00      	nop
		}
	}

	return val;
 8007492:	697b      	ldr	r3, [r7, #20]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3718      	adds	r7, #24
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800749c:	b590      	push	{r4, r7, lr}
 800749e:	b089      	sub	sp, #36	@ 0x24
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80074a8:	2302      	movs	r3, #2
 80074aa:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	f240 8109 	bls.w	80076c6 <put_fat+0x22a>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	69db      	ldr	r3, [r3, #28]
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	f080 8103 	bcs.w	80076c6 <put_fat+0x22a>
		switch (fs->fs_type) {
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	2b03      	cmp	r3, #3
 80074c6:	f000 80b6 	beq.w	8007636 <put_fat+0x19a>
 80074ca:	2b03      	cmp	r3, #3
 80074cc:	f300 80fb 	bgt.w	80076c6 <put_fat+0x22a>
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d003      	beq.n	80074dc <put_fat+0x40>
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	f000 8083 	beq.w	80075e0 <put_fat+0x144>
 80074da:	e0f4      	b.n	80076c6 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	61bb      	str	r3, [r7, #24]
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	085b      	lsrs	r3, r3, #1
 80074e4:	69ba      	ldr	r2, [r7, #24]
 80074e6:	4413      	add	r3, r2
 80074e8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	899b      	ldrh	r3, [r3, #12]
 80074f2:	4619      	mov	r1, r3
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80074fa:	4413      	add	r3, r2
 80074fc:	4619      	mov	r1, r3
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f7ff fe3c 	bl	800717c <move_window>
 8007504:	4603      	mov	r3, r0
 8007506:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007508:	7ffb      	ldrb	r3, [r7, #31]
 800750a:	2b00      	cmp	r3, #0
 800750c:	f040 80d4 	bne.w	80076b8 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	1c5a      	adds	r2, r3, #1
 800751a:	61ba      	str	r2, [r7, #24]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	8992      	ldrh	r2, [r2, #12]
 8007520:	fbb3 f0f2 	udiv	r0, r3, r2
 8007524:	fb00 f202 	mul.w	r2, r0, r2
 8007528:	1a9b      	subs	r3, r3, r2
 800752a:	440b      	add	r3, r1
 800752c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	f003 0301 	and.w	r3, r3, #1
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00d      	beq.n	8007554 <put_fat+0xb8>
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	b25b      	sxtb	r3, r3
 800753e:	f003 030f 	and.w	r3, r3, #15
 8007542:	b25a      	sxtb	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	b2db      	uxtb	r3, r3
 8007548:	011b      	lsls	r3, r3, #4
 800754a:	b25b      	sxtb	r3, r3
 800754c:	4313      	orrs	r3, r2
 800754e:	b25b      	sxtb	r3, r3
 8007550:	b2db      	uxtb	r3, r3
 8007552:	e001      	b.n	8007558 <put_fat+0xbc>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	b2db      	uxtb	r3, r3
 8007558:	697a      	ldr	r2, [r7, #20]
 800755a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2201      	movs	r2, #1
 8007560:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	899b      	ldrh	r3, [r3, #12]
 800756a:	4619      	mov	r1, r3
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007572:	4413      	add	r3, r2
 8007574:	4619      	mov	r1, r3
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f7ff fe00 	bl	800717c <move_window>
 800757c:	4603      	mov	r3, r0
 800757e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007580:	7ffb      	ldrb	r3, [r7, #31]
 8007582:	2b00      	cmp	r3, #0
 8007584:	f040 809a 	bne.w	80076bc <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	899b      	ldrh	r3, [r3, #12]
 8007592:	461a      	mov	r2, r3
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	fbb3 f0f2 	udiv	r0, r3, r2
 800759a:	fb00 f202 	mul.w	r2, r0, r2
 800759e:	1a9b      	subs	r3, r3, r2
 80075a0:	440b      	add	r3, r1
 80075a2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d003      	beq.n	80075b6 <put_fat+0x11a>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	091b      	lsrs	r3, r3, #4
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	e00e      	b.n	80075d4 <put_fat+0x138>
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	b25b      	sxtb	r3, r3
 80075bc:	f023 030f 	bic.w	r3, r3, #15
 80075c0:	b25a      	sxtb	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	0a1b      	lsrs	r3, r3, #8
 80075c6:	b25b      	sxtb	r3, r3
 80075c8:	f003 030f 	and.w	r3, r3, #15
 80075cc:	b25b      	sxtb	r3, r3
 80075ce:	4313      	orrs	r3, r2
 80075d0:	b25b      	sxtb	r3, r3
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2201      	movs	r2, #1
 80075dc:	70da      	strb	r2, [r3, #3]
			break;
 80075de:	e072      	b.n	80076c6 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	899b      	ldrh	r3, [r3, #12]
 80075e8:	085b      	lsrs	r3, r3, #1
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	4619      	mov	r1, r3
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80075f4:	4413      	add	r3, r2
 80075f6:	4619      	mov	r1, r3
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f7ff fdbf 	bl	800717c <move_window>
 80075fe:	4603      	mov	r3, r0
 8007600:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007602:	7ffb      	ldrb	r3, [r7, #31]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d15b      	bne.n	80076c0 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	005b      	lsls	r3, r3, #1
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	8992      	ldrh	r2, [r2, #12]
 8007616:	fbb3 f0f2 	udiv	r0, r3, r2
 800761a:	fb00 f202 	mul.w	r2, r0, r2
 800761e:	1a9b      	subs	r3, r3, r2
 8007620:	440b      	add	r3, r1
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	b292      	uxth	r2, r2
 8007626:	4611      	mov	r1, r2
 8007628:	4618      	mov	r0, r3
 800762a:	f7ff fb6e 	bl	8006d0a <st_word>
			fs->wflag = 1;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2201      	movs	r2, #1
 8007632:	70da      	strb	r2, [r3, #3]
			break;
 8007634:	e047      	b.n	80076c6 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	899b      	ldrh	r3, [r3, #12]
 800763e:	089b      	lsrs	r3, r3, #2
 8007640:	b29b      	uxth	r3, r3
 8007642:	4619      	mov	r1, r3
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	fbb3 f3f1 	udiv	r3, r3, r1
 800764a:	4413      	add	r3, r2
 800764c:	4619      	mov	r1, r3
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	f7ff fd94 	bl	800717c <move_window>
 8007654:	4603      	mov	r3, r0
 8007656:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007658:	7ffb      	ldrb	r3, [r7, #31]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d132      	bne.n	80076c4 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	8992      	ldrh	r2, [r2, #12]
 8007672:	fbb3 f0f2 	udiv	r0, r3, r2
 8007676:	fb00 f202 	mul.w	r2, r0, r2
 800767a:	1a9b      	subs	r3, r3, r2
 800767c:	440b      	add	r3, r1
 800767e:	4618      	mov	r0, r3
 8007680:	f7ff fb20 	bl	8006cc4 <ld_dword>
 8007684:	4603      	mov	r3, r0
 8007686:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800768a:	4323      	orrs	r3, r4
 800768c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	8992      	ldrh	r2, [r2, #12]
 800769c:	fbb3 f0f2 	udiv	r0, r3, r2
 80076a0:	fb00 f202 	mul.w	r2, r0, r2
 80076a4:	1a9b      	subs	r3, r3, r2
 80076a6:	440b      	add	r3, r1
 80076a8:	6879      	ldr	r1, [r7, #4]
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7ff fb48 	bl	8006d40 <st_dword>
			fs->wflag = 1;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2201      	movs	r2, #1
 80076b4:	70da      	strb	r2, [r3, #3]
			break;
 80076b6:	e006      	b.n	80076c6 <put_fat+0x22a>
			if (res != FR_OK) break;
 80076b8:	bf00      	nop
 80076ba:	e004      	b.n	80076c6 <put_fat+0x22a>
			if (res != FR_OK) break;
 80076bc:	bf00      	nop
 80076be:	e002      	b.n	80076c6 <put_fat+0x22a>
			if (res != FR_OK) break;
 80076c0:	bf00      	nop
 80076c2:	e000      	b.n	80076c6 <put_fat+0x22a>
			if (res != FR_OK) break;
 80076c4:	bf00      	nop
		}
	}
	return res;
 80076c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3724      	adds	r7, #36	@ 0x24
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd90      	pop	{r4, r7, pc}

080076d0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b088      	sub	sp, #32
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80076dc:	2300      	movs	r3, #0
 80076de:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d904      	bls.n	80076f6 <remove_chain+0x26>
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	69db      	ldr	r3, [r3, #28]
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d301      	bcc.n	80076fa <remove_chain+0x2a>
 80076f6:	2302      	movs	r3, #2
 80076f8:	e04b      	b.n	8007792 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00c      	beq.n	800771a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007700:	f04f 32ff 	mov.w	r2, #4294967295
 8007704:	6879      	ldr	r1, [r7, #4]
 8007706:	69b8      	ldr	r0, [r7, #24]
 8007708:	f7ff fec8 	bl	800749c <put_fat>
 800770c:	4603      	mov	r3, r0
 800770e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007710:	7ffb      	ldrb	r3, [r7, #31]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <remove_chain+0x4a>
 8007716:	7ffb      	ldrb	r3, [r7, #31]
 8007718:	e03b      	b.n	8007792 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800771a:	68b9      	ldr	r1, [r7, #8]
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f7ff fdea 	bl	80072f6 <get_fat>
 8007722:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d031      	beq.n	800778e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d101      	bne.n	8007734 <remove_chain+0x64>
 8007730:	2302      	movs	r3, #2
 8007732:	e02e      	b.n	8007792 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773a:	d101      	bne.n	8007740 <remove_chain+0x70>
 800773c:	2301      	movs	r3, #1
 800773e:	e028      	b.n	8007792 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007740:	2200      	movs	r2, #0
 8007742:	68b9      	ldr	r1, [r7, #8]
 8007744:	69b8      	ldr	r0, [r7, #24]
 8007746:	f7ff fea9 	bl	800749c <put_fat>
 800774a:	4603      	mov	r3, r0
 800774c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800774e:	7ffb      	ldrb	r3, [r7, #31]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d001      	beq.n	8007758 <remove_chain+0x88>
 8007754:	7ffb      	ldrb	r3, [r7, #31]
 8007756:	e01c      	b.n	8007792 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	699a      	ldr	r2, [r3, #24]
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	69db      	ldr	r3, [r3, #28]
 8007760:	3b02      	subs	r3, #2
 8007762:	429a      	cmp	r2, r3
 8007764:	d20b      	bcs.n	800777e <remove_chain+0xae>
			fs->free_clst++;
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	1c5a      	adds	r2, r3, #1
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	791b      	ldrb	r3, [r3, #4]
 8007774:	f043 0301 	orr.w	r3, r3, #1
 8007778:	b2da      	uxtb	r2, r3
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	69db      	ldr	r3, [r3, #28]
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	429a      	cmp	r2, r3
 800778a:	d3c6      	bcc.n	800771a <remove_chain+0x4a>
 800778c:	e000      	b.n	8007790 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800778e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3720      	adds	r7, #32
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b088      	sub	sp, #32
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d10d      	bne.n	80077cc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	695b      	ldr	r3, [r3, #20]
 80077b4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d004      	beq.n	80077c6 <create_chain+0x2c>
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	69db      	ldr	r3, [r3, #28]
 80077c0:	69ba      	ldr	r2, [r7, #24]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d31b      	bcc.n	80077fe <create_chain+0x64>
 80077c6:	2301      	movs	r3, #1
 80077c8:	61bb      	str	r3, [r7, #24]
 80077ca:	e018      	b.n	80077fe <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f7ff fd91 	bl	80072f6 <get_fat>
 80077d4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d801      	bhi.n	80077e0 <create_chain+0x46>
 80077dc:	2301      	movs	r3, #1
 80077de:	e070      	b.n	80078c2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e6:	d101      	bne.n	80077ec <create_chain+0x52>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	e06a      	b.n	80078c2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	69db      	ldr	r3, [r3, #28]
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d201      	bcs.n	80077fa <create_chain+0x60>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	e063      	b.n	80078c2 <create_chain+0x128>
		scl = clst;
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	3301      	adds	r3, #1
 8007806:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	69db      	ldr	r3, [r3, #28]
 800780c:	69fa      	ldr	r2, [r7, #28]
 800780e:	429a      	cmp	r2, r3
 8007810:	d307      	bcc.n	8007822 <create_chain+0x88>
				ncl = 2;
 8007812:	2302      	movs	r3, #2
 8007814:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007816:	69fa      	ldr	r2, [r7, #28]
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	429a      	cmp	r2, r3
 800781c:	d901      	bls.n	8007822 <create_chain+0x88>
 800781e:	2300      	movs	r3, #0
 8007820:	e04f      	b.n	80078c2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007822:	69f9      	ldr	r1, [r7, #28]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7ff fd66 	bl	80072f6 <get_fat>
 800782a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00e      	beq.n	8007850 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d003      	beq.n	8007840 <create_chain+0xa6>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800783e:	d101      	bne.n	8007844 <create_chain+0xaa>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	e03e      	b.n	80078c2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007844:	69fa      	ldr	r2, [r7, #28]
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	429a      	cmp	r2, r3
 800784a:	d1da      	bne.n	8007802 <create_chain+0x68>
 800784c:	2300      	movs	r3, #0
 800784e:	e038      	b.n	80078c2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007850:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007852:	f04f 32ff 	mov.w	r2, #4294967295
 8007856:	69f9      	ldr	r1, [r7, #28]
 8007858:	6938      	ldr	r0, [r7, #16]
 800785a:	f7ff fe1f 	bl	800749c <put_fat>
 800785e:	4603      	mov	r3, r0
 8007860:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007862:	7dfb      	ldrb	r3, [r7, #23]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d109      	bne.n	800787c <create_chain+0xe2>
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d006      	beq.n	800787c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800786e:	69fa      	ldr	r2, [r7, #28]
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6938      	ldr	r0, [r7, #16]
 8007874:	f7ff fe12 	bl	800749c <put_fat>
 8007878:	4603      	mov	r3, r0
 800787a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800787c:	7dfb      	ldrb	r3, [r7, #23]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d116      	bne.n	80078b0 <create_chain+0x116>
		fs->last_clst = ncl;
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	69fa      	ldr	r2, [r7, #28]
 8007886:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	699a      	ldr	r2, [r3, #24]
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	69db      	ldr	r3, [r3, #28]
 8007890:	3b02      	subs	r3, #2
 8007892:	429a      	cmp	r2, r3
 8007894:	d804      	bhi.n	80078a0 <create_chain+0x106>
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	1e5a      	subs	r2, r3, #1
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	791b      	ldrb	r3, [r3, #4]
 80078a4:	f043 0301 	orr.w	r3, r3, #1
 80078a8:	b2da      	uxtb	r2, r3
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	711a      	strb	r2, [r3, #4]
 80078ae:	e007      	b.n	80078c0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80078b0:	7dfb      	ldrb	r3, [r7, #23]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d102      	bne.n	80078bc <create_chain+0x122>
 80078b6:	f04f 33ff 	mov.w	r3, #4294967295
 80078ba:	e000      	b.n	80078be <create_chain+0x124>
 80078bc:	2301      	movs	r3, #1
 80078be:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80078c0:	69fb      	ldr	r3, [r7, #28]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3720      	adds	r7, #32
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80078ca:	b480      	push	{r7}
 80078cc:	b087      	sub	sp, #28
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
 80078d2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078de:	3304      	adds	r3, #4
 80078e0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	899b      	ldrh	r3, [r3, #12]
 80078e6:	461a      	mov	r2, r3
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	8952      	ldrh	r2, [r2, #10]
 80078f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80078f6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	1d1a      	adds	r2, r3, #4
 80078fc:	613a      	str	r2, [r7, #16]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d101      	bne.n	800790c <clmt_clust+0x42>
 8007908:	2300      	movs	r3, #0
 800790a:	e010      	b.n	800792e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800790c:	697a      	ldr	r2, [r7, #20]
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	429a      	cmp	r2, r3
 8007912:	d307      	bcc.n	8007924 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007914:	697a      	ldr	r2, [r7, #20]
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	617b      	str	r3, [r7, #20]
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	3304      	adds	r3, #4
 8007920:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007922:	e7e9      	b.n	80078f8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007924:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	4413      	add	r3, r2
}
 800792e:	4618      	mov	r0, r3
 8007930:	371c      	adds	r7, #28
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b086      	sub	sp, #24
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007950:	d204      	bcs.n	800795c <dir_sdi+0x22>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	f003 031f 	and.w	r3, r3, #31
 8007958:	2b00      	cmp	r3, #0
 800795a:	d001      	beq.n	8007960 <dir_sdi+0x26>
		return FR_INT_ERR;
 800795c:	2302      	movs	r3, #2
 800795e:	e071      	b.n	8007a44 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	683a      	ldr	r2, [r7, #0]
 8007964:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d106      	bne.n	8007980 <dir_sdi+0x46>
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	2b02      	cmp	r3, #2
 8007978:	d902      	bls.n	8007980 <dir_sdi+0x46>
		clst = fs->dirbase;
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800797e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10c      	bne.n	80079a0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	095b      	lsrs	r3, r3, #5
 800798a:	693a      	ldr	r2, [r7, #16]
 800798c:	8912      	ldrh	r2, [r2, #8]
 800798e:	4293      	cmp	r3, r2
 8007990:	d301      	bcc.n	8007996 <dir_sdi+0x5c>
 8007992:	2302      	movs	r3, #2
 8007994:	e056      	b.n	8007a44 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	61da      	str	r2, [r3, #28]
 800799e:	e02d      	b.n	80079fc <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	895b      	ldrh	r3, [r3, #10]
 80079a4:	461a      	mov	r2, r3
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	899b      	ldrh	r3, [r3, #12]
 80079aa:	fb02 f303 	mul.w	r3, r2, r3
 80079ae:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80079b0:	e019      	b.n	80079e6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6979      	ldr	r1, [r7, #20]
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7ff fc9d 	bl	80072f6 <get_fat>
 80079bc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c4:	d101      	bne.n	80079ca <dir_sdi+0x90>
 80079c6:	2301      	movs	r3, #1
 80079c8:	e03c      	b.n	8007a44 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d904      	bls.n	80079da <dir_sdi+0xa0>
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	69db      	ldr	r3, [r3, #28]
 80079d4:	697a      	ldr	r2, [r7, #20]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d301      	bcc.n	80079de <dir_sdi+0xa4>
 80079da:	2302      	movs	r3, #2
 80079dc:	e032      	b.n	8007a44 <dir_sdi+0x10a>
			ofs -= csz;
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80079e6:	683a      	ldr	r2, [r7, #0]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d2e1      	bcs.n	80079b2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80079ee:	6979      	ldr	r1, [r7, #20]
 80079f0:	6938      	ldr	r0, [r7, #16]
 80079f2:	f7ff fc61 	bl	80072b8 <clust2sect>
 80079f6:	4602      	mov	r2, r0
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	69db      	ldr	r3, [r3, #28]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d101      	bne.n	8007a0e <dir_sdi+0xd4>
 8007a0a:	2302      	movs	r3, #2
 8007a0c:	e01a      	b.n	8007a44 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	69da      	ldr	r2, [r3, #28]
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	899b      	ldrh	r3, [r3, #12]
 8007a16:	4619      	mov	r1, r3
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a1e:	441a      	add	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	899b      	ldrh	r3, [r3, #12]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a36:	fb00 f202 	mul.w	r2, r0, r2
 8007a3a:	1a9b      	subs	r3, r3, r2
 8007a3c:	18ca      	adds	r2, r1, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3718      	adds	r7, #24
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	695b      	ldr	r3, [r3, #20]
 8007a60:	3320      	adds	r3, #32
 8007a62:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	69db      	ldr	r3, [r3, #28]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d003      	beq.n	8007a74 <dir_next+0x28>
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a72:	d301      	bcc.n	8007a78 <dir_next+0x2c>
 8007a74:	2304      	movs	r3, #4
 8007a76:	e0bb      	b.n	8007bf0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	899b      	ldrh	r3, [r3, #12]
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a84:	fb01 f202 	mul.w	r2, r1, r2
 8007a88:	1a9b      	subs	r3, r3, r2
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f040 809d 	bne.w	8007bca <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	69db      	ldr	r3, [r3, #28]
 8007a94:	1c5a      	adds	r2, r3, #1
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10b      	bne.n	8007aba <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	095b      	lsrs	r3, r3, #5
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	8912      	ldrh	r2, [r2, #8]
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	f0c0 808d 	bcc.w	8007bca <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	61da      	str	r2, [r3, #28]
 8007ab6:	2304      	movs	r3, #4
 8007ab8:	e09a      	b.n	8007bf0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	899b      	ldrh	r3, [r3, #12]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	8952      	ldrh	r2, [r2, #10]
 8007aca:	3a01      	subs	r2, #1
 8007acc:	4013      	ands	r3, r2
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d17b      	bne.n	8007bca <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	4610      	mov	r0, r2
 8007adc:	f7ff fc0b 	bl	80072f6 <get_fat>
 8007ae0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d801      	bhi.n	8007aec <dir_next+0xa0>
 8007ae8:	2302      	movs	r3, #2
 8007aea:	e081      	b.n	8007bf0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af2:	d101      	bne.n	8007af8 <dir_next+0xac>
 8007af4:	2301      	movs	r3, #1
 8007af6:	e07b      	b.n	8007bf0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	69db      	ldr	r3, [r3, #28]
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d359      	bcc.n	8007bb6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d104      	bne.n	8007b12 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	61da      	str	r2, [r3, #28]
 8007b0e:	2304      	movs	r3, #4
 8007b10:	e06e      	b.n	8007bf0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	4619      	mov	r1, r3
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	f7ff fe3d 	bl	800779a <create_chain>
 8007b20:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d101      	bne.n	8007b2c <dir_next+0xe0>
 8007b28:	2307      	movs	r3, #7
 8007b2a:	e061      	b.n	8007bf0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d101      	bne.n	8007b36 <dir_next+0xea>
 8007b32:	2302      	movs	r3, #2
 8007b34:	e05c      	b.n	8007bf0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b3c:	d101      	bne.n	8007b42 <dir_next+0xf6>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e056      	b.n	8007bf0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f7ff fad6 	bl	80070f4 <sync_window>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d001      	beq.n	8007b52 <dir_next+0x106>
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e04e      	b.n	8007bf0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	899b      	ldrh	r3, [r3, #12]
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	2100      	movs	r1, #0
 8007b60:	f7ff f93b 	bl	8006dda <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007b64:	2300      	movs	r3, #0
 8007b66:	613b      	str	r3, [r7, #16]
 8007b68:	6979      	ldr	r1, [r7, #20]
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f7ff fba4 	bl	80072b8 <clust2sect>
 8007b70:	4602      	mov	r2, r0
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	635a      	str	r2, [r3, #52]	@ 0x34
 8007b76:	e012      	b.n	8007b9e <dir_next+0x152>
						fs->wflag = 1;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f7ff fab8 	bl	80070f4 <sync_window>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d001      	beq.n	8007b8e <dir_next+0x142>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e030      	b.n	8007bf0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	3301      	adds	r3, #1
 8007b92:	613b      	str	r3, [r7, #16]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b98:	1c5a      	adds	r2, r3, #1
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	895b      	ldrh	r3, [r3, #10]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d3e6      	bcc.n	8007b78 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	1ad2      	subs	r2, r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	697a      	ldr	r2, [r7, #20]
 8007bba:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007bbc:	6979      	ldr	r1, [r7, #20]
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f7ff fb7a 	bl	80072b8 <clust2sect>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	899b      	ldrh	r3, [r3, #12]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	fbb3 f0f2 	udiv	r0, r3, r2
 8007be2:	fb00 f202 	mul.w	r2, r0, r2
 8007be6:	1a9b      	subs	r3, r3, r2
 8007be8:	18ca      	adds	r2, r1, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3718      	adds	r7, #24
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b086      	sub	sp, #24
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007c08:	2100      	movs	r1, #0
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f7ff fe95 	bl	800793a <dir_sdi>
 8007c10:	4603      	mov	r3, r0
 8007c12:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007c14:	7dfb      	ldrb	r3, [r7, #23]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d12b      	bne.n	8007c72 <dir_alloc+0x7a>
		n = 0;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	4619      	mov	r1, r3
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f7ff faa9 	bl	800717c <move_window>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007c2e:	7dfb      	ldrb	r3, [r7, #23]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d11d      	bne.n	8007c70 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a1b      	ldr	r3, [r3, #32]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	2be5      	cmp	r3, #229	@ 0xe5
 8007c3c:	d004      	beq.n	8007c48 <dir_alloc+0x50>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a1b      	ldr	r3, [r3, #32]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d107      	bne.n	8007c58 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	613b      	str	r3, [r7, #16]
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d102      	bne.n	8007c5c <dir_alloc+0x64>
 8007c56:	e00c      	b.n	8007c72 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007c58:	2300      	movs	r3, #0
 8007c5a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f7ff fef4 	bl	8007a4c <dir_next>
 8007c64:	4603      	mov	r3, r0
 8007c66:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007c68:	7dfb      	ldrb	r3, [r7, #23]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d0d7      	beq.n	8007c1e <dir_alloc+0x26>
 8007c6e:	e000      	b.n	8007c72 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007c70:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007c72:	7dfb      	ldrb	r3, [r7, #23]
 8007c74:	2b04      	cmp	r3, #4
 8007c76:	d101      	bne.n	8007c7c <dir_alloc+0x84>
 8007c78:	2307      	movs	r3, #7
 8007c7a:	75fb      	strb	r3, [r7, #23]
	return res;
 8007c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3718      	adds	r7, #24
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b084      	sub	sp, #16
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	331a      	adds	r3, #26
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7fe fffd 	bl	8006c94 <ld_word>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	2b03      	cmp	r3, #3
 8007ca4:	d109      	bne.n	8007cba <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	3314      	adds	r3, #20
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fe fff2 	bl	8006c94 <ld_word>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	041b      	lsls	r3, r3, #16
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007cba:	68fb      	ldr	r3, [r7, #12]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	331a      	adds	r3, #26
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	b292      	uxth	r2, r2
 8007cd8:	4611      	mov	r1, r2
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7ff f815 	bl	8006d0a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	2b03      	cmp	r3, #3
 8007ce6:	d109      	bne.n	8007cfc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f103 0214 	add.w	r2, r3, #20
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	0c1b      	lsrs	r3, r3, #16
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	4610      	mov	r0, r2
 8007cf8:	f7ff f807 	bl	8006d0a <st_word>
	}
}
 8007cfc:	bf00      	nop
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007d04:	b590      	push	{r4, r7, lr}
 8007d06:	b087      	sub	sp, #28
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	331a      	adds	r3, #26
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fe ffbe 	bl	8006c94 <ld_word>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <cmp_lfn+0x1e>
 8007d1e:	2300      	movs	r3, #0
 8007d20:	e059      	b.n	8007dd6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d2a:	1e5a      	subs	r2, r3, #1
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	005b      	lsls	r3, r3, #1
 8007d30:	4413      	add	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	4413      	add	r3, r2
 8007d36:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007d38:	2301      	movs	r3, #1
 8007d3a:	81fb      	strh	r3, [r7, #14]
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	613b      	str	r3, [r7, #16]
 8007d40:	e033      	b.n	8007daa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007d42:	4a27      	ldr	r2, [pc, #156]	@ (8007de0 <cmp_lfn+0xdc>)
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	4413      	add	r3, r2
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	4413      	add	r3, r2
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7fe ff9f 	bl	8006c94 <ld_word>
 8007d56:	4603      	mov	r3, r0
 8007d58:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007d5a:	89fb      	ldrh	r3, [r7, #14]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d01a      	beq.n	8007d96 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	2bfe      	cmp	r3, #254	@ 0xfe
 8007d64:	d812      	bhi.n	8007d8c <cmp_lfn+0x88>
 8007d66:	89bb      	ldrh	r3, [r7, #12]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f001 fd51 	bl	8009810 <ff_wtoupper>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	461c      	mov	r4, r3
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	1c5a      	adds	r2, r3, #1
 8007d76:	617a      	str	r2, [r7, #20]
 8007d78:	005b      	lsls	r3, r3, #1
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	881b      	ldrh	r3, [r3, #0]
 8007d80:	4618      	mov	r0, r3
 8007d82:	f001 fd45 	bl	8009810 <ff_wtoupper>
 8007d86:	4603      	mov	r3, r0
 8007d88:	429c      	cmp	r4, r3
 8007d8a:	d001      	beq.n	8007d90 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	e022      	b.n	8007dd6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8007d90:	89bb      	ldrh	r3, [r7, #12]
 8007d92:	81fb      	strh	r3, [r7, #14]
 8007d94:	e006      	b.n	8007da4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007d96:	89bb      	ldrh	r3, [r7, #12]
 8007d98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d001      	beq.n	8007da4 <cmp_lfn+0xa0>
 8007da0:	2300      	movs	r3, #0
 8007da2:	e018      	b.n	8007dd6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	3301      	adds	r3, #1
 8007da8:	613b      	str	r3, [r7, #16]
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	2b0c      	cmp	r3, #12
 8007dae:	d9c8      	bls.n	8007d42 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00b      	beq.n	8007dd4 <cmp_lfn+0xd0>
 8007dbc:	89fb      	ldrh	r3, [r7, #14]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d008      	beq.n	8007dd4 <cmp_lfn+0xd0>
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	005b      	lsls	r3, r3, #1
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	4413      	add	r3, r2
 8007dca:	881b      	ldrh	r3, [r3, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d001      	beq.n	8007dd4 <cmp_lfn+0xd0>
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	e000      	b.n	8007dd6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007dd4:	2301      	movs	r3, #1
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	371c      	adds	r7, #28
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd90      	pop	{r4, r7, pc}
 8007dde:	bf00      	nop
 8007de0:	0800a43c 	.word	0x0800a43c

08007de4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b088      	sub	sp, #32
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	4611      	mov	r1, r2
 8007df0:	461a      	mov	r2, r3
 8007df2:	460b      	mov	r3, r1
 8007df4:	71fb      	strb	r3, [r7, #7]
 8007df6:	4613      	mov	r3, r2
 8007df8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	330d      	adds	r3, #13
 8007dfe:	79ba      	ldrb	r2, [r7, #6]
 8007e00:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	330b      	adds	r3, #11
 8007e06:	220f      	movs	r2, #15
 8007e08:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	330c      	adds	r3, #12
 8007e0e:	2200      	movs	r2, #0
 8007e10:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	331a      	adds	r3, #26
 8007e16:	2100      	movs	r1, #0
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7fe ff76 	bl	8006d0a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007e1e:	79fb      	ldrb	r3, [r7, #7]
 8007e20:	1e5a      	subs	r2, r3, #1
 8007e22:	4613      	mov	r3, r2
 8007e24:	005b      	lsls	r3, r3, #1
 8007e26:	4413      	add	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	82fb      	strh	r3, [r7, #22]
 8007e32:	2300      	movs	r3, #0
 8007e34:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007e36:	8afb      	ldrh	r3, [r7, #22]
 8007e38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d007      	beq.n	8007e50 <put_lfn+0x6c>
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	1c5a      	adds	r2, r3, #1
 8007e44:	61fa      	str	r2, [r7, #28]
 8007e46:	005b      	lsls	r3, r3, #1
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	881b      	ldrh	r3, [r3, #0]
 8007e4e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007e50:	4a17      	ldr	r2, [pc, #92]	@ (8007eb0 <put_lfn+0xcc>)
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	4413      	add	r3, r2
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	8afa      	ldrh	r2, [r7, #22]
 8007e60:	4611      	mov	r1, r2
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7fe ff51 	bl	8006d0a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007e68:	8afb      	ldrh	r3, [r7, #22]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d102      	bne.n	8007e74 <put_lfn+0x90>
 8007e6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007e72:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	3301      	adds	r3, #1
 8007e78:	61bb      	str	r3, [r7, #24]
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	2b0c      	cmp	r3, #12
 8007e7e:	d9da      	bls.n	8007e36 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007e80:	8afb      	ldrh	r3, [r7, #22]
 8007e82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d006      	beq.n	8007e98 <put_lfn+0xb4>
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	005b      	lsls	r3, r3, #1
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	4413      	add	r3, r2
 8007e92:	881b      	ldrh	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d103      	bne.n	8007ea0 <put_lfn+0xbc>
 8007e98:	79fb      	ldrb	r3, [r7, #7]
 8007e9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e9e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	79fa      	ldrb	r2, [r7, #7]
 8007ea4:	701a      	strb	r2, [r3, #0]
}
 8007ea6:	bf00      	nop
 8007ea8:	3720      	adds	r7, #32
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	0800a43c 	.word	0x0800a43c

08007eb4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b08c      	sub	sp, #48	@ 0x30
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	607a      	str	r2, [r7, #4]
 8007ec0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007ec2:	220b      	movs	r2, #11
 8007ec4:	68b9      	ldr	r1, [r7, #8]
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f7fe ff66 	bl	8006d98 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	2b05      	cmp	r3, #5
 8007ed0:	d92b      	bls.n	8007f2a <gen_numname+0x76>
		sr = seq;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007ed6:	e022      	b.n	8007f1e <gen_numname+0x6a>
			wc = *lfn++;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	1c9a      	adds	r2, r3, #2
 8007edc:	607a      	str	r2, [r7, #4]
 8007ede:	881b      	ldrh	r3, [r3, #0]
 8007ee0:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ee6:	e017      	b.n	8007f18 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	005a      	lsls	r2, r3, #1
 8007eec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007eee:	f003 0301 	and.w	r3, r3, #1
 8007ef2:	4413      	add	r3, r2
 8007ef4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007ef6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007ef8:	085b      	lsrs	r3, r3, #1
 8007efa:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d005      	beq.n	8007f12 <gen_numname+0x5e>
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8007f0c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8007f10:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f14:	3301      	adds	r3, #1
 8007f16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f1a:	2b0f      	cmp	r3, #15
 8007f1c:	d9e4      	bls.n	8007ee8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	881b      	ldrh	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1d8      	bne.n	8007ed8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007f2a:	2307      	movs	r3, #7
 8007f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	f003 030f 	and.w	r3, r3, #15
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	3330      	adds	r3, #48	@ 0x30
 8007f3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8007f3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007f42:	2b39      	cmp	r3, #57	@ 0x39
 8007f44:	d904      	bls.n	8007f50 <gen_numname+0x9c>
 8007f46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007f4a:	3307      	adds	r3, #7
 8007f4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8007f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f52:	1e5a      	subs	r2, r3, #1
 8007f54:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007f56:	3330      	adds	r3, #48	@ 0x30
 8007f58:	443b      	add	r3, r7
 8007f5a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8007f5e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	091b      	lsrs	r3, r3, #4
 8007f66:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1df      	bne.n	8007f2e <gen_numname+0x7a>
	ns[i] = '~';
 8007f6e:	f107 0214 	add.w	r2, r7, #20
 8007f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f74:	4413      	add	r3, r2
 8007f76:	227e      	movs	r2, #126	@ 0x7e
 8007f78:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f7e:	e002      	b.n	8007f86 <gen_numname+0xd2>
 8007f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f82:	3301      	adds	r3, #1
 8007f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d205      	bcs.n	8007f9a <gen_numname+0xe6>
 8007f8e:	68fa      	ldr	r2, [r7, #12]
 8007f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f92:	4413      	add	r3, r2
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	2b20      	cmp	r3, #32
 8007f98:	d1f2      	bne.n	8007f80 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f9c:	2b07      	cmp	r3, #7
 8007f9e:	d807      	bhi.n	8007fb0 <gen_numname+0xfc>
 8007fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa2:	1c5a      	adds	r2, r3, #1
 8007fa4:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007fa6:	3330      	adds	r3, #48	@ 0x30
 8007fa8:	443b      	add	r3, r7
 8007faa:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007fae:	e000      	b.n	8007fb2 <gen_numname+0xfe>
 8007fb0:	2120      	movs	r1, #32
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb4:	1c5a      	adds	r2, r3, #1
 8007fb6:	627a      	str	r2, [r7, #36]	@ 0x24
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	4413      	add	r3, r2
 8007fbc:	460a      	mov	r2, r1
 8007fbe:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc2:	2b07      	cmp	r3, #7
 8007fc4:	d9e9      	bls.n	8007f9a <gen_numname+0xe6>
}
 8007fc6:	bf00      	nop
 8007fc8:	bf00      	nop
 8007fca:	3730      	adds	r7, #48	@ 0x30
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007fdc:	230b      	movs	r3, #11
 8007fde:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	0852      	lsrs	r2, r2, #1
 8007fe6:	01db      	lsls	r3, r3, #7
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	b2da      	uxtb	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	1c59      	adds	r1, r3, #1
 8007ff0:	6079      	str	r1, [r7, #4]
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	60bb      	str	r3, [r7, #8]
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1ed      	bne.n	8007fe0 <sum_sfn+0x10>
	return sum;
 8008004:	7bfb      	ldrb	r3, [r7, #15]
}
 8008006:	4618      	mov	r0, r3
 8008008:	3714      	adds	r7, #20
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b086      	sub	sp, #24
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008020:	2100      	movs	r1, #0
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f7ff fc89 	bl	800793a <dir_sdi>
 8008028:	4603      	mov	r3, r0
 800802a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800802c:	7dfb      	ldrb	r3, [r7, #23]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d001      	beq.n	8008036 <dir_find+0x24>
 8008032:	7dfb      	ldrb	r3, [r7, #23]
 8008034:	e0a9      	b.n	800818a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008036:	23ff      	movs	r3, #255	@ 0xff
 8008038:	753b      	strb	r3, [r7, #20]
 800803a:	7d3b      	ldrb	r3, [r7, #20]
 800803c:	757b      	strb	r3, [r7, #21]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f04f 32ff 	mov.w	r2, #4294967295
 8008044:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	4619      	mov	r1, r3
 800804c:	6938      	ldr	r0, [r7, #16]
 800804e:	f7ff f895 	bl	800717c <move_window>
 8008052:	4603      	mov	r3, r0
 8008054:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008056:	7dfb      	ldrb	r3, [r7, #23]
 8008058:	2b00      	cmp	r3, #0
 800805a:	f040 8090 	bne.w	800817e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008066:	7dbb      	ldrb	r3, [r7, #22]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d102      	bne.n	8008072 <dir_find+0x60>
 800806c:	2304      	movs	r3, #4
 800806e:	75fb      	strb	r3, [r7, #23]
 8008070:	e08a      	b.n	8008188 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	330b      	adds	r3, #11
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800807e:	73fb      	strb	r3, [r7, #15]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	7bfa      	ldrb	r2, [r7, #15]
 8008084:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008086:	7dbb      	ldrb	r3, [r7, #22]
 8008088:	2be5      	cmp	r3, #229	@ 0xe5
 800808a:	d007      	beq.n	800809c <dir_find+0x8a>
 800808c:	7bfb      	ldrb	r3, [r7, #15]
 800808e:	f003 0308 	and.w	r3, r3, #8
 8008092:	2b00      	cmp	r3, #0
 8008094:	d009      	beq.n	80080aa <dir_find+0x98>
 8008096:	7bfb      	ldrb	r3, [r7, #15]
 8008098:	2b0f      	cmp	r3, #15
 800809a:	d006      	beq.n	80080aa <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800809c:	23ff      	movs	r3, #255	@ 0xff
 800809e:	757b      	strb	r3, [r7, #21]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f04f 32ff 	mov.w	r2, #4294967295
 80080a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80080a8:	e05e      	b.n	8008168 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80080aa:	7bfb      	ldrb	r3, [r7, #15]
 80080ac:	2b0f      	cmp	r3, #15
 80080ae:	d136      	bne.n	800811e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80080b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d154      	bne.n	8008168 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80080be:	7dbb      	ldrb	r3, [r7, #22]
 80080c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00d      	beq.n	80080e4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a1b      	ldr	r3, [r3, #32]
 80080cc:	7b5b      	ldrb	r3, [r3, #13]
 80080ce:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80080d0:	7dbb      	ldrb	r3, [r7, #22]
 80080d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080d6:	75bb      	strb	r3, [r7, #22]
 80080d8:	7dbb      	ldrb	r3, [r7, #22]
 80080da:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	695a      	ldr	r2, [r3, #20]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80080e4:	7dba      	ldrb	r2, [r7, #22]
 80080e6:	7d7b      	ldrb	r3, [r7, #21]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d115      	bne.n	8008118 <dir_find+0x106>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a1b      	ldr	r3, [r3, #32]
 80080f0:	330d      	adds	r3, #13
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	7d3a      	ldrb	r2, [r7, #20]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d10e      	bne.n	8008118 <dir_find+0x106>
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	691a      	ldr	r2, [r3, #16]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a1b      	ldr	r3, [r3, #32]
 8008102:	4619      	mov	r1, r3
 8008104:	4610      	mov	r0, r2
 8008106:	f7ff fdfd 	bl	8007d04 <cmp_lfn>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d003      	beq.n	8008118 <dir_find+0x106>
 8008110:	7d7b      	ldrb	r3, [r7, #21]
 8008112:	3b01      	subs	r3, #1
 8008114:	b2db      	uxtb	r3, r3
 8008116:	e000      	b.n	800811a <dir_find+0x108>
 8008118:	23ff      	movs	r3, #255	@ 0xff
 800811a:	757b      	strb	r3, [r7, #21]
 800811c:	e024      	b.n	8008168 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800811e:	7d7b      	ldrb	r3, [r7, #21]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d109      	bne.n	8008138 <dir_find+0x126>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a1b      	ldr	r3, [r3, #32]
 8008128:	4618      	mov	r0, r3
 800812a:	f7ff ff51 	bl	8007fd0 <sum_sfn>
 800812e:	4603      	mov	r3, r0
 8008130:	461a      	mov	r2, r3
 8008132:	7d3b      	ldrb	r3, [r7, #20]
 8008134:	4293      	cmp	r3, r2
 8008136:	d024      	beq.n	8008182 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800813e:	f003 0301 	and.w	r3, r3, #1
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10a      	bne.n	800815c <dir_find+0x14a>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a18      	ldr	r0, [r3, #32]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	3324      	adds	r3, #36	@ 0x24
 800814e:	220b      	movs	r2, #11
 8008150:	4619      	mov	r1, r3
 8008152:	f7fe fe5d 	bl	8006e10 <mem_cmp>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d014      	beq.n	8008186 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800815c:	23ff      	movs	r3, #255	@ 0xff
 800815e:	757b      	strb	r3, [r7, #21]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f04f 32ff 	mov.w	r2, #4294967295
 8008166:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008168:	2100      	movs	r1, #0
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f7ff fc6e 	bl	8007a4c <dir_next>
 8008170:	4603      	mov	r3, r0
 8008172:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008174:	7dfb      	ldrb	r3, [r7, #23]
 8008176:	2b00      	cmp	r3, #0
 8008178:	f43f af65 	beq.w	8008046 <dir_find+0x34>
 800817c:	e004      	b.n	8008188 <dir_find+0x176>
		if (res != FR_OK) break;
 800817e:	bf00      	nop
 8008180:	e002      	b.n	8008188 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008182:	bf00      	nop
 8008184:	e000      	b.n	8008188 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008186:	bf00      	nop

	return res;
 8008188:	7dfb      	ldrb	r3, [r7, #23]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3718      	adds	r7, #24
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
	...

08008194 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b08c      	sub	sp, #48	@ 0x30
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80081a8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d001      	beq.n	80081b4 <dir_register+0x20>
 80081b0:	2306      	movs	r3, #6
 80081b2:	e0e0      	b.n	8008376 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80081b4:	2300      	movs	r3, #0
 80081b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80081b8:	e002      	b.n	80081c0 <dir_register+0x2c>
 80081ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081bc:	3301      	adds	r3, #1
 80081be:	627b      	str	r3, [r7, #36]	@ 0x24
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	691a      	ldr	r2, [r3, #16]
 80081c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c6:	005b      	lsls	r3, r3, #1
 80081c8:	4413      	add	r3, r2
 80081ca:	881b      	ldrh	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d1f4      	bne.n	80081ba <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80081d6:	f107 030c 	add.w	r3, r7, #12
 80081da:	220c      	movs	r2, #12
 80081dc:	4618      	mov	r0, r3
 80081de:	f7fe fddb 	bl	8006d98 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80081e2:	7dfb      	ldrb	r3, [r7, #23]
 80081e4:	f003 0301 	and.w	r3, r3, #1
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d032      	beq.n	8008252 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2240      	movs	r2, #64	@ 0x40
 80081f0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 80081f4:	2301      	movs	r3, #1
 80081f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081f8:	e016      	b.n	8008228 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	691a      	ldr	r2, [r3, #16]
 8008204:	f107 010c 	add.w	r1, r7, #12
 8008208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800820a:	f7ff fe53 	bl	8007eb4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f7ff feff 	bl	8008012 <dir_find>
 8008214:	4603      	mov	r3, r0
 8008216:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800821a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800821e:	2b00      	cmp	r3, #0
 8008220:	d106      	bne.n	8008230 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008224:	3301      	adds	r3, #1
 8008226:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800822a:	2b63      	cmp	r3, #99	@ 0x63
 800822c:	d9e5      	bls.n	80081fa <dir_register+0x66>
 800822e:	e000      	b.n	8008232 <dir_register+0x9e>
			if (res != FR_OK) break;
 8008230:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008234:	2b64      	cmp	r3, #100	@ 0x64
 8008236:	d101      	bne.n	800823c <dir_register+0xa8>
 8008238:	2307      	movs	r3, #7
 800823a:	e09c      	b.n	8008376 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800823c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008240:	2b04      	cmp	r3, #4
 8008242:	d002      	beq.n	800824a <dir_register+0xb6>
 8008244:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008248:	e095      	b.n	8008376 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800824a:	7dfa      	ldrb	r2, [r7, #23]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008252:	7dfb      	ldrb	r3, [r7, #23]
 8008254:	f003 0302 	and.w	r3, r3, #2
 8008258:	2b00      	cmp	r3, #0
 800825a:	d007      	beq.n	800826c <dir_register+0xd8>
 800825c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800825e:	330c      	adds	r3, #12
 8008260:	4a47      	ldr	r2, [pc, #284]	@ (8008380 <dir_register+0x1ec>)
 8008262:	fba2 2303 	umull	r2, r3, r2, r3
 8008266:	089b      	lsrs	r3, r3, #2
 8008268:	3301      	adds	r3, #1
 800826a:	e000      	b.n	800826e <dir_register+0xda>
 800826c:	2301      	movs	r3, #1
 800826e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008270:	6a39      	ldr	r1, [r7, #32]
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7ff fcc0 	bl	8007bf8 <dir_alloc>
 8008278:	4603      	mov	r3, r0
 800827a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800827e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008282:	2b00      	cmp	r3, #0
 8008284:	d148      	bne.n	8008318 <dir_register+0x184>
 8008286:	6a3b      	ldr	r3, [r7, #32]
 8008288:	3b01      	subs	r3, #1
 800828a:	623b      	str	r3, [r7, #32]
 800828c:	6a3b      	ldr	r3, [r7, #32]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d042      	beq.n	8008318 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	695a      	ldr	r2, [r3, #20]
 8008296:	6a3b      	ldr	r3, [r7, #32]
 8008298:	015b      	lsls	r3, r3, #5
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	4619      	mov	r1, r3
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f7ff fb4b 	bl	800793a <dir_sdi>
 80082a4:	4603      	mov	r3, r0
 80082a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80082aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d132      	bne.n	8008318 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	3324      	adds	r3, #36	@ 0x24
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7ff fe8a 	bl	8007fd0 <sum_sfn>
 80082bc:	4603      	mov	r3, r0
 80082be:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	69db      	ldr	r3, [r3, #28]
 80082c4:	4619      	mov	r1, r3
 80082c6:	69f8      	ldr	r0, [r7, #28]
 80082c8:	f7fe ff58 	bl	800717c <move_window>
 80082cc:	4603      	mov	r3, r0
 80082ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80082d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d11d      	bne.n	8008316 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	6918      	ldr	r0, [r3, #16]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a19      	ldr	r1, [r3, #32]
 80082e2:	6a3b      	ldr	r3, [r7, #32]
 80082e4:	b2da      	uxtb	r2, r3
 80082e6:	7efb      	ldrb	r3, [r7, #27]
 80082e8:	f7ff fd7c 	bl	8007de4 <put_lfn>
				fs->wflag = 1;
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	2201      	movs	r2, #1
 80082f0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80082f2:	2100      	movs	r1, #0
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7ff fba9 	bl	8007a4c <dir_next>
 80082fa:	4603      	mov	r3, r0
 80082fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8008300:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008304:	2b00      	cmp	r3, #0
 8008306:	d107      	bne.n	8008318 <dir_register+0x184>
 8008308:	6a3b      	ldr	r3, [r7, #32]
 800830a:	3b01      	subs	r3, #1
 800830c:	623b      	str	r3, [r7, #32]
 800830e:	6a3b      	ldr	r3, [r7, #32]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1d5      	bne.n	80082c0 <dir_register+0x12c>
 8008314:	e000      	b.n	8008318 <dir_register+0x184>
				if (res != FR_OK) break;
 8008316:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008318:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800831c:	2b00      	cmp	r3, #0
 800831e:	d128      	bne.n	8008372 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	69db      	ldr	r3, [r3, #28]
 8008324:	4619      	mov	r1, r3
 8008326:	69f8      	ldr	r0, [r7, #28]
 8008328:	f7fe ff28 	bl	800717c <move_window>
 800832c:	4603      	mov	r3, r0
 800832e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8008332:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008336:	2b00      	cmp	r3, #0
 8008338:	d11b      	bne.n	8008372 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a1b      	ldr	r3, [r3, #32]
 800833e:	2220      	movs	r2, #32
 8008340:	2100      	movs	r1, #0
 8008342:	4618      	mov	r0, r3
 8008344:	f7fe fd49 	bl	8006dda <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6a18      	ldr	r0, [r3, #32]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	3324      	adds	r3, #36	@ 0x24
 8008350:	220b      	movs	r2, #11
 8008352:	4619      	mov	r1, r3
 8008354:	f7fe fd20 	bl	8006d98 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	330c      	adds	r3, #12
 8008364:	f002 0218 	and.w	r2, r2, #24
 8008368:	b2d2      	uxtb	r2, r2
 800836a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	2201      	movs	r2, #1
 8008370:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008372:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008376:	4618      	mov	r0, r3
 8008378:	3730      	adds	r7, #48	@ 0x30
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	4ec4ec4f 	.word	0x4ec4ec4f

08008384 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b08a      	sub	sp, #40	@ 0x28
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	613b      	str	r3, [r7, #16]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	60fb      	str	r3, [r7, #12]
 800839c:	2300      	movs	r3, #0
 800839e:	617b      	str	r3, [r7, #20]
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	1c5a      	adds	r2, r3, #1
 80083a8:	61ba      	str	r2, [r7, #24]
 80083aa:	693a      	ldr	r2, [r7, #16]
 80083ac:	4413      	add	r3, r2
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80083b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80083b4:	2b1f      	cmp	r3, #31
 80083b6:	d940      	bls.n	800843a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80083b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80083ba:	2b2f      	cmp	r3, #47	@ 0x2f
 80083bc:	d006      	beq.n	80083cc <create_name+0x48>
 80083be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80083c0:	2b5c      	cmp	r3, #92	@ 0x5c
 80083c2:	d110      	bne.n	80083e6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80083c4:	e002      	b.n	80083cc <create_name+0x48>
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	3301      	adds	r3, #1
 80083ca:	61bb      	str	r3, [r7, #24]
 80083cc:	693a      	ldr	r2, [r7, #16]
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	4413      	add	r3, r2
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80083d6:	d0f6      	beq.n	80083c6 <create_name+0x42>
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	4413      	add	r3, r2
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	2b5c      	cmp	r3, #92	@ 0x5c
 80083e2:	d0f0      	beq.n	80083c6 <create_name+0x42>
			break;
 80083e4:	e02a      	b.n	800843c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	2bfe      	cmp	r3, #254	@ 0xfe
 80083ea:	d901      	bls.n	80083f0 <create_name+0x6c>
 80083ec:	2306      	movs	r3, #6
 80083ee:	e17d      	b.n	80086ec <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80083f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80083f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80083f8:	2101      	movs	r1, #1
 80083fa:	4618      	mov	r0, r3
 80083fc:	f001 f9cc 	bl	8009798 <ff_convert>
 8008400:	4603      	mov	r3, r0
 8008402:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008404:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008406:	2b00      	cmp	r3, #0
 8008408:	d101      	bne.n	800840e <create_name+0x8a>
 800840a:	2306      	movs	r3, #6
 800840c:	e16e      	b.n	80086ec <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800840e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008410:	2b7f      	cmp	r3, #127	@ 0x7f
 8008412:	d809      	bhi.n	8008428 <create_name+0xa4>
 8008414:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008416:	4619      	mov	r1, r3
 8008418:	488d      	ldr	r0, [pc, #564]	@ (8008650 <create_name+0x2cc>)
 800841a:	f7fe fd20 	bl	8006e5e <chk_chr>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d001      	beq.n	8008428 <create_name+0xa4>
 8008424:	2306      	movs	r3, #6
 8008426:	e161      	b.n	80086ec <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	1c5a      	adds	r2, r3, #1
 800842c:	617a      	str	r2, [r7, #20]
 800842e:	005b      	lsls	r3, r3, #1
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	4413      	add	r3, r2
 8008434:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008436:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008438:	e7b4      	b.n	80083a4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800843a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	441a      	add	r2, r3
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008446:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008448:	2b1f      	cmp	r3, #31
 800844a:	d801      	bhi.n	8008450 <create_name+0xcc>
 800844c:	2304      	movs	r3, #4
 800844e:	e000      	b.n	8008452 <create_name+0xce>
 8008450:	2300      	movs	r3, #0
 8008452:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008456:	e011      	b.n	800847c <create_name+0xf8>
		w = lfn[di - 1];
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800845e:	3b01      	subs	r3, #1
 8008460:	005b      	lsls	r3, r3, #1
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	4413      	add	r3, r2
 8008466:	881b      	ldrh	r3, [r3, #0]
 8008468:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800846a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800846c:	2b20      	cmp	r3, #32
 800846e:	d002      	beq.n	8008476 <create_name+0xf2>
 8008470:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008472:	2b2e      	cmp	r3, #46	@ 0x2e
 8008474:	d106      	bne.n	8008484 <create_name+0x100>
		di--;
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	3b01      	subs	r3, #1
 800847a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1ea      	bne.n	8008458 <create_name+0xd4>
 8008482:	e000      	b.n	8008486 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008484:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	005b      	lsls	r3, r3, #1
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	4413      	add	r3, r2
 800848e:	2200      	movs	r2, #0
 8008490:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d101      	bne.n	800849c <create_name+0x118>
 8008498:	2306      	movs	r3, #6
 800849a:	e127      	b.n	80086ec <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	3324      	adds	r3, #36	@ 0x24
 80084a0:	220b      	movs	r2, #11
 80084a2:	2120      	movs	r1, #32
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7fe fc98 	bl	8006dda <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80084aa:	2300      	movs	r3, #0
 80084ac:	61bb      	str	r3, [r7, #24]
 80084ae:	e002      	b.n	80084b6 <create_name+0x132>
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	3301      	adds	r3, #1
 80084b4:	61bb      	str	r3, [r7, #24]
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	005b      	lsls	r3, r3, #1
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	4413      	add	r3, r2
 80084be:	881b      	ldrh	r3, [r3, #0]
 80084c0:	2b20      	cmp	r3, #32
 80084c2:	d0f5      	beq.n	80084b0 <create_name+0x12c>
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	005b      	lsls	r3, r3, #1
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	4413      	add	r3, r2
 80084cc:	881b      	ldrh	r3, [r3, #0]
 80084ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80084d0:	d0ee      	beq.n	80084b0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d009      	beq.n	80084ec <create_name+0x168>
 80084d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084dc:	f043 0303 	orr.w	r3, r3, #3
 80084e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80084e4:	e002      	b.n	80084ec <create_name+0x168>
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	3b01      	subs	r3, #1
 80084ea:	617b      	str	r3, [r7, #20]
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d009      	beq.n	8008506 <create_name+0x182>
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80084f8:	3b01      	subs	r3, #1
 80084fa:	005b      	lsls	r3, r3, #1
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	4413      	add	r3, r2
 8008500:	881b      	ldrh	r3, [r3, #0]
 8008502:	2b2e      	cmp	r3, #46	@ 0x2e
 8008504:	d1ef      	bne.n	80084e6 <create_name+0x162>

	i = b = 0; ni = 8;
 8008506:	2300      	movs	r3, #0
 8008508:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800850c:	2300      	movs	r3, #0
 800850e:	623b      	str	r3, [r7, #32]
 8008510:	2308      	movs	r3, #8
 8008512:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	1c5a      	adds	r2, r3, #1
 8008518:	61ba      	str	r2, [r7, #24]
 800851a:	005b      	lsls	r3, r3, #1
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	4413      	add	r3, r2
 8008520:	881b      	ldrh	r3, [r3, #0]
 8008522:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008524:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008526:	2b00      	cmp	r3, #0
 8008528:	f000 8090 	beq.w	800864c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800852c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800852e:	2b20      	cmp	r3, #32
 8008530:	d006      	beq.n	8008540 <create_name+0x1bc>
 8008532:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008534:	2b2e      	cmp	r3, #46	@ 0x2e
 8008536:	d10a      	bne.n	800854e <create_name+0x1ca>
 8008538:	69ba      	ldr	r2, [r7, #24]
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	429a      	cmp	r2, r3
 800853e:	d006      	beq.n	800854e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008540:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008544:	f043 0303 	orr.w	r3, r3, #3
 8008548:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800854c:	e07d      	b.n	800864a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800854e:	6a3a      	ldr	r2, [r7, #32]
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	429a      	cmp	r2, r3
 8008554:	d203      	bcs.n	800855e <create_name+0x1da>
 8008556:	69ba      	ldr	r2, [r7, #24]
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	429a      	cmp	r2, r3
 800855c:	d123      	bne.n	80085a6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	2b0b      	cmp	r3, #11
 8008562:	d106      	bne.n	8008572 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008564:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008568:	f043 0303 	orr.w	r3, r3, #3
 800856c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008570:	e075      	b.n	800865e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008572:	69ba      	ldr	r2, [r7, #24]
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	429a      	cmp	r2, r3
 8008578:	d005      	beq.n	8008586 <create_name+0x202>
 800857a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800857e:	f043 0303 	orr.w	r3, r3, #3
 8008582:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8008586:	69ba      	ldr	r2, [r7, #24]
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	429a      	cmp	r2, r3
 800858c:	d866      	bhi.n	800865c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	61bb      	str	r3, [r7, #24]
 8008592:	2308      	movs	r3, #8
 8008594:	623b      	str	r3, [r7, #32]
 8008596:	230b      	movs	r3, #11
 8008598:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800859a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80085a4:	e051      	b.n	800864a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80085a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80085aa:	d914      	bls.n	80085d6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80085ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085ae:	2100      	movs	r1, #0
 80085b0:	4618      	mov	r0, r3
 80085b2:	f001 f8f1 	bl	8009798 <ff_convert>
 80085b6:	4603      	mov	r3, r0
 80085b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80085ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d004      	beq.n	80085ca <create_name+0x246>
 80085c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085c2:	3b80      	subs	r3, #128	@ 0x80
 80085c4:	4a23      	ldr	r2, [pc, #140]	@ (8008654 <create_name+0x2d0>)
 80085c6:	5cd3      	ldrb	r3, [r2, r3]
 80085c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80085ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085ce:	f043 0302 	orr.w	r3, r3, #2
 80085d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80085d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d007      	beq.n	80085ec <create_name+0x268>
 80085dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085de:	4619      	mov	r1, r3
 80085e0:	481d      	ldr	r0, [pc, #116]	@ (8008658 <create_name+0x2d4>)
 80085e2:	f7fe fc3c 	bl	8006e5e <chk_chr>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d008      	beq.n	80085fe <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80085ec:	235f      	movs	r3, #95	@ 0x5f
 80085ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80085f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085f4:	f043 0303 	orr.w	r3, r3, #3
 80085f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80085fc:	e01b      	b.n	8008636 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80085fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008600:	2b40      	cmp	r3, #64	@ 0x40
 8008602:	d909      	bls.n	8008618 <create_name+0x294>
 8008604:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008606:	2b5a      	cmp	r3, #90	@ 0x5a
 8008608:	d806      	bhi.n	8008618 <create_name+0x294>
					b |= 2;
 800860a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800860e:	f043 0302 	orr.w	r3, r3, #2
 8008612:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008616:	e00e      	b.n	8008636 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008618:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800861a:	2b60      	cmp	r3, #96	@ 0x60
 800861c:	d90b      	bls.n	8008636 <create_name+0x2b2>
 800861e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008620:	2b7a      	cmp	r3, #122	@ 0x7a
 8008622:	d808      	bhi.n	8008636 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008624:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008628:	f043 0301 	orr.w	r3, r3, #1
 800862c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008630:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008632:	3b20      	subs	r3, #32
 8008634:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008636:	6a3b      	ldr	r3, [r7, #32]
 8008638:	1c5a      	adds	r2, r3, #1
 800863a:	623a      	str	r2, [r7, #32]
 800863c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800863e:	b2d1      	uxtb	r1, r2
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	4413      	add	r3, r2
 8008644:	460a      	mov	r2, r1
 8008646:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800864a:	e763      	b.n	8008514 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800864c:	bf00      	nop
 800864e:	e006      	b.n	800865e <create_name+0x2da>
 8008650:	0800a340 	.word	0x0800a340
 8008654:	0800a3bc 	.word	0x0800a3bc
 8008658:	0800a34c 	.word	0x0800a34c
			if (si > di) break;			/* No extension */
 800865c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008664:	2be5      	cmp	r3, #229	@ 0xe5
 8008666:	d103      	bne.n	8008670 <create_name+0x2ec>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2205      	movs	r2, #5
 800866c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	2b08      	cmp	r3, #8
 8008674:	d104      	bne.n	8008680 <create_name+0x2fc>
 8008676:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008680:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008684:	f003 030c 	and.w	r3, r3, #12
 8008688:	2b0c      	cmp	r3, #12
 800868a:	d005      	beq.n	8008698 <create_name+0x314>
 800868c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008690:	f003 0303 	and.w	r3, r3, #3
 8008694:	2b03      	cmp	r3, #3
 8008696:	d105      	bne.n	80086a4 <create_name+0x320>
 8008698:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800869c:	f043 0302 	orr.w	r3, r3, #2
 80086a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80086a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086a8:	f003 0302 	and.w	r3, r3, #2
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d117      	bne.n	80086e0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80086b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80086b4:	f003 0303 	and.w	r3, r3, #3
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d105      	bne.n	80086c8 <create_name+0x344>
 80086bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086c0:	f043 0310 	orr.w	r3, r3, #16
 80086c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80086c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80086cc:	f003 030c 	and.w	r3, r3, #12
 80086d0:	2b04      	cmp	r3, #4
 80086d2:	d105      	bne.n	80086e0 <create_name+0x35c>
 80086d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086d8:	f043 0308 	orr.w	r3, r3, #8
 80086dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80086e6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80086ea:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3728      	adds	r7, #40	@ 0x28
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b086      	sub	sp, #24
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008708:	e002      	b.n	8008710 <follow_path+0x1c>
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	3301      	adds	r3, #1
 800870e:	603b      	str	r3, [r7, #0]
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	2b2f      	cmp	r3, #47	@ 0x2f
 8008716:	d0f8      	beq.n	800870a <follow_path+0x16>
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	2b5c      	cmp	r3, #92	@ 0x5c
 800871e:	d0f4      	beq.n	800870a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	2200      	movs	r2, #0
 8008724:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	2b1f      	cmp	r3, #31
 800872c:	d80a      	bhi.n	8008744 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2280      	movs	r2, #128	@ 0x80
 8008732:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8008736:	2100      	movs	r1, #0
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f7ff f8fe 	bl	800793a <dir_sdi>
 800873e:	4603      	mov	r3, r0
 8008740:	75fb      	strb	r3, [r7, #23]
 8008742:	e048      	b.n	80087d6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008744:	463b      	mov	r3, r7
 8008746:	4619      	mov	r1, r3
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7ff fe1b 	bl	8008384 <create_name>
 800874e:	4603      	mov	r3, r0
 8008750:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008752:	7dfb      	ldrb	r3, [r7, #23]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d139      	bne.n	80087cc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f7ff fc5a 	bl	8008012 <dir_find>
 800875e:	4603      	mov	r3, r0
 8008760:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008768:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800876a:	7dfb      	ldrb	r3, [r7, #23]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00a      	beq.n	8008786 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008770:	7dfb      	ldrb	r3, [r7, #23]
 8008772:	2b04      	cmp	r3, #4
 8008774:	d12c      	bne.n	80087d0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008776:	7afb      	ldrb	r3, [r7, #11]
 8008778:	f003 0304 	and.w	r3, r3, #4
 800877c:	2b00      	cmp	r3, #0
 800877e:	d127      	bne.n	80087d0 <follow_path+0xdc>
 8008780:	2305      	movs	r3, #5
 8008782:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008784:	e024      	b.n	80087d0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008786:	7afb      	ldrb	r3, [r7, #11]
 8008788:	f003 0304 	and.w	r3, r3, #4
 800878c:	2b00      	cmp	r3, #0
 800878e:	d121      	bne.n	80087d4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	799b      	ldrb	r3, [r3, #6]
 8008794:	f003 0310 	and.w	r3, r3, #16
 8008798:	2b00      	cmp	r3, #0
 800879a:	d102      	bne.n	80087a2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800879c:	2305      	movs	r3, #5
 800879e:	75fb      	strb	r3, [r7, #23]
 80087a0:	e019      	b.n	80087d6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	695b      	ldr	r3, [r3, #20]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	8992      	ldrh	r2, [r2, #12]
 80087b0:	fbb3 f0f2 	udiv	r0, r3, r2
 80087b4:	fb00 f202 	mul.w	r2, r0, r2
 80087b8:	1a9b      	subs	r3, r3, r2
 80087ba:	440b      	add	r3, r1
 80087bc:	4619      	mov	r1, r3
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f7ff fa61 	bl	8007c86 <ld_clust>
 80087c4:	4602      	mov	r2, r0
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80087ca:	e7bb      	b.n	8008744 <follow_path+0x50>
			if (res != FR_OK) break;
 80087cc:	bf00      	nop
 80087ce:	e002      	b.n	80087d6 <follow_path+0xe2>
				break;
 80087d0:	bf00      	nop
 80087d2:	e000      	b.n	80087d6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80087d4:	bf00      	nop
			}
		}
	}

	return res;
 80087d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3718      	adds	r7, #24
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b087      	sub	sp, #28
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80087e8:	f04f 33ff 	mov.w	r3, #4294967295
 80087ec:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d031      	beq.n	800885a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	617b      	str	r3, [r7, #20]
 80087fc:	e002      	b.n	8008804 <get_ldnumber+0x24>
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	3301      	adds	r3, #1
 8008802:	617b      	str	r3, [r7, #20]
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	2b1f      	cmp	r3, #31
 800880a:	d903      	bls.n	8008814 <get_ldnumber+0x34>
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	2b3a      	cmp	r3, #58	@ 0x3a
 8008812:	d1f4      	bne.n	80087fe <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	2b3a      	cmp	r3, #58	@ 0x3a
 800881a:	d11c      	bne.n	8008856 <get_ldnumber+0x76>
			tp = *path;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	1c5a      	adds	r2, r3, #1
 8008826:	60fa      	str	r2, [r7, #12]
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	3b30      	subs	r3, #48	@ 0x30
 800882c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	2b09      	cmp	r3, #9
 8008832:	d80e      	bhi.n	8008852 <get_ldnumber+0x72>
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	429a      	cmp	r2, r3
 800883a:	d10a      	bne.n	8008852 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d107      	bne.n	8008852 <get_ldnumber+0x72>
					vol = (int)i;
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	3301      	adds	r3, #1
 800884a:	617b      	str	r3, [r7, #20]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	697a      	ldr	r2, [r7, #20]
 8008850:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	e002      	b.n	800885c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008856:	2300      	movs	r3, #0
 8008858:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800885a:	693b      	ldr	r3, [r7, #16]
}
 800885c:	4618      	mov	r0, r3
 800885e:	371c      	adds	r7, #28
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	70da      	strb	r2, [r3, #3]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f04f 32ff 	mov.w	r2, #4294967295
 800887e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008880:	6839      	ldr	r1, [r7, #0]
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f7fe fc7a 	bl	800717c <move_window>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <check_fs+0x2a>
 800888e:	2304      	movs	r3, #4
 8008890:	e038      	b.n	8008904 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	3338      	adds	r3, #56	@ 0x38
 8008896:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800889a:	4618      	mov	r0, r3
 800889c:	f7fe f9fa 	bl	8006c94 <ld_word>
 80088a0:	4603      	mov	r3, r0
 80088a2:	461a      	mov	r2, r3
 80088a4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d001      	beq.n	80088b0 <check_fs+0x48>
 80088ac:	2303      	movs	r3, #3
 80088ae:	e029      	b.n	8008904 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80088b6:	2be9      	cmp	r3, #233	@ 0xe9
 80088b8:	d009      	beq.n	80088ce <check_fs+0x66>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80088c0:	2beb      	cmp	r3, #235	@ 0xeb
 80088c2:	d11e      	bne.n	8008902 <check_fs+0x9a>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80088ca:	2b90      	cmp	r3, #144	@ 0x90
 80088cc:	d119      	bne.n	8008902 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	3338      	adds	r3, #56	@ 0x38
 80088d2:	3336      	adds	r3, #54	@ 0x36
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7fe f9f5 	bl	8006cc4 <ld_dword>
 80088da:	4603      	mov	r3, r0
 80088dc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80088e0:	4a0a      	ldr	r2, [pc, #40]	@ (800890c <check_fs+0xa4>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d101      	bne.n	80088ea <check_fs+0x82>
 80088e6:	2300      	movs	r3, #0
 80088e8:	e00c      	b.n	8008904 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	3338      	adds	r3, #56	@ 0x38
 80088ee:	3352      	adds	r3, #82	@ 0x52
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7fe f9e7 	bl	8006cc4 <ld_dword>
 80088f6:	4603      	mov	r3, r0
 80088f8:	4a05      	ldr	r2, [pc, #20]	@ (8008910 <check_fs+0xa8>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d101      	bne.n	8008902 <check_fs+0x9a>
 80088fe:	2300      	movs	r3, #0
 8008900:	e000      	b.n	8008904 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008902:	2302      	movs	r3, #2
}
 8008904:	4618      	mov	r0, r3
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	00544146 	.word	0x00544146
 8008910:	33544146 	.word	0x33544146

08008914 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b096      	sub	sp, #88	@ 0x58
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	4613      	mov	r3, r2
 8008920:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	2200      	movs	r2, #0
 8008926:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f7ff ff59 	bl	80087e0 <get_ldnumber>
 800892e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008932:	2b00      	cmp	r3, #0
 8008934:	da01      	bge.n	800893a <find_volume+0x26>
 8008936:	230b      	movs	r3, #11
 8008938:	e262      	b.n	8008e00 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800893a:	4a9f      	ldr	r2, [pc, #636]	@ (8008bb8 <find_volume+0x2a4>)
 800893c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800893e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008942:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008946:	2b00      	cmp	r3, #0
 8008948:	d101      	bne.n	800894e <find_volume+0x3a>
 800894a:	230c      	movs	r3, #12
 800894c:	e258      	b.n	8008e00 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008952:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008954:	79fb      	ldrb	r3, [r7, #7]
 8008956:	f023 0301 	bic.w	r3, r3, #1
 800895a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800895c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d01a      	beq.n	800899a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008966:	785b      	ldrb	r3, [r3, #1]
 8008968:	4618      	mov	r0, r3
 800896a:	f7fe f8f3 	bl	8006b54 <disk_status>
 800896e:	4603      	mov	r3, r0
 8008970:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008974:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008978:	f003 0301 	and.w	r3, r3, #1
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10c      	bne.n	800899a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008980:	79fb      	ldrb	r3, [r7, #7]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d007      	beq.n	8008996 <find_volume+0x82>
 8008986:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800898a:	f003 0304 	and.w	r3, r3, #4
 800898e:	2b00      	cmp	r3, #0
 8008990:	d001      	beq.n	8008996 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008992:	230a      	movs	r3, #10
 8008994:	e234      	b.n	8008e00 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8008996:	2300      	movs	r3, #0
 8008998:	e232      	b.n	8008e00 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800899a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800899c:	2200      	movs	r2, #0
 800899e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80089a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089a2:	b2da      	uxtb	r2, r3
 80089a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80089a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089aa:	785b      	ldrb	r3, [r3, #1]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7fe f8eb 	bl	8006b88 <disk_initialize>
 80089b2:	4603      	mov	r3, r0
 80089b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80089b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80089bc:	f003 0301 	and.w	r3, r3, #1
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80089c4:	2303      	movs	r3, #3
 80089c6:	e21b      	b.n	8008e00 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80089c8:	79fb      	ldrb	r3, [r7, #7]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d007      	beq.n	80089de <find_volume+0xca>
 80089ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80089d2:	f003 0304 	and.w	r3, r3, #4
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d001      	beq.n	80089de <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80089da:	230a      	movs	r3, #10
 80089dc:	e210      	b.n	8008e00 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80089de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e0:	7858      	ldrb	r0, [r3, #1]
 80089e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e4:	330c      	adds	r3, #12
 80089e6:	461a      	mov	r2, r3
 80089e8:	2102      	movs	r1, #2
 80089ea:	f7fe f935 	bl	8006c58 <disk_ioctl>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d001      	beq.n	80089f8 <find_volume+0xe4>
 80089f4:	2301      	movs	r3, #1
 80089f6:	e203      	b.n	8008e00 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80089f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089fa:	899b      	ldrh	r3, [r3, #12]
 80089fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a00:	d80d      	bhi.n	8008a1e <find_volume+0x10a>
 8008a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a04:	899b      	ldrh	r3, [r3, #12]
 8008a06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a0a:	d308      	bcc.n	8008a1e <find_volume+0x10a>
 8008a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a0e:	899b      	ldrh	r3, [r3, #12]
 8008a10:	461a      	mov	r2, r3
 8008a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a14:	899b      	ldrh	r3, [r3, #12]
 8008a16:	3b01      	subs	r3, #1
 8008a18:	4013      	ands	r3, r2
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <find_volume+0x10e>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e1ee      	b.n	8008e00 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008a22:	2300      	movs	r3, #0
 8008a24:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008a26:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008a28:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008a2a:	f7ff ff1d 	bl	8008868 <check_fs>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008a34:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d149      	bne.n	8008ad0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a40:	e01e      	b.n	8008a80 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a44:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008a48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a4a:	011b      	lsls	r3, r3, #4
 8008a4c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008a50:	4413      	add	r3, r2
 8008a52:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a56:	3304      	adds	r3, #4
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d006      	beq.n	8008a6c <find_volume+0x158>
 8008a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a60:	3308      	adds	r3, #8
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fe f92e 	bl	8006cc4 <ld_dword>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	e000      	b.n	8008a6e <find_volume+0x15a>
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	3358      	adds	r3, #88	@ 0x58
 8008a74:	443b      	add	r3, r7
 8008a76:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008a7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a82:	2b03      	cmp	r3, #3
 8008a84:	d9dd      	bls.n	8008a42 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008a86:	2300      	movs	r3, #0
 8008a88:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8008a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d002      	beq.n	8008a96 <find_volume+0x182>
 8008a90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a92:	3b01      	subs	r3, #1
 8008a94:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008a96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	3358      	adds	r3, #88	@ 0x58
 8008a9c:	443b      	add	r3, r7
 8008a9e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008aa2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008aa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d005      	beq.n	8008ab6 <find_volume+0x1a2>
 8008aaa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008aac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008aae:	f7ff fedb 	bl	8008868 <check_fs>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	e000      	b.n	8008ab8 <find_volume+0x1a4>
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008abc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d905      	bls.n	8008ad0 <find_volume+0x1bc>
 8008ac4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	643b      	str	r3, [r7, #64]	@ 0x40
 8008aca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008acc:	2b03      	cmp	r3, #3
 8008ace:	d9e2      	bls.n	8008a96 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008ad0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008ad4:	2b04      	cmp	r3, #4
 8008ad6:	d101      	bne.n	8008adc <find_volume+0x1c8>
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e191      	b.n	8008e00 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008adc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d901      	bls.n	8008ae8 <find_volume+0x1d4>
 8008ae4:	230d      	movs	r3, #13
 8008ae6:	e18b      	b.n	8008e00 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aea:	3338      	adds	r3, #56	@ 0x38
 8008aec:	330b      	adds	r3, #11
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7fe f8d0 	bl	8006c94 <ld_word>
 8008af4:	4603      	mov	r3, r0
 8008af6:	461a      	mov	r2, r3
 8008af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008afa:	899b      	ldrh	r3, [r3, #12]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d001      	beq.n	8008b04 <find_volume+0x1f0>
 8008b00:	230d      	movs	r3, #13
 8008b02:	e17d      	b.n	8008e00 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b06:	3338      	adds	r3, #56	@ 0x38
 8008b08:	3316      	adds	r3, #22
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7fe f8c2 	bl	8006c94 <ld_word>
 8008b10:	4603      	mov	r3, r0
 8008b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008b14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d106      	bne.n	8008b28 <find_volume+0x214>
 8008b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b1c:	3338      	adds	r3, #56	@ 0x38
 8008b1e:	3324      	adds	r3, #36	@ 0x24
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7fe f8cf 	bl	8006cc4 <ld_dword>
 8008b26:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008b2c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b30:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8008b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b36:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3a:	789b      	ldrb	r3, [r3, #2]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d005      	beq.n	8008b4c <find_volume+0x238>
 8008b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b42:	789b      	ldrb	r3, [r3, #2]
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d001      	beq.n	8008b4c <find_volume+0x238>
 8008b48:	230d      	movs	r3, #13
 8008b4a:	e159      	b.n	8008e00 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4e:	789b      	ldrb	r3, [r3, #2]
 8008b50:	461a      	mov	r2, r3
 8008b52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b54:	fb02 f303 	mul.w	r3, r2, r3
 8008b58:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b60:	461a      	mov	r2, r3
 8008b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b64:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b68:	895b      	ldrh	r3, [r3, #10]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d008      	beq.n	8008b80 <find_volume+0x26c>
 8008b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b70:	895b      	ldrh	r3, [r3, #10]
 8008b72:	461a      	mov	r2, r3
 8008b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b76:	895b      	ldrh	r3, [r3, #10]
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d001      	beq.n	8008b84 <find_volume+0x270>
 8008b80:	230d      	movs	r3, #13
 8008b82:	e13d      	b.n	8008e00 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b86:	3338      	adds	r3, #56	@ 0x38
 8008b88:	3311      	adds	r3, #17
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fe f882 	bl	8006c94 <ld_word>
 8008b90:	4603      	mov	r3, r0
 8008b92:	461a      	mov	r2, r3
 8008b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b96:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b9a:	891b      	ldrh	r3, [r3, #8]
 8008b9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b9e:	8992      	ldrh	r2, [r2, #12]
 8008ba0:	0952      	lsrs	r2, r2, #5
 8008ba2:	b292      	uxth	r2, r2
 8008ba4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ba8:	fb01 f202 	mul.w	r2, r1, r2
 8008bac:	1a9b      	subs	r3, r3, r2
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d003      	beq.n	8008bbc <find_volume+0x2a8>
 8008bb4:	230d      	movs	r3, #13
 8008bb6:	e123      	b.n	8008e00 <find_volume+0x4ec>
 8008bb8:	20008a48 	.word	0x20008a48

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bbe:	3338      	adds	r3, #56	@ 0x38
 8008bc0:	3313      	adds	r3, #19
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7fe f866 	bl	8006c94 <ld_word>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008bcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d106      	bne.n	8008be0 <find_volume+0x2cc>
 8008bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd4:	3338      	adds	r3, #56	@ 0x38
 8008bd6:	3320      	adds	r3, #32
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7fe f873 	bl	8006cc4 <ld_dword>
 8008bde:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be2:	3338      	adds	r3, #56	@ 0x38
 8008be4:	330e      	adds	r3, #14
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7fe f854 	bl	8006c94 <ld_word>
 8008bec:	4603      	mov	r3, r0
 8008bee:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008bf0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d101      	bne.n	8008bfa <find_volume+0x2e6>
 8008bf6:	230d      	movs	r3, #13
 8008bf8:	e102      	b.n	8008e00 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008bfa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008bfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bfe:	4413      	add	r3, r2
 8008c00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c02:	8911      	ldrh	r1, [r2, #8]
 8008c04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c06:	8992      	ldrh	r2, [r2, #12]
 8008c08:	0952      	lsrs	r2, r2, #5
 8008c0a:	b292      	uxth	r2, r2
 8008c0c:	fbb1 f2f2 	udiv	r2, r1, r2
 8008c10:	b292      	uxth	r2, r2
 8008c12:	4413      	add	r3, r2
 8008c14:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008c16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d201      	bcs.n	8008c22 <find_volume+0x30e>
 8008c1e:	230d      	movs	r3, #13
 8008c20:	e0ee      	b.n	8008e00 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008c22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c26:	1ad3      	subs	r3, r2, r3
 8008c28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c2a:	8952      	ldrh	r2, [r2, #10]
 8008c2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c30:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d101      	bne.n	8008c3c <find_volume+0x328>
 8008c38:	230d      	movs	r3, #13
 8008c3a:	e0e1      	b.n	8008e00 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8008c3c:	2303      	movs	r3, #3
 8008c3e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c44:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d802      	bhi.n	8008c52 <find_volume+0x33e>
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c54:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d802      	bhi.n	8008c62 <find_volume+0x34e>
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c64:	1c9a      	adds	r2, r3, #2
 8008c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c68:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8008c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c6c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008c6e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008c70:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008c72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c74:	441a      	add	r2, r3
 8008c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c78:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8008c7a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c7e:	441a      	add	r2, r3
 8008c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c82:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8008c84:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008c88:	2b03      	cmp	r3, #3
 8008c8a:	d11e      	bne.n	8008cca <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c8e:	3338      	adds	r3, #56	@ 0x38
 8008c90:	332a      	adds	r3, #42	@ 0x2a
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fd fffe 	bl	8006c94 <ld_word>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d001      	beq.n	8008ca2 <find_volume+0x38e>
 8008c9e:	230d      	movs	r3, #13
 8008ca0:	e0ae      	b.n	8008e00 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca4:	891b      	ldrh	r3, [r3, #8]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d001      	beq.n	8008cae <find_volume+0x39a>
 8008caa:	230d      	movs	r3, #13
 8008cac:	e0a8      	b.n	8008e00 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb0:	3338      	adds	r3, #56	@ 0x38
 8008cb2:	332c      	adds	r3, #44	@ 0x2c
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7fe f805 	bl	8006cc4 <ld_dword>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cbe:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc2:	69db      	ldr	r3, [r3, #28]
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cc8:	e01f      	b.n	8008d0a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ccc:	891b      	ldrh	r3, [r3, #8]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d101      	bne.n	8008cd6 <find_volume+0x3c2>
 8008cd2:	230d      	movs	r3, #13
 8008cd4:	e094      	b.n	8008e00 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008cda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cdc:	441a      	add	r2, r3
 8008cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce0:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008ce2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d103      	bne.n	8008cf2 <find_volume+0x3de>
 8008cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cec:	69db      	ldr	r3, [r3, #28]
 8008cee:	005b      	lsls	r3, r3, #1
 8008cf0:	e00a      	b.n	8008d08 <find_volume+0x3f4>
 8008cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cf4:	69da      	ldr	r2, [r3, #28]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	005b      	lsls	r3, r3, #1
 8008cfa:	4413      	add	r3, r2
 8008cfc:	085a      	lsrs	r2, r3, #1
 8008cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d00:	69db      	ldr	r3, [r3, #28]
 8008d02:	f003 0301 	and.w	r3, r3, #1
 8008d06:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008d08:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d0c:	6a1a      	ldr	r2, [r3, #32]
 8008d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d10:	899b      	ldrh	r3, [r3, #12]
 8008d12:	4619      	mov	r1, r3
 8008d14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d16:	440b      	add	r3, r1
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008d1c:	8989      	ldrh	r1, [r1, #12]
 8008d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d201      	bcs.n	8008d2a <find_volume+0x416>
 8008d26:	230d      	movs	r3, #13
 8008d28:	e06a      	b.n	8008e00 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d30:	619a      	str	r2, [r3, #24]
 8008d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d34:	699a      	ldr	r2, [r3, #24]
 8008d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d38:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8008d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d3c:	2280      	movs	r2, #128	@ 0x80
 8008d3e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008d40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008d44:	2b03      	cmp	r3, #3
 8008d46:	d149      	bne.n	8008ddc <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d4a:	3338      	adds	r3, #56	@ 0x38
 8008d4c:	3330      	adds	r3, #48	@ 0x30
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7fd ffa0 	bl	8006c94 <ld_word>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d140      	bne.n	8008ddc <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008d5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	4619      	mov	r1, r3
 8008d60:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008d62:	f7fe fa0b 	bl	800717c <move_window>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d137      	bne.n	8008ddc <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8008d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d6e:	2200      	movs	r2, #0
 8008d70:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d74:	3338      	adds	r3, #56	@ 0x38
 8008d76:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7fd ff8a 	bl	8006c94 <ld_word>
 8008d80:	4603      	mov	r3, r0
 8008d82:	461a      	mov	r2, r3
 8008d84:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d127      	bne.n	8008ddc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d8e:	3338      	adds	r3, #56	@ 0x38
 8008d90:	4618      	mov	r0, r3
 8008d92:	f7fd ff97 	bl	8006cc4 <ld_dword>
 8008d96:	4603      	mov	r3, r0
 8008d98:	4a1b      	ldr	r2, [pc, #108]	@ (8008e08 <find_volume+0x4f4>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d11e      	bne.n	8008ddc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008da0:	3338      	adds	r3, #56	@ 0x38
 8008da2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fd ff8c 	bl	8006cc4 <ld_dword>
 8008dac:	4603      	mov	r3, r0
 8008dae:	4a17      	ldr	r2, [pc, #92]	@ (8008e0c <find_volume+0x4f8>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d113      	bne.n	8008ddc <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db6:	3338      	adds	r3, #56	@ 0x38
 8008db8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7fd ff81 	bl	8006cc4 <ld_dword>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dca:	3338      	adds	r3, #56	@ 0x38
 8008dcc:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7fd ff77 	bl	8006cc4 <ld_dword>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dda:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dde:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008de2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008de4:	4b0a      	ldr	r3, [pc, #40]	@ (8008e10 <find_volume+0x4fc>)
 8008de6:	881b      	ldrh	r3, [r3, #0]
 8008de8:	3301      	adds	r3, #1
 8008dea:	b29a      	uxth	r2, r3
 8008dec:	4b08      	ldr	r3, [pc, #32]	@ (8008e10 <find_volume+0x4fc>)
 8008dee:	801a      	strh	r2, [r3, #0]
 8008df0:	4b07      	ldr	r3, [pc, #28]	@ (8008e10 <find_volume+0x4fc>)
 8008df2:	881a      	ldrh	r2, [r3, #0]
 8008df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008df8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008dfa:	f7fe f957 	bl	80070ac <clear_lock>
#endif
	return FR_OK;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3758      	adds	r7, #88	@ 0x58
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	41615252 	.word	0x41615252
 8008e0c:	61417272 	.word	0x61417272
 8008e10:	20008a4c 	.word	0x20008a4c

08008e14 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008e1e:	2309      	movs	r3, #9
 8008e20:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d01c      	beq.n	8008e62 <validate+0x4e>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d018      	beq.n	8008e62 <validate+0x4e>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d013      	beq.n	8008e62 <validate+0x4e>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	889a      	ldrh	r2, [r3, #4]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	88db      	ldrh	r3, [r3, #6]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d10c      	bne.n	8008e62 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	785b      	ldrb	r3, [r3, #1]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7fd fe80 	bl	8006b54 <disk_status>
 8008e54:	4603      	mov	r3, r0
 8008e56:	f003 0301 	and.w	r3, r3, #1
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d101      	bne.n	8008e62 <validate+0x4e>
			res = FR_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008e62:	7bfb      	ldrb	r3, [r7, #15]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d102      	bne.n	8008e6e <validate+0x5a>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	e000      	b.n	8008e70 <validate+0x5c>
 8008e6e:	2300      	movs	r3, #0
 8008e70:	683a      	ldr	r2, [r7, #0]
 8008e72:	6013      	str	r3, [r2, #0]
	return res;
 8008e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
	...

08008e80 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b088      	sub	sp, #32
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008e92:	f107 0310 	add.w	r3, r7, #16
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7ff fca2 	bl	80087e0 <get_ldnumber>
 8008e9c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	da01      	bge.n	8008ea8 <f_mount+0x28>
 8008ea4:	230b      	movs	r3, #11
 8008ea6:	e02b      	b.n	8008f00 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008ea8:	4a17      	ldr	r2, [pc, #92]	@ (8008f08 <f_mount+0x88>)
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008eb0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d005      	beq.n	8008ec4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008eb8:	69b8      	ldr	r0, [r7, #24]
 8008eba:	f7fe f8f7 	bl	80070ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d002      	beq.n	8008ed0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	490d      	ldr	r1, [pc, #52]	@ (8008f08 <f_mount+0x88>)
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d002      	beq.n	8008ee6 <f_mount+0x66>
 8008ee0:	79fb      	ldrb	r3, [r7, #7]
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d001      	beq.n	8008eea <f_mount+0x6a>
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	e00a      	b.n	8008f00 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008eea:	f107 010c 	add.w	r1, r7, #12
 8008eee:	f107 0308 	add.w	r3, r7, #8
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7ff fd0d 	bl	8008914 <find_volume>
 8008efa:	4603      	mov	r3, r0
 8008efc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3720      	adds	r7, #32
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	20008a48 	.word	0x20008a48

08008f0c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b09a      	sub	sp, #104	@ 0x68
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	4613      	mov	r3, r2
 8008f18:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d101      	bne.n	8008f24 <f_open+0x18>
 8008f20:	2309      	movs	r3, #9
 8008f22:	e1c7      	b.n	80092b4 <f_open+0x3a8>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008f24:	79fb      	ldrb	r3, [r7, #7]
 8008f26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f2a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008f2c:	79fa      	ldrb	r2, [r7, #7]
 8008f2e:	f107 0110 	add.w	r1, r7, #16
 8008f32:	f107 0308 	add.w	r3, r7, #8
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7ff fcec 	bl	8008914 <find_volume>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8008f42:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f040 81ab 	bne.w	80092a2 <f_open+0x396>
		dj.obj.fs = fs;
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8008f50:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008f54:	f000 fce6 	bl	8009924 <ff_memalloc>
 8008f58:	65b8      	str	r0, [r7, #88]	@ 0x58
 8008f5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d101      	bne.n	8008f64 <f_open+0x58>
 8008f60:	2311      	movs	r3, #17
 8008f62:	e1a7      	b.n	80092b4 <f_open+0x3a8>
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f68:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008f6a:	68ba      	ldr	r2, [r7, #8]
 8008f6c:	f107 0314 	add.w	r3, r7, #20
 8008f70:	4611      	mov	r1, r2
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7ff fbbe 	bl	80086f4 <follow_path>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008f7e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d118      	bne.n	8008fb8 <f_open+0xac>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008f86:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008f8a:	b25b      	sxtb	r3, r3
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	da03      	bge.n	8008f98 <f_open+0x8c>
				res = FR_INVALID_NAME;
 8008f90:	2306      	movs	r3, #6
 8008f92:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008f96:	e00f      	b.n	8008fb8 <f_open+0xac>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008f98:	79fb      	ldrb	r3, [r7, #7]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	bf8c      	ite	hi
 8008f9e:	2301      	movhi	r3, #1
 8008fa0:	2300      	movls	r3, #0
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	f107 0314 	add.w	r3, r7, #20
 8008faa:	4611      	mov	r1, r2
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7fd ff71 	bl	8006e94 <chk_lock>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008fb8:	79fb      	ldrb	r3, [r7, #7]
 8008fba:	f003 031c 	and.w	r3, r3, #28
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d07f      	beq.n	80090c2 <f_open+0x1b6>
			if (res != FR_OK) {					/* No file, create new */
 8008fc2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d017      	beq.n	8008ffa <f_open+0xee>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008fca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008fce:	2b04      	cmp	r3, #4
 8008fd0:	d10e      	bne.n	8008ff0 <f_open+0xe4>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008fd2:	f7fd ffbb 	bl	8006f4c <enq_lock>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d006      	beq.n	8008fea <f_open+0xde>
 8008fdc:	f107 0314 	add.w	r3, r7, #20
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7ff f8d7 	bl	8008194 <dir_register>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	e000      	b.n	8008fec <f_open+0xe0>
 8008fea:	2312      	movs	r3, #18
 8008fec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008ff0:	79fb      	ldrb	r3, [r7, #7]
 8008ff2:	f043 0308 	orr.w	r3, r3, #8
 8008ff6:	71fb      	strb	r3, [r7, #7]
 8008ff8:	e010      	b.n	800901c <f_open+0x110>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008ffa:	7ebb      	ldrb	r3, [r7, #26]
 8008ffc:	f003 0311 	and.w	r3, r3, #17
 8009000:	2b00      	cmp	r3, #0
 8009002:	d003      	beq.n	800900c <f_open+0x100>
					res = FR_DENIED;
 8009004:	2307      	movs	r3, #7
 8009006:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800900a:	e007      	b.n	800901c <f_open+0x110>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800900c:	79fb      	ldrb	r3, [r7, #7]
 800900e:	f003 0304 	and.w	r3, r3, #4
 8009012:	2b00      	cmp	r3, #0
 8009014:	d002      	beq.n	800901c <f_open+0x110>
 8009016:	2308      	movs	r3, #8
 8009018:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800901c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009020:	2b00      	cmp	r3, #0
 8009022:	d168      	bne.n	80090f6 <f_open+0x1ea>
 8009024:	79fb      	ldrb	r3, [r7, #7]
 8009026:	f003 0308 	and.w	r3, r3, #8
 800902a:	2b00      	cmp	r3, #0
 800902c:	d063      	beq.n	80090f6 <f_open+0x1ea>
				dw = GET_FATTIME();
 800902e:	f7fd fbd7 	bl	80067e0 <get_fattime>
 8009032:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009036:	330e      	adds	r3, #14
 8009038:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800903a:	4618      	mov	r0, r3
 800903c:	f7fd fe80 	bl	8006d40 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009042:	3316      	adds	r3, #22
 8009044:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009046:	4618      	mov	r0, r3
 8009048:	f7fd fe7a 	bl	8006d40 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800904c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800904e:	330b      	adds	r3, #11
 8009050:	2220      	movs	r2, #32
 8009052:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009058:	4611      	mov	r1, r2
 800905a:	4618      	mov	r0, r3
 800905c:	f7fe fe13 	bl	8007c86 <ld_clust>
 8009060:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009066:	2200      	movs	r2, #0
 8009068:	4618      	mov	r0, r3
 800906a:	f7fe fe2b 	bl	8007cc4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800906e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009070:	331c      	adds	r3, #28
 8009072:	2100      	movs	r1, #0
 8009074:	4618      	mov	r0, r3
 8009076:	f7fd fe63 	bl	8006d40 <st_dword>
					fs->wflag = 1;
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	2201      	movs	r2, #1
 800907e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009080:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009082:	2b00      	cmp	r3, #0
 8009084:	d037      	beq.n	80090f6 <f_open+0x1ea>
						dw = fs->winsect;
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800908a:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800908c:	f107 0314 	add.w	r3, r7, #20
 8009090:	2200      	movs	r2, #0
 8009092:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009094:	4618      	mov	r0, r3
 8009096:	f7fe fb1b 	bl	80076d0 <remove_chain>
 800909a:	4603      	mov	r3, r0
 800909c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80090a0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d126      	bne.n	80090f6 <f_open+0x1ea>
							res = move_window(fs, dw);
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7fe f865 	bl	800717c <move_window>
 80090b2:	4603      	mov	r3, r0
 80090b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80090bc:	3a01      	subs	r2, #1
 80090be:	615a      	str	r2, [r3, #20]
 80090c0:	e019      	b.n	80090f6 <f_open+0x1ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80090c2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d115      	bne.n	80090f6 <f_open+0x1ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80090ca:	7ebb      	ldrb	r3, [r7, #26]
 80090cc:	f003 0310 	and.w	r3, r3, #16
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d003      	beq.n	80090dc <f_open+0x1d0>
					res = FR_NO_FILE;
 80090d4:	2304      	movs	r3, #4
 80090d6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80090da:	e00c      	b.n	80090f6 <f_open+0x1ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80090dc:	79fb      	ldrb	r3, [r7, #7]
 80090de:	f003 0302 	and.w	r3, r3, #2
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d007      	beq.n	80090f6 <f_open+0x1ea>
 80090e6:	7ebb      	ldrb	r3, [r7, #26]
 80090e8:	f003 0301 	and.w	r3, r3, #1
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d002      	beq.n	80090f6 <f_open+0x1ea>
						res = FR_DENIED;
 80090f0:	2307      	movs	r3, #7
 80090f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80090f6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d126      	bne.n	800914c <f_open+0x240>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80090fe:	79fb      	ldrb	r3, [r7, #7]
 8009100:	f003 0308 	and.w	r3, r3, #8
 8009104:	2b00      	cmp	r3, #0
 8009106:	d003      	beq.n	8009110 <f_open+0x204>
				mode |= FA_MODIFIED;
 8009108:	79fb      	ldrb	r3, [r7, #7]
 800910a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800910e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8009118:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800911e:	79fb      	ldrb	r3, [r7, #7]
 8009120:	2b01      	cmp	r3, #1
 8009122:	bf8c      	ite	hi
 8009124:	2301      	movhi	r3, #1
 8009126:	2300      	movls	r3, #0
 8009128:	b2db      	uxtb	r3, r3
 800912a:	461a      	mov	r2, r3
 800912c:	f107 0314 	add.w	r3, r7, #20
 8009130:	4611      	mov	r1, r2
 8009132:	4618      	mov	r0, r3
 8009134:	f7fd ff2c 	bl	8006f90 <inc_lock>
 8009138:	4602      	mov	r2, r0
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d102      	bne.n	800914c <f_open+0x240>
 8009146:	2302      	movs	r3, #2
 8009148:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800914c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009150:	2b00      	cmp	r3, #0
 8009152:	f040 80a3 	bne.w	800929c <f_open+0x390>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800915a:	4611      	mov	r1, r2
 800915c:	4618      	mov	r0, r3
 800915e:	f7fe fd92 	bl	8007c86 <ld_clust>
 8009162:	4602      	mov	r2, r0
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800916a:	331c      	adds	r3, #28
 800916c:	4618      	mov	r0, r3
 800916e:	f7fd fda9 	bl	8006cc4 <ld_dword>
 8009172:	4602      	mov	r2, r0
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2200      	movs	r2, #0
 800917c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800917e:	693a      	ldr	r2, [r7, #16]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	88da      	ldrh	r2, [r3, #6]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	79fa      	ldrb	r2, [r7, #7]
 8009190:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2200      	movs	r2, #0
 800919c:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	3330      	adds	r3, #48	@ 0x30
 80091a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80091ac:	2100      	movs	r1, #0
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7fd fe13 	bl	8006dda <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80091b4:	79fb      	ldrb	r3, [r7, #7]
 80091b6:	f003 0320 	and.w	r3, r3, #32
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d06e      	beq.n	800929c <f_open+0x390>
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d06a      	beq.n	800929c <f_open+0x390>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	68da      	ldr	r2, [r3, #12]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	895b      	ldrh	r3, [r3, #10]
 80091d2:	461a      	mov	r2, r3
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	899b      	ldrh	r3, [r3, #12]
 80091d8:	fb02 f303 	mul.w	r3, r2, r3
 80091dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80091ea:	e016      	b.n	800921a <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7fe f880 	bl	80072f6 <get_fat>
 80091f6:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80091f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d802      	bhi.n	8009204 <f_open+0x2f8>
 80091fe:	2302      	movs	r3, #2
 8009200:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009204:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800920a:	d102      	bne.n	8009212 <f_open+0x306>
 800920c:	2301      	movs	r3, #1
 800920e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009212:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009214:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009216:	1ad3      	subs	r3, r2, r3
 8009218:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800921a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800921e:	2b00      	cmp	r3, #0
 8009220:	d103      	bne.n	800922a <f_open+0x31e>
 8009222:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009224:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009226:	429a      	cmp	r2, r3
 8009228:	d8e0      	bhi.n	80091ec <f_open+0x2e0>
				}
				fp->clust = clst;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800922e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009230:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009234:	2b00      	cmp	r3, #0
 8009236:	d131      	bne.n	800929c <f_open+0x390>
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	899b      	ldrh	r3, [r3, #12]
 800923c:	461a      	mov	r2, r3
 800923e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009240:	fbb3 f1f2 	udiv	r1, r3, r2
 8009244:	fb01 f202 	mul.w	r2, r1, r2
 8009248:	1a9b      	subs	r3, r3, r2
 800924a:	2b00      	cmp	r3, #0
 800924c:	d026      	beq.n	800929c <f_open+0x390>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009252:	4618      	mov	r0, r3
 8009254:	f7fe f830 	bl	80072b8 <clust2sect>
 8009258:	64b8      	str	r0, [r7, #72]	@ 0x48
 800925a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800925c:	2b00      	cmp	r3, #0
 800925e:	d103      	bne.n	8009268 <f_open+0x35c>
						res = FR_INT_ERR;
 8009260:	2302      	movs	r3, #2
 8009262:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009266:	e019      	b.n	800929c <f_open+0x390>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	899b      	ldrh	r3, [r3, #12]
 800926c:	461a      	mov	r2, r3
 800926e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009270:	fbb3 f2f2 	udiv	r2, r3, r2
 8009274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009276:	441a      	add	r2, r3
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	7858      	ldrb	r0, [r3, #1]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6a1a      	ldr	r2, [r3, #32]
 800928a:	2301      	movs	r3, #1
 800928c:	f7fd fca4 	bl	8006bd8 <disk_read>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d002      	beq.n	800929c <f_open+0x390>
 8009296:	2301      	movs	r3, #1
 8009298:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800929c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800929e:	f000 fb4d 	bl	800993c <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80092a2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d002      	beq.n	80092b0 <f_open+0x3a4>
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2200      	movs	r2, #0
 80092ae:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80092b0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3768      	adds	r7, #104	@ 0x68
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b08c      	sub	sp, #48	@ 0x30
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]
 80092c8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	2200      	movs	r2, #0
 80092d2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f107 0210 	add.w	r2, r7, #16
 80092da:	4611      	mov	r1, r2
 80092dc:	4618      	mov	r0, r3
 80092de:	f7ff fd99 	bl	8008e14 <validate>
 80092e2:	4603      	mov	r3, r0
 80092e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80092e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d107      	bne.n	8009300 <f_write+0x44>
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	7d5b      	ldrb	r3, [r3, #21]
 80092f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80092f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d002      	beq.n	8009306 <f_write+0x4a>
 8009300:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009304:	e16a      	b.n	80095dc <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	7d1b      	ldrb	r3, [r3, #20]
 800930a:	f003 0302 	and.w	r3, r3, #2
 800930e:	2b00      	cmp	r3, #0
 8009310:	d101      	bne.n	8009316 <f_write+0x5a>
 8009312:	2307      	movs	r3, #7
 8009314:	e162      	b.n	80095dc <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	699a      	ldr	r2, [r3, #24]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	441a      	add	r2, r3
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	699b      	ldr	r3, [r3, #24]
 8009322:	429a      	cmp	r2, r3
 8009324:	f080 814c 	bcs.w	80095c0 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	699b      	ldr	r3, [r3, #24]
 800932c:	43db      	mvns	r3, r3
 800932e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009330:	e146      	b.n	80095c0 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	699b      	ldr	r3, [r3, #24]
 8009336:	693a      	ldr	r2, [r7, #16]
 8009338:	8992      	ldrh	r2, [r2, #12]
 800933a:	fbb3 f1f2 	udiv	r1, r3, r2
 800933e:	fb01 f202 	mul.w	r2, r1, r2
 8009342:	1a9b      	subs	r3, r3, r2
 8009344:	2b00      	cmp	r3, #0
 8009346:	f040 80f1 	bne.w	800952c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	699b      	ldr	r3, [r3, #24]
 800934e:	693a      	ldr	r2, [r7, #16]
 8009350:	8992      	ldrh	r2, [r2, #12]
 8009352:	fbb3 f3f2 	udiv	r3, r3, r2
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	8952      	ldrh	r2, [r2, #10]
 800935a:	3a01      	subs	r2, #1
 800935c:	4013      	ands	r3, r2
 800935e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d143      	bne.n	80093ee <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	699b      	ldr	r3, [r3, #24]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d10c      	bne.n	8009388 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009376:	2b00      	cmp	r3, #0
 8009378:	d11a      	bne.n	80093b0 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2100      	movs	r1, #0
 800937e:	4618      	mov	r0, r3
 8009380:	f7fe fa0b 	bl	800779a <create_chain>
 8009384:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009386:	e013      	b.n	80093b0 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800938c:	2b00      	cmp	r3, #0
 800938e:	d007      	beq.n	80093a0 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	699b      	ldr	r3, [r3, #24]
 8009394:	4619      	mov	r1, r3
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f7fe fa97 	bl	80078ca <clmt_clust>
 800939c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800939e:	e007      	b.n	80093b0 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	69db      	ldr	r3, [r3, #28]
 80093a6:	4619      	mov	r1, r3
 80093a8:	4610      	mov	r0, r2
 80093aa:	f7fe f9f6 	bl	800779a <create_chain>
 80093ae:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80093b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	f000 8109 	beq.w	80095ca <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80093b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d104      	bne.n	80093c8 <f_write+0x10c>
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2202      	movs	r2, #2
 80093c2:	755a      	strb	r2, [r3, #21]
 80093c4:	2302      	movs	r3, #2
 80093c6:	e109      	b.n	80095dc <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80093c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ce:	d104      	bne.n	80093da <f_write+0x11e>
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2201      	movs	r2, #1
 80093d4:	755a      	strb	r2, [r3, #21]
 80093d6:	2301      	movs	r3, #1
 80093d8:	e100      	b.n	80095dc <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093de:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d102      	bne.n	80093ee <f_write+0x132>
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093ec:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	7d1b      	ldrb	r3, [r3, #20]
 80093f2:	b25b      	sxtb	r3, r3
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	da18      	bge.n	800942a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	7858      	ldrb	r0, [r3, #1]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6a1a      	ldr	r2, [r3, #32]
 8009406:	2301      	movs	r3, #1
 8009408:	f7fd fc06 	bl	8006c18 <disk_write>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d004      	beq.n	800941c <f_write+0x160>
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2201      	movs	r2, #1
 8009416:	755a      	strb	r2, [r3, #21]
 8009418:	2301      	movs	r3, #1
 800941a:	e0df      	b.n	80095dc <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	7d1b      	ldrb	r3, [r3, #20]
 8009420:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009424:	b2da      	uxtb	r2, r3
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800942a:	693a      	ldr	r2, [r7, #16]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	69db      	ldr	r3, [r3, #28]
 8009430:	4619      	mov	r1, r3
 8009432:	4610      	mov	r0, r2
 8009434:	f7fd ff40 	bl	80072b8 <clust2sect>
 8009438:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d104      	bne.n	800944a <f_write+0x18e>
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2202      	movs	r2, #2
 8009444:	755a      	strb	r2, [r3, #21]
 8009446:	2302      	movs	r3, #2
 8009448:	e0c8      	b.n	80095dc <f_write+0x320>
			sect += csect;
 800944a:	697a      	ldr	r2, [r7, #20]
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	4413      	add	r3, r2
 8009450:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	899b      	ldrh	r3, [r3, #12]
 8009456:	461a      	mov	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	fbb3 f3f2 	udiv	r3, r3, r2
 800945e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009460:	6a3b      	ldr	r3, [r7, #32]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d043      	beq.n	80094ee <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009466:	69ba      	ldr	r2, [r7, #24]
 8009468:	6a3b      	ldr	r3, [r7, #32]
 800946a:	4413      	add	r3, r2
 800946c:	693a      	ldr	r2, [r7, #16]
 800946e:	8952      	ldrh	r2, [r2, #10]
 8009470:	4293      	cmp	r3, r2
 8009472:	d905      	bls.n	8009480 <f_write+0x1c4>
					cc = fs->csize - csect;
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	895b      	ldrh	r3, [r3, #10]
 8009478:	461a      	mov	r2, r3
 800947a:	69bb      	ldr	r3, [r7, #24]
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	7858      	ldrb	r0, [r3, #1]
 8009484:	6a3b      	ldr	r3, [r7, #32]
 8009486:	697a      	ldr	r2, [r7, #20]
 8009488:	69f9      	ldr	r1, [r7, #28]
 800948a:	f7fd fbc5 	bl	8006c18 <disk_write>
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d004      	beq.n	800949e <f_write+0x1e2>
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2201      	movs	r2, #1
 8009498:	755a      	strb	r2, [r3, #21]
 800949a:	2301      	movs	r3, #1
 800949c:	e09e      	b.n	80095dc <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6a1a      	ldr	r2, [r3, #32]
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	6a3a      	ldr	r2, [r7, #32]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d918      	bls.n	80094de <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	6a1a      	ldr	r2, [r3, #32]
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	1ad3      	subs	r3, r2, r3
 80094ba:	693a      	ldr	r2, [r7, #16]
 80094bc:	8992      	ldrh	r2, [r2, #12]
 80094be:	fb02 f303 	mul.w	r3, r2, r3
 80094c2:	69fa      	ldr	r2, [r7, #28]
 80094c4:	18d1      	adds	r1, r2, r3
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	899b      	ldrh	r3, [r3, #12]
 80094ca:	461a      	mov	r2, r3
 80094cc:	f7fd fc64 	bl	8006d98 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	7d1b      	ldrb	r3, [r3, #20]
 80094d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094d8:	b2da      	uxtb	r2, r3
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	899b      	ldrh	r3, [r3, #12]
 80094e2:	461a      	mov	r2, r3
 80094e4:	6a3b      	ldr	r3, [r7, #32]
 80094e6:	fb02 f303 	mul.w	r3, r2, r3
 80094ea:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80094ec:	e04b      	b.n	8009586 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6a1b      	ldr	r3, [r3, #32]
 80094f2:	697a      	ldr	r2, [r7, #20]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d016      	beq.n	8009526 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	699a      	ldr	r2, [r3, #24]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009500:	429a      	cmp	r2, r3
 8009502:	d210      	bcs.n	8009526 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	7858      	ldrb	r0, [r3, #1]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800950e:	2301      	movs	r3, #1
 8009510:	697a      	ldr	r2, [r7, #20]
 8009512:	f7fd fb61 	bl	8006bd8 <disk_read>
 8009516:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009518:	2b00      	cmp	r3, #0
 800951a:	d004      	beq.n	8009526 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2201      	movs	r2, #1
 8009520:	755a      	strb	r2, [r3, #21]
 8009522:	2301      	movs	r3, #1
 8009524:	e05a      	b.n	80095dc <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	697a      	ldr	r2, [r7, #20]
 800952a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	899b      	ldrh	r3, [r3, #12]
 8009530:	4618      	mov	r0, r3
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	699b      	ldr	r3, [r3, #24]
 8009536:	693a      	ldr	r2, [r7, #16]
 8009538:	8992      	ldrh	r2, [r2, #12]
 800953a:	fbb3 f1f2 	udiv	r1, r3, r2
 800953e:	fb01 f202 	mul.w	r2, r1, r2
 8009542:	1a9b      	subs	r3, r3, r2
 8009544:	1ac3      	subs	r3, r0, r3
 8009546:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009548:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	429a      	cmp	r2, r3
 800954e:	d901      	bls.n	8009554 <f_write+0x298>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	699b      	ldr	r3, [r3, #24]
 800955e:	693a      	ldr	r2, [r7, #16]
 8009560:	8992      	ldrh	r2, [r2, #12]
 8009562:	fbb3 f0f2 	udiv	r0, r3, r2
 8009566:	fb00 f202 	mul.w	r2, r0, r2
 800956a:	1a9b      	subs	r3, r3, r2
 800956c:	440b      	add	r3, r1
 800956e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009570:	69f9      	ldr	r1, [r7, #28]
 8009572:	4618      	mov	r0, r3
 8009574:	f7fd fc10 	bl	8006d98 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	7d1b      	ldrb	r3, [r3, #20]
 800957c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009580:	b2da      	uxtb	r2, r3
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009586:	69fa      	ldr	r2, [r7, #28]
 8009588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800958a:	4413      	add	r3, r2
 800958c:	61fb      	str	r3, [r7, #28]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	699a      	ldr	r2, [r3, #24]
 8009592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009594:	441a      	add	r2, r3
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	619a      	str	r2, [r3, #24]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	68da      	ldr	r2, [r3, #12]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	699b      	ldr	r3, [r3, #24]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	bf38      	it	cc
 80095a6:	461a      	movcc	r2, r3
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	60da      	str	r2, [r3, #12]
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b2:	441a      	add	r2, r3
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	601a      	str	r2, [r3, #0]
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095bc:	1ad3      	subs	r3, r2, r3
 80095be:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	f47f aeb5 	bne.w	8009332 <f_write+0x76>
 80095c8:	e000      	b.n	80095cc <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80095ca:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	7d1b      	ldrb	r3, [r3, #20]
 80095d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095d4:	b2da      	uxtb	r2, r3
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80095da:	2300      	movs	r3, #0
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3730      	adds	r7, #48	@ 0x30
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b086      	sub	sp, #24
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f107 0208 	add.w	r2, r7, #8
 80095f2:	4611      	mov	r1, r2
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7ff fc0d 	bl	8008e14 <validate>
 80095fa:	4603      	mov	r3, r0
 80095fc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80095fe:	7dfb      	ldrb	r3, [r7, #23]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d168      	bne.n	80096d6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	7d1b      	ldrb	r3, [r3, #20]
 8009608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800960c:	2b00      	cmp	r3, #0
 800960e:	d062      	beq.n	80096d6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	7d1b      	ldrb	r3, [r3, #20]
 8009614:	b25b      	sxtb	r3, r3
 8009616:	2b00      	cmp	r3, #0
 8009618:	da15      	bge.n	8009646 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	7858      	ldrb	r0, [r3, #1]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6a1a      	ldr	r2, [r3, #32]
 8009628:	2301      	movs	r3, #1
 800962a:	f7fd faf5 	bl	8006c18 <disk_write>
 800962e:	4603      	mov	r3, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	d001      	beq.n	8009638 <f_sync+0x54>
 8009634:	2301      	movs	r3, #1
 8009636:	e04f      	b.n	80096d8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	7d1b      	ldrb	r3, [r3, #20]
 800963c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009640:	b2da      	uxtb	r2, r3
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009646:	f7fd f8cb 	bl	80067e0 <get_fattime>
 800964a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800964c:	68ba      	ldr	r2, [r7, #8]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009652:	4619      	mov	r1, r3
 8009654:	4610      	mov	r0, r2
 8009656:	f7fd fd91 	bl	800717c <move_window>
 800965a:	4603      	mov	r3, r0
 800965c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800965e:	7dfb      	ldrb	r3, [r7, #23]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d138      	bne.n	80096d6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009668:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	330b      	adds	r3, #11
 800966e:	781a      	ldrb	r2, [r3, #0]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	330b      	adds	r3, #11
 8009674:	f042 0220 	orr.w	r2, r2, #32
 8009678:	b2d2      	uxtb	r2, r2
 800967a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6818      	ldr	r0, [r3, #0]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	461a      	mov	r2, r3
 8009686:	68f9      	ldr	r1, [r7, #12]
 8009688:	f7fe fb1c 	bl	8007cc4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f103 021c 	add.w	r2, r3, #28
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	4619      	mov	r1, r3
 8009698:	4610      	mov	r0, r2
 800969a:	f7fd fb51 	bl	8006d40 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	3316      	adds	r3, #22
 80096a2:	6939      	ldr	r1, [r7, #16]
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7fd fb4b 	bl	8006d40 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	3312      	adds	r3, #18
 80096ae:	2100      	movs	r1, #0
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7fd fb2a 	bl	8006d0a <st_word>
					fs->wflag = 1;
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	2201      	movs	r2, #1
 80096ba:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	4618      	mov	r0, r3
 80096c0:	f7fd fd8a 	bl	80071d8 <sync_fs>
 80096c4:	4603      	mov	r3, r0
 80096c6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	7d1b      	ldrb	r3, [r3, #20]
 80096cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096d0:	b2da      	uxtb	r2, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80096d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3718      	adds	r7, #24
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b087      	sub	sp, #28
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	4613      	mov	r3, r2
 80096ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80096ee:	2301      	movs	r3, #1
 80096f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80096f2:	2300      	movs	r3, #0
 80096f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80096f6:	4b1f      	ldr	r3, [pc, #124]	@ (8009774 <FATFS_LinkDriverEx+0x94>)
 80096f8:	7a5b      	ldrb	r3, [r3, #9]
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d131      	bne.n	8009764 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009700:	4b1c      	ldr	r3, [pc, #112]	@ (8009774 <FATFS_LinkDriverEx+0x94>)
 8009702:	7a5b      	ldrb	r3, [r3, #9]
 8009704:	b2db      	uxtb	r3, r3
 8009706:	461a      	mov	r2, r3
 8009708:	4b1a      	ldr	r3, [pc, #104]	@ (8009774 <FATFS_LinkDriverEx+0x94>)
 800970a:	2100      	movs	r1, #0
 800970c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800970e:	4b19      	ldr	r3, [pc, #100]	@ (8009774 <FATFS_LinkDriverEx+0x94>)
 8009710:	7a5b      	ldrb	r3, [r3, #9]
 8009712:	b2db      	uxtb	r3, r3
 8009714:	4a17      	ldr	r2, [pc, #92]	@ (8009774 <FATFS_LinkDriverEx+0x94>)
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	4413      	add	r3, r2
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800971e:	4b15      	ldr	r3, [pc, #84]	@ (8009774 <FATFS_LinkDriverEx+0x94>)
 8009720:	7a5b      	ldrb	r3, [r3, #9]
 8009722:	b2db      	uxtb	r3, r3
 8009724:	461a      	mov	r2, r3
 8009726:	4b13      	ldr	r3, [pc, #76]	@ (8009774 <FATFS_LinkDriverEx+0x94>)
 8009728:	4413      	add	r3, r2
 800972a:	79fa      	ldrb	r2, [r7, #7]
 800972c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800972e:	4b11      	ldr	r3, [pc, #68]	@ (8009774 <FATFS_LinkDriverEx+0x94>)
 8009730:	7a5b      	ldrb	r3, [r3, #9]
 8009732:	b2db      	uxtb	r3, r3
 8009734:	1c5a      	adds	r2, r3, #1
 8009736:	b2d1      	uxtb	r1, r2
 8009738:	4a0e      	ldr	r2, [pc, #56]	@ (8009774 <FATFS_LinkDriverEx+0x94>)
 800973a:	7251      	strb	r1, [r2, #9]
 800973c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800973e:	7dbb      	ldrb	r3, [r7, #22]
 8009740:	3330      	adds	r3, #48	@ 0x30
 8009742:	b2da      	uxtb	r2, r3
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	3301      	adds	r3, #1
 800974c:	223a      	movs	r2, #58	@ 0x3a
 800974e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	3302      	adds	r3, #2
 8009754:	222f      	movs	r2, #47	@ 0x2f
 8009756:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	3303      	adds	r3, #3
 800975c:	2200      	movs	r2, #0
 800975e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009760:	2300      	movs	r3, #0
 8009762:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009764:	7dfb      	ldrb	r3, [r7, #23]
}
 8009766:	4618      	mov	r0, r3
 8009768:	371c      	adds	r7, #28
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr
 8009772:	bf00      	nop
 8009774:	20008a80 	.word	0x20008a80

08009778 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009782:	2200      	movs	r2, #0
 8009784:	6839      	ldr	r1, [r7, #0]
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f7ff ffaa 	bl	80096e0 <FATFS_LinkDriverEx>
 800978c:	4603      	mov	r3, r0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3708      	adds	r7, #8
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
	...

08009798 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	4603      	mov	r3, r0
 80097a0:	6039      	str	r1, [r7, #0]
 80097a2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80097a4:	88fb      	ldrh	r3, [r7, #6]
 80097a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80097a8:	d802      	bhi.n	80097b0 <ff_convert+0x18>
		c = chr;
 80097aa:	88fb      	ldrh	r3, [r7, #6]
 80097ac:	81fb      	strh	r3, [r7, #14]
 80097ae:	e025      	b.n	80097fc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d00b      	beq.n	80097ce <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80097b6:	88fb      	ldrh	r3, [r7, #6]
 80097b8:	2bff      	cmp	r3, #255	@ 0xff
 80097ba:	d805      	bhi.n	80097c8 <ff_convert+0x30>
 80097bc:	88fb      	ldrh	r3, [r7, #6]
 80097be:	3b80      	subs	r3, #128	@ 0x80
 80097c0:	4a12      	ldr	r2, [pc, #72]	@ (800980c <ff_convert+0x74>)
 80097c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097c6:	e000      	b.n	80097ca <ff_convert+0x32>
 80097c8:	2300      	movs	r3, #0
 80097ca:	81fb      	strh	r3, [r7, #14]
 80097cc:	e016      	b.n	80097fc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80097ce:	2300      	movs	r3, #0
 80097d0:	81fb      	strh	r3, [r7, #14]
 80097d2:	e009      	b.n	80097e8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80097d4:	89fb      	ldrh	r3, [r7, #14]
 80097d6:	4a0d      	ldr	r2, [pc, #52]	@ (800980c <ff_convert+0x74>)
 80097d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097dc:	88fa      	ldrh	r2, [r7, #6]
 80097de:	429a      	cmp	r2, r3
 80097e0:	d006      	beq.n	80097f0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80097e2:	89fb      	ldrh	r3, [r7, #14]
 80097e4:	3301      	adds	r3, #1
 80097e6:	81fb      	strh	r3, [r7, #14]
 80097e8:	89fb      	ldrh	r3, [r7, #14]
 80097ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80097ec:	d9f2      	bls.n	80097d4 <ff_convert+0x3c>
 80097ee:	e000      	b.n	80097f2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80097f0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80097f2:	89fb      	ldrh	r3, [r7, #14]
 80097f4:	3380      	adds	r3, #128	@ 0x80
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80097fc:	89fb      	ldrh	r3, [r7, #14]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3714      	adds	r7, #20
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	0800a44c 	.word	0x0800a44c

08009810 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009810:	b480      	push	{r7}
 8009812:	b087      	sub	sp, #28
 8009814:	af00      	add	r7, sp, #0
 8009816:	4603      	mov	r3, r0
 8009818:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800981a:	88fb      	ldrh	r3, [r7, #6]
 800981c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009820:	d201      	bcs.n	8009826 <ff_wtoupper+0x16>
 8009822:	4b3e      	ldr	r3, [pc, #248]	@ (800991c <ff_wtoupper+0x10c>)
 8009824:	e000      	b.n	8009828 <ff_wtoupper+0x18>
 8009826:	4b3e      	ldr	r3, [pc, #248]	@ (8009920 <ff_wtoupper+0x110>)
 8009828:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	1c9a      	adds	r2, r3, #2
 800982e:	617a      	str	r2, [r7, #20]
 8009830:	881b      	ldrh	r3, [r3, #0]
 8009832:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009834:	8a7b      	ldrh	r3, [r7, #18]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d068      	beq.n	800990c <ff_wtoupper+0xfc>
 800983a:	88fa      	ldrh	r2, [r7, #6]
 800983c:	8a7b      	ldrh	r3, [r7, #18]
 800983e:	429a      	cmp	r2, r3
 8009840:	d364      	bcc.n	800990c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	1c9a      	adds	r2, r3, #2
 8009846:	617a      	str	r2, [r7, #20]
 8009848:	881b      	ldrh	r3, [r3, #0]
 800984a:	823b      	strh	r3, [r7, #16]
 800984c:	8a3b      	ldrh	r3, [r7, #16]
 800984e:	0a1b      	lsrs	r3, r3, #8
 8009850:	81fb      	strh	r3, [r7, #14]
 8009852:	8a3b      	ldrh	r3, [r7, #16]
 8009854:	b2db      	uxtb	r3, r3
 8009856:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009858:	88fa      	ldrh	r2, [r7, #6]
 800985a:	8a79      	ldrh	r1, [r7, #18]
 800985c:	8a3b      	ldrh	r3, [r7, #16]
 800985e:	440b      	add	r3, r1
 8009860:	429a      	cmp	r2, r3
 8009862:	da49      	bge.n	80098f8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8009864:	89fb      	ldrh	r3, [r7, #14]
 8009866:	2b08      	cmp	r3, #8
 8009868:	d84f      	bhi.n	800990a <ff_wtoupper+0xfa>
 800986a:	a201      	add	r2, pc, #4	@ (adr r2, 8009870 <ff_wtoupper+0x60>)
 800986c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009870:	08009895 	.word	0x08009895
 8009874:	080098a7 	.word	0x080098a7
 8009878:	080098bd 	.word	0x080098bd
 800987c:	080098c5 	.word	0x080098c5
 8009880:	080098cd 	.word	0x080098cd
 8009884:	080098d5 	.word	0x080098d5
 8009888:	080098dd 	.word	0x080098dd
 800988c:	080098e5 	.word	0x080098e5
 8009890:	080098ed 	.word	0x080098ed
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009894:	88fa      	ldrh	r2, [r7, #6]
 8009896:	8a7b      	ldrh	r3, [r7, #18]
 8009898:	1ad3      	subs	r3, r2, r3
 800989a:	005b      	lsls	r3, r3, #1
 800989c:	697a      	ldr	r2, [r7, #20]
 800989e:	4413      	add	r3, r2
 80098a0:	881b      	ldrh	r3, [r3, #0]
 80098a2:	80fb      	strh	r3, [r7, #6]
 80098a4:	e027      	b.n	80098f6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80098a6:	88fa      	ldrh	r2, [r7, #6]
 80098a8:	8a7b      	ldrh	r3, [r7, #18]
 80098aa:	1ad3      	subs	r3, r2, r3
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	f003 0301 	and.w	r3, r3, #1
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	88fa      	ldrh	r2, [r7, #6]
 80098b6:	1ad3      	subs	r3, r2, r3
 80098b8:	80fb      	strh	r3, [r7, #6]
 80098ba:	e01c      	b.n	80098f6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80098bc:	88fb      	ldrh	r3, [r7, #6]
 80098be:	3b10      	subs	r3, #16
 80098c0:	80fb      	strh	r3, [r7, #6]
 80098c2:	e018      	b.n	80098f6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80098c4:	88fb      	ldrh	r3, [r7, #6]
 80098c6:	3b20      	subs	r3, #32
 80098c8:	80fb      	strh	r3, [r7, #6]
 80098ca:	e014      	b.n	80098f6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80098cc:	88fb      	ldrh	r3, [r7, #6]
 80098ce:	3b30      	subs	r3, #48	@ 0x30
 80098d0:	80fb      	strh	r3, [r7, #6]
 80098d2:	e010      	b.n	80098f6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80098d4:	88fb      	ldrh	r3, [r7, #6]
 80098d6:	3b1a      	subs	r3, #26
 80098d8:	80fb      	strh	r3, [r7, #6]
 80098da:	e00c      	b.n	80098f6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80098dc:	88fb      	ldrh	r3, [r7, #6]
 80098de:	3308      	adds	r3, #8
 80098e0:	80fb      	strh	r3, [r7, #6]
 80098e2:	e008      	b.n	80098f6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80098e4:	88fb      	ldrh	r3, [r7, #6]
 80098e6:	3b50      	subs	r3, #80	@ 0x50
 80098e8:	80fb      	strh	r3, [r7, #6]
 80098ea:	e004      	b.n	80098f6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80098ec:	88fb      	ldrh	r3, [r7, #6]
 80098ee:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80098f2:	80fb      	strh	r3, [r7, #6]
 80098f4:	bf00      	nop
			}
			break;
 80098f6:	e008      	b.n	800990a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80098f8:	89fb      	ldrh	r3, [r7, #14]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d195      	bne.n	800982a <ff_wtoupper+0x1a>
 80098fe:	8a3b      	ldrh	r3, [r7, #16]
 8009900:	005b      	lsls	r3, r3, #1
 8009902:	697a      	ldr	r2, [r7, #20]
 8009904:	4413      	add	r3, r2
 8009906:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009908:	e78f      	b.n	800982a <ff_wtoupper+0x1a>
			break;
 800990a:	bf00      	nop
	}

	return chr;
 800990c:	88fb      	ldrh	r3, [r7, #6]
}
 800990e:	4618      	mov	r0, r3
 8009910:	371c      	adds	r7, #28
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop
 800991c:	0800a54c 	.word	0x0800a54c
 8009920:	0800a740 	.word	0x0800a740

08009924 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 f811 	bl	8009954 <malloc>
 8009932:	4603      	mov	r3, r0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3708      	adds	r7, #8
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 f80d 	bl	8009964 <free>
}
 800994a:	bf00      	nop
 800994c:	3708      	adds	r7, #8
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
	...

08009954 <malloc>:
 8009954:	4b02      	ldr	r3, [pc, #8]	@ (8009960 <malloc+0xc>)
 8009956:	4601      	mov	r1, r0
 8009958:	6818      	ldr	r0, [r3, #0]
 800995a:	f000 b82d 	b.w	80099b8 <_malloc_r>
 800995e:	bf00      	nop
 8009960:	20000010 	.word	0x20000010

08009964 <free>:
 8009964:	4b02      	ldr	r3, [pc, #8]	@ (8009970 <free+0xc>)
 8009966:	4601      	mov	r1, r0
 8009968:	6818      	ldr	r0, [r3, #0]
 800996a:	f000 b915 	b.w	8009b98 <_free_r>
 800996e:	bf00      	nop
 8009970:	20000010 	.word	0x20000010

08009974 <sbrk_aligned>:
 8009974:	b570      	push	{r4, r5, r6, lr}
 8009976:	4e0f      	ldr	r6, [pc, #60]	@ (80099b4 <sbrk_aligned+0x40>)
 8009978:	460c      	mov	r4, r1
 800997a:	6831      	ldr	r1, [r6, #0]
 800997c:	4605      	mov	r5, r0
 800997e:	b911      	cbnz	r1, 8009986 <sbrk_aligned+0x12>
 8009980:	f000 f8ce 	bl	8009b20 <_sbrk_r>
 8009984:	6030      	str	r0, [r6, #0]
 8009986:	4621      	mov	r1, r4
 8009988:	4628      	mov	r0, r5
 800998a:	f000 f8c9 	bl	8009b20 <_sbrk_r>
 800998e:	1c43      	adds	r3, r0, #1
 8009990:	d103      	bne.n	800999a <sbrk_aligned+0x26>
 8009992:	f04f 34ff 	mov.w	r4, #4294967295
 8009996:	4620      	mov	r0, r4
 8009998:	bd70      	pop	{r4, r5, r6, pc}
 800999a:	1cc4      	adds	r4, r0, #3
 800999c:	f024 0403 	bic.w	r4, r4, #3
 80099a0:	42a0      	cmp	r0, r4
 80099a2:	d0f8      	beq.n	8009996 <sbrk_aligned+0x22>
 80099a4:	1a21      	subs	r1, r4, r0
 80099a6:	4628      	mov	r0, r5
 80099a8:	f000 f8ba 	bl	8009b20 <_sbrk_r>
 80099ac:	3001      	adds	r0, #1
 80099ae:	d1f2      	bne.n	8009996 <sbrk_aligned+0x22>
 80099b0:	e7ef      	b.n	8009992 <sbrk_aligned+0x1e>
 80099b2:	bf00      	nop
 80099b4:	20008a8c 	.word	0x20008a8c

080099b8 <_malloc_r>:
 80099b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099bc:	1ccd      	adds	r5, r1, #3
 80099be:	f025 0503 	bic.w	r5, r5, #3
 80099c2:	3508      	adds	r5, #8
 80099c4:	2d0c      	cmp	r5, #12
 80099c6:	bf38      	it	cc
 80099c8:	250c      	movcc	r5, #12
 80099ca:	2d00      	cmp	r5, #0
 80099cc:	4606      	mov	r6, r0
 80099ce:	db01      	blt.n	80099d4 <_malloc_r+0x1c>
 80099d0:	42a9      	cmp	r1, r5
 80099d2:	d904      	bls.n	80099de <_malloc_r+0x26>
 80099d4:	230c      	movs	r3, #12
 80099d6:	6033      	str	r3, [r6, #0]
 80099d8:	2000      	movs	r0, #0
 80099da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ab4 <_malloc_r+0xfc>
 80099e2:	f000 f869 	bl	8009ab8 <__malloc_lock>
 80099e6:	f8d8 3000 	ldr.w	r3, [r8]
 80099ea:	461c      	mov	r4, r3
 80099ec:	bb44      	cbnz	r4, 8009a40 <_malloc_r+0x88>
 80099ee:	4629      	mov	r1, r5
 80099f0:	4630      	mov	r0, r6
 80099f2:	f7ff ffbf 	bl	8009974 <sbrk_aligned>
 80099f6:	1c43      	adds	r3, r0, #1
 80099f8:	4604      	mov	r4, r0
 80099fa:	d158      	bne.n	8009aae <_malloc_r+0xf6>
 80099fc:	f8d8 4000 	ldr.w	r4, [r8]
 8009a00:	4627      	mov	r7, r4
 8009a02:	2f00      	cmp	r7, #0
 8009a04:	d143      	bne.n	8009a8e <_malloc_r+0xd6>
 8009a06:	2c00      	cmp	r4, #0
 8009a08:	d04b      	beq.n	8009aa2 <_malloc_r+0xea>
 8009a0a:	6823      	ldr	r3, [r4, #0]
 8009a0c:	4639      	mov	r1, r7
 8009a0e:	4630      	mov	r0, r6
 8009a10:	eb04 0903 	add.w	r9, r4, r3
 8009a14:	f000 f884 	bl	8009b20 <_sbrk_r>
 8009a18:	4581      	cmp	r9, r0
 8009a1a:	d142      	bne.n	8009aa2 <_malloc_r+0xea>
 8009a1c:	6821      	ldr	r1, [r4, #0]
 8009a1e:	1a6d      	subs	r5, r5, r1
 8009a20:	4629      	mov	r1, r5
 8009a22:	4630      	mov	r0, r6
 8009a24:	f7ff ffa6 	bl	8009974 <sbrk_aligned>
 8009a28:	3001      	adds	r0, #1
 8009a2a:	d03a      	beq.n	8009aa2 <_malloc_r+0xea>
 8009a2c:	6823      	ldr	r3, [r4, #0]
 8009a2e:	442b      	add	r3, r5
 8009a30:	6023      	str	r3, [r4, #0]
 8009a32:	f8d8 3000 	ldr.w	r3, [r8]
 8009a36:	685a      	ldr	r2, [r3, #4]
 8009a38:	bb62      	cbnz	r2, 8009a94 <_malloc_r+0xdc>
 8009a3a:	f8c8 7000 	str.w	r7, [r8]
 8009a3e:	e00f      	b.n	8009a60 <_malloc_r+0xa8>
 8009a40:	6822      	ldr	r2, [r4, #0]
 8009a42:	1b52      	subs	r2, r2, r5
 8009a44:	d420      	bmi.n	8009a88 <_malloc_r+0xd0>
 8009a46:	2a0b      	cmp	r2, #11
 8009a48:	d917      	bls.n	8009a7a <_malloc_r+0xc2>
 8009a4a:	1961      	adds	r1, r4, r5
 8009a4c:	42a3      	cmp	r3, r4
 8009a4e:	6025      	str	r5, [r4, #0]
 8009a50:	bf18      	it	ne
 8009a52:	6059      	strne	r1, [r3, #4]
 8009a54:	6863      	ldr	r3, [r4, #4]
 8009a56:	bf08      	it	eq
 8009a58:	f8c8 1000 	streq.w	r1, [r8]
 8009a5c:	5162      	str	r2, [r4, r5]
 8009a5e:	604b      	str	r3, [r1, #4]
 8009a60:	4630      	mov	r0, r6
 8009a62:	f000 f82f 	bl	8009ac4 <__malloc_unlock>
 8009a66:	f104 000b 	add.w	r0, r4, #11
 8009a6a:	1d23      	adds	r3, r4, #4
 8009a6c:	f020 0007 	bic.w	r0, r0, #7
 8009a70:	1ac2      	subs	r2, r0, r3
 8009a72:	bf1c      	itt	ne
 8009a74:	1a1b      	subne	r3, r3, r0
 8009a76:	50a3      	strne	r3, [r4, r2]
 8009a78:	e7af      	b.n	80099da <_malloc_r+0x22>
 8009a7a:	6862      	ldr	r2, [r4, #4]
 8009a7c:	42a3      	cmp	r3, r4
 8009a7e:	bf0c      	ite	eq
 8009a80:	f8c8 2000 	streq.w	r2, [r8]
 8009a84:	605a      	strne	r2, [r3, #4]
 8009a86:	e7eb      	b.n	8009a60 <_malloc_r+0xa8>
 8009a88:	4623      	mov	r3, r4
 8009a8a:	6864      	ldr	r4, [r4, #4]
 8009a8c:	e7ae      	b.n	80099ec <_malloc_r+0x34>
 8009a8e:	463c      	mov	r4, r7
 8009a90:	687f      	ldr	r7, [r7, #4]
 8009a92:	e7b6      	b.n	8009a02 <_malloc_r+0x4a>
 8009a94:	461a      	mov	r2, r3
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	42a3      	cmp	r3, r4
 8009a9a:	d1fb      	bne.n	8009a94 <_malloc_r+0xdc>
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	6053      	str	r3, [r2, #4]
 8009aa0:	e7de      	b.n	8009a60 <_malloc_r+0xa8>
 8009aa2:	230c      	movs	r3, #12
 8009aa4:	6033      	str	r3, [r6, #0]
 8009aa6:	4630      	mov	r0, r6
 8009aa8:	f000 f80c 	bl	8009ac4 <__malloc_unlock>
 8009aac:	e794      	b.n	80099d8 <_malloc_r+0x20>
 8009aae:	6005      	str	r5, [r0, #0]
 8009ab0:	e7d6      	b.n	8009a60 <_malloc_r+0xa8>
 8009ab2:	bf00      	nop
 8009ab4:	20008a90 	.word	0x20008a90

08009ab8 <__malloc_lock>:
 8009ab8:	4801      	ldr	r0, [pc, #4]	@ (8009ac0 <__malloc_lock+0x8>)
 8009aba:	f000 b86b 	b.w	8009b94 <__retarget_lock_acquire_recursive>
 8009abe:	bf00      	nop
 8009ac0:	20008bd0 	.word	0x20008bd0

08009ac4 <__malloc_unlock>:
 8009ac4:	4801      	ldr	r0, [pc, #4]	@ (8009acc <__malloc_unlock+0x8>)
 8009ac6:	f000 b866 	b.w	8009b96 <__retarget_lock_release_recursive>
 8009aca:	bf00      	nop
 8009acc:	20008bd0 	.word	0x20008bd0

08009ad0 <siprintf>:
 8009ad0:	b40e      	push	{r1, r2, r3}
 8009ad2:	b500      	push	{lr}
 8009ad4:	b09c      	sub	sp, #112	@ 0x70
 8009ad6:	ab1d      	add	r3, sp, #116	@ 0x74
 8009ad8:	9002      	str	r0, [sp, #8]
 8009ada:	9006      	str	r0, [sp, #24]
 8009adc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009ae0:	4809      	ldr	r0, [pc, #36]	@ (8009b08 <siprintf+0x38>)
 8009ae2:	9107      	str	r1, [sp, #28]
 8009ae4:	9104      	str	r1, [sp, #16]
 8009ae6:	4909      	ldr	r1, [pc, #36]	@ (8009b0c <siprintf+0x3c>)
 8009ae8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009aec:	9105      	str	r1, [sp, #20]
 8009aee:	6800      	ldr	r0, [r0, #0]
 8009af0:	9301      	str	r3, [sp, #4]
 8009af2:	a902      	add	r1, sp, #8
 8009af4:	f000 f8f6 	bl	8009ce4 <_svfiprintf_r>
 8009af8:	9b02      	ldr	r3, [sp, #8]
 8009afa:	2200      	movs	r2, #0
 8009afc:	701a      	strb	r2, [r3, #0]
 8009afe:	b01c      	add	sp, #112	@ 0x70
 8009b00:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b04:	b003      	add	sp, #12
 8009b06:	4770      	bx	lr
 8009b08:	20000010 	.word	0x20000010
 8009b0c:	ffff0208 	.word	0xffff0208

08009b10 <memset>:
 8009b10:	4402      	add	r2, r0
 8009b12:	4603      	mov	r3, r0
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d100      	bne.n	8009b1a <memset+0xa>
 8009b18:	4770      	bx	lr
 8009b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b1e:	e7f9      	b.n	8009b14 <memset+0x4>

08009b20 <_sbrk_r>:
 8009b20:	b538      	push	{r3, r4, r5, lr}
 8009b22:	4d06      	ldr	r5, [pc, #24]	@ (8009b3c <_sbrk_r+0x1c>)
 8009b24:	2300      	movs	r3, #0
 8009b26:	4604      	mov	r4, r0
 8009b28:	4608      	mov	r0, r1
 8009b2a:	602b      	str	r3, [r5, #0]
 8009b2c:	f7f7 fb6e 	bl	800120c <_sbrk>
 8009b30:	1c43      	adds	r3, r0, #1
 8009b32:	d102      	bne.n	8009b3a <_sbrk_r+0x1a>
 8009b34:	682b      	ldr	r3, [r5, #0]
 8009b36:	b103      	cbz	r3, 8009b3a <_sbrk_r+0x1a>
 8009b38:	6023      	str	r3, [r4, #0]
 8009b3a:	bd38      	pop	{r3, r4, r5, pc}
 8009b3c:	20008bcc 	.word	0x20008bcc

08009b40 <__errno>:
 8009b40:	4b01      	ldr	r3, [pc, #4]	@ (8009b48 <__errno+0x8>)
 8009b42:	6818      	ldr	r0, [r3, #0]
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
 8009b48:	20000010 	.word	0x20000010

08009b4c <__libc_init_array>:
 8009b4c:	b570      	push	{r4, r5, r6, lr}
 8009b4e:	4d0d      	ldr	r5, [pc, #52]	@ (8009b84 <__libc_init_array+0x38>)
 8009b50:	4c0d      	ldr	r4, [pc, #52]	@ (8009b88 <__libc_init_array+0x3c>)
 8009b52:	1b64      	subs	r4, r4, r5
 8009b54:	10a4      	asrs	r4, r4, #2
 8009b56:	2600      	movs	r6, #0
 8009b58:	42a6      	cmp	r6, r4
 8009b5a:	d109      	bne.n	8009b70 <__libc_init_array+0x24>
 8009b5c:	4d0b      	ldr	r5, [pc, #44]	@ (8009b8c <__libc_init_array+0x40>)
 8009b5e:	4c0c      	ldr	r4, [pc, #48]	@ (8009b90 <__libc_init_array+0x44>)
 8009b60:	f000 fba8 	bl	800a2b4 <_init>
 8009b64:	1b64      	subs	r4, r4, r5
 8009b66:	10a4      	asrs	r4, r4, #2
 8009b68:	2600      	movs	r6, #0
 8009b6a:	42a6      	cmp	r6, r4
 8009b6c:	d105      	bne.n	8009b7a <__libc_init_array+0x2e>
 8009b6e:	bd70      	pop	{r4, r5, r6, pc}
 8009b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b74:	4798      	blx	r3
 8009b76:	3601      	adds	r6, #1
 8009b78:	e7ee      	b.n	8009b58 <__libc_init_array+0xc>
 8009b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b7e:	4798      	blx	r3
 8009b80:	3601      	adds	r6, #1
 8009b82:	e7f2      	b.n	8009b6a <__libc_init_array+0x1e>
 8009b84:	0800a838 	.word	0x0800a838
 8009b88:	0800a838 	.word	0x0800a838
 8009b8c:	0800a838 	.word	0x0800a838
 8009b90:	0800a83c 	.word	0x0800a83c

08009b94 <__retarget_lock_acquire_recursive>:
 8009b94:	4770      	bx	lr

08009b96 <__retarget_lock_release_recursive>:
 8009b96:	4770      	bx	lr

08009b98 <_free_r>:
 8009b98:	b538      	push	{r3, r4, r5, lr}
 8009b9a:	4605      	mov	r5, r0
 8009b9c:	2900      	cmp	r1, #0
 8009b9e:	d041      	beq.n	8009c24 <_free_r+0x8c>
 8009ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ba4:	1f0c      	subs	r4, r1, #4
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	bfb8      	it	lt
 8009baa:	18e4      	addlt	r4, r4, r3
 8009bac:	f7ff ff84 	bl	8009ab8 <__malloc_lock>
 8009bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8009c28 <_free_r+0x90>)
 8009bb2:	6813      	ldr	r3, [r2, #0]
 8009bb4:	b933      	cbnz	r3, 8009bc4 <_free_r+0x2c>
 8009bb6:	6063      	str	r3, [r4, #4]
 8009bb8:	6014      	str	r4, [r2, #0]
 8009bba:	4628      	mov	r0, r5
 8009bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bc0:	f7ff bf80 	b.w	8009ac4 <__malloc_unlock>
 8009bc4:	42a3      	cmp	r3, r4
 8009bc6:	d908      	bls.n	8009bda <_free_r+0x42>
 8009bc8:	6820      	ldr	r0, [r4, #0]
 8009bca:	1821      	adds	r1, r4, r0
 8009bcc:	428b      	cmp	r3, r1
 8009bce:	bf01      	itttt	eq
 8009bd0:	6819      	ldreq	r1, [r3, #0]
 8009bd2:	685b      	ldreq	r3, [r3, #4]
 8009bd4:	1809      	addeq	r1, r1, r0
 8009bd6:	6021      	streq	r1, [r4, #0]
 8009bd8:	e7ed      	b.n	8009bb6 <_free_r+0x1e>
 8009bda:	461a      	mov	r2, r3
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	b10b      	cbz	r3, 8009be4 <_free_r+0x4c>
 8009be0:	42a3      	cmp	r3, r4
 8009be2:	d9fa      	bls.n	8009bda <_free_r+0x42>
 8009be4:	6811      	ldr	r1, [r2, #0]
 8009be6:	1850      	adds	r0, r2, r1
 8009be8:	42a0      	cmp	r0, r4
 8009bea:	d10b      	bne.n	8009c04 <_free_r+0x6c>
 8009bec:	6820      	ldr	r0, [r4, #0]
 8009bee:	4401      	add	r1, r0
 8009bf0:	1850      	adds	r0, r2, r1
 8009bf2:	4283      	cmp	r3, r0
 8009bf4:	6011      	str	r1, [r2, #0]
 8009bf6:	d1e0      	bne.n	8009bba <_free_r+0x22>
 8009bf8:	6818      	ldr	r0, [r3, #0]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	6053      	str	r3, [r2, #4]
 8009bfe:	4408      	add	r0, r1
 8009c00:	6010      	str	r0, [r2, #0]
 8009c02:	e7da      	b.n	8009bba <_free_r+0x22>
 8009c04:	d902      	bls.n	8009c0c <_free_r+0x74>
 8009c06:	230c      	movs	r3, #12
 8009c08:	602b      	str	r3, [r5, #0]
 8009c0a:	e7d6      	b.n	8009bba <_free_r+0x22>
 8009c0c:	6820      	ldr	r0, [r4, #0]
 8009c0e:	1821      	adds	r1, r4, r0
 8009c10:	428b      	cmp	r3, r1
 8009c12:	bf04      	itt	eq
 8009c14:	6819      	ldreq	r1, [r3, #0]
 8009c16:	685b      	ldreq	r3, [r3, #4]
 8009c18:	6063      	str	r3, [r4, #4]
 8009c1a:	bf04      	itt	eq
 8009c1c:	1809      	addeq	r1, r1, r0
 8009c1e:	6021      	streq	r1, [r4, #0]
 8009c20:	6054      	str	r4, [r2, #4]
 8009c22:	e7ca      	b.n	8009bba <_free_r+0x22>
 8009c24:	bd38      	pop	{r3, r4, r5, pc}
 8009c26:	bf00      	nop
 8009c28:	20008a90 	.word	0x20008a90

08009c2c <__ssputs_r>:
 8009c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c30:	688e      	ldr	r6, [r1, #8]
 8009c32:	461f      	mov	r7, r3
 8009c34:	42be      	cmp	r6, r7
 8009c36:	680b      	ldr	r3, [r1, #0]
 8009c38:	4682      	mov	sl, r0
 8009c3a:	460c      	mov	r4, r1
 8009c3c:	4690      	mov	r8, r2
 8009c3e:	d82d      	bhi.n	8009c9c <__ssputs_r+0x70>
 8009c40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009c48:	d026      	beq.n	8009c98 <__ssputs_r+0x6c>
 8009c4a:	6965      	ldr	r5, [r4, #20]
 8009c4c:	6909      	ldr	r1, [r1, #16]
 8009c4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c52:	eba3 0901 	sub.w	r9, r3, r1
 8009c56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c5a:	1c7b      	adds	r3, r7, #1
 8009c5c:	444b      	add	r3, r9
 8009c5e:	106d      	asrs	r5, r5, #1
 8009c60:	429d      	cmp	r5, r3
 8009c62:	bf38      	it	cc
 8009c64:	461d      	movcc	r5, r3
 8009c66:	0553      	lsls	r3, r2, #21
 8009c68:	d527      	bpl.n	8009cba <__ssputs_r+0x8e>
 8009c6a:	4629      	mov	r1, r5
 8009c6c:	f7ff fea4 	bl	80099b8 <_malloc_r>
 8009c70:	4606      	mov	r6, r0
 8009c72:	b360      	cbz	r0, 8009cce <__ssputs_r+0xa2>
 8009c74:	6921      	ldr	r1, [r4, #16]
 8009c76:	464a      	mov	r2, r9
 8009c78:	f000 fad8 	bl	800a22c <memcpy>
 8009c7c:	89a3      	ldrh	r3, [r4, #12]
 8009c7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c86:	81a3      	strh	r3, [r4, #12]
 8009c88:	6126      	str	r6, [r4, #16]
 8009c8a:	6165      	str	r5, [r4, #20]
 8009c8c:	444e      	add	r6, r9
 8009c8e:	eba5 0509 	sub.w	r5, r5, r9
 8009c92:	6026      	str	r6, [r4, #0]
 8009c94:	60a5      	str	r5, [r4, #8]
 8009c96:	463e      	mov	r6, r7
 8009c98:	42be      	cmp	r6, r7
 8009c9a:	d900      	bls.n	8009c9e <__ssputs_r+0x72>
 8009c9c:	463e      	mov	r6, r7
 8009c9e:	6820      	ldr	r0, [r4, #0]
 8009ca0:	4632      	mov	r2, r6
 8009ca2:	4641      	mov	r1, r8
 8009ca4:	f000 faa8 	bl	800a1f8 <memmove>
 8009ca8:	68a3      	ldr	r3, [r4, #8]
 8009caa:	1b9b      	subs	r3, r3, r6
 8009cac:	60a3      	str	r3, [r4, #8]
 8009cae:	6823      	ldr	r3, [r4, #0]
 8009cb0:	4433      	add	r3, r6
 8009cb2:	6023      	str	r3, [r4, #0]
 8009cb4:	2000      	movs	r0, #0
 8009cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cba:	462a      	mov	r2, r5
 8009cbc:	f000 fac4 	bl	800a248 <_realloc_r>
 8009cc0:	4606      	mov	r6, r0
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	d1e0      	bne.n	8009c88 <__ssputs_r+0x5c>
 8009cc6:	6921      	ldr	r1, [r4, #16]
 8009cc8:	4650      	mov	r0, sl
 8009cca:	f7ff ff65 	bl	8009b98 <_free_r>
 8009cce:	230c      	movs	r3, #12
 8009cd0:	f8ca 3000 	str.w	r3, [sl]
 8009cd4:	89a3      	ldrh	r3, [r4, #12]
 8009cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cda:	81a3      	strh	r3, [r4, #12]
 8009cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce0:	e7e9      	b.n	8009cb6 <__ssputs_r+0x8a>
	...

08009ce4 <_svfiprintf_r>:
 8009ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce8:	4698      	mov	r8, r3
 8009cea:	898b      	ldrh	r3, [r1, #12]
 8009cec:	061b      	lsls	r3, r3, #24
 8009cee:	b09d      	sub	sp, #116	@ 0x74
 8009cf0:	4607      	mov	r7, r0
 8009cf2:	460d      	mov	r5, r1
 8009cf4:	4614      	mov	r4, r2
 8009cf6:	d510      	bpl.n	8009d1a <_svfiprintf_r+0x36>
 8009cf8:	690b      	ldr	r3, [r1, #16]
 8009cfa:	b973      	cbnz	r3, 8009d1a <_svfiprintf_r+0x36>
 8009cfc:	2140      	movs	r1, #64	@ 0x40
 8009cfe:	f7ff fe5b 	bl	80099b8 <_malloc_r>
 8009d02:	6028      	str	r0, [r5, #0]
 8009d04:	6128      	str	r0, [r5, #16]
 8009d06:	b930      	cbnz	r0, 8009d16 <_svfiprintf_r+0x32>
 8009d08:	230c      	movs	r3, #12
 8009d0a:	603b      	str	r3, [r7, #0]
 8009d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d10:	b01d      	add	sp, #116	@ 0x74
 8009d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d16:	2340      	movs	r3, #64	@ 0x40
 8009d18:	616b      	str	r3, [r5, #20]
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d1e:	2320      	movs	r3, #32
 8009d20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d24:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d28:	2330      	movs	r3, #48	@ 0x30
 8009d2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009ec8 <_svfiprintf_r+0x1e4>
 8009d2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d32:	f04f 0901 	mov.w	r9, #1
 8009d36:	4623      	mov	r3, r4
 8009d38:	469a      	mov	sl, r3
 8009d3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d3e:	b10a      	cbz	r2, 8009d44 <_svfiprintf_r+0x60>
 8009d40:	2a25      	cmp	r2, #37	@ 0x25
 8009d42:	d1f9      	bne.n	8009d38 <_svfiprintf_r+0x54>
 8009d44:	ebba 0b04 	subs.w	fp, sl, r4
 8009d48:	d00b      	beq.n	8009d62 <_svfiprintf_r+0x7e>
 8009d4a:	465b      	mov	r3, fp
 8009d4c:	4622      	mov	r2, r4
 8009d4e:	4629      	mov	r1, r5
 8009d50:	4638      	mov	r0, r7
 8009d52:	f7ff ff6b 	bl	8009c2c <__ssputs_r>
 8009d56:	3001      	adds	r0, #1
 8009d58:	f000 80a7 	beq.w	8009eaa <_svfiprintf_r+0x1c6>
 8009d5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d5e:	445a      	add	r2, fp
 8009d60:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d62:	f89a 3000 	ldrb.w	r3, [sl]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	f000 809f 	beq.w	8009eaa <_svfiprintf_r+0x1c6>
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d76:	f10a 0a01 	add.w	sl, sl, #1
 8009d7a:	9304      	str	r3, [sp, #16]
 8009d7c:	9307      	str	r3, [sp, #28]
 8009d7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d82:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d84:	4654      	mov	r4, sl
 8009d86:	2205      	movs	r2, #5
 8009d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d8c:	484e      	ldr	r0, [pc, #312]	@ (8009ec8 <_svfiprintf_r+0x1e4>)
 8009d8e:	f7f6 fa2f 	bl	80001f0 <memchr>
 8009d92:	9a04      	ldr	r2, [sp, #16]
 8009d94:	b9d8      	cbnz	r0, 8009dce <_svfiprintf_r+0xea>
 8009d96:	06d0      	lsls	r0, r2, #27
 8009d98:	bf44      	itt	mi
 8009d9a:	2320      	movmi	r3, #32
 8009d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009da0:	0711      	lsls	r1, r2, #28
 8009da2:	bf44      	itt	mi
 8009da4:	232b      	movmi	r3, #43	@ 0x2b
 8009da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009daa:	f89a 3000 	ldrb.w	r3, [sl]
 8009dae:	2b2a      	cmp	r3, #42	@ 0x2a
 8009db0:	d015      	beq.n	8009dde <_svfiprintf_r+0xfa>
 8009db2:	9a07      	ldr	r2, [sp, #28]
 8009db4:	4654      	mov	r4, sl
 8009db6:	2000      	movs	r0, #0
 8009db8:	f04f 0c0a 	mov.w	ip, #10
 8009dbc:	4621      	mov	r1, r4
 8009dbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dc2:	3b30      	subs	r3, #48	@ 0x30
 8009dc4:	2b09      	cmp	r3, #9
 8009dc6:	d94b      	bls.n	8009e60 <_svfiprintf_r+0x17c>
 8009dc8:	b1b0      	cbz	r0, 8009df8 <_svfiprintf_r+0x114>
 8009dca:	9207      	str	r2, [sp, #28]
 8009dcc:	e014      	b.n	8009df8 <_svfiprintf_r+0x114>
 8009dce:	eba0 0308 	sub.w	r3, r0, r8
 8009dd2:	fa09 f303 	lsl.w	r3, r9, r3
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	9304      	str	r3, [sp, #16]
 8009dda:	46a2      	mov	sl, r4
 8009ddc:	e7d2      	b.n	8009d84 <_svfiprintf_r+0xa0>
 8009dde:	9b03      	ldr	r3, [sp, #12]
 8009de0:	1d19      	adds	r1, r3, #4
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	9103      	str	r1, [sp, #12]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	bfbb      	ittet	lt
 8009dea:	425b      	neglt	r3, r3
 8009dec:	f042 0202 	orrlt.w	r2, r2, #2
 8009df0:	9307      	strge	r3, [sp, #28]
 8009df2:	9307      	strlt	r3, [sp, #28]
 8009df4:	bfb8      	it	lt
 8009df6:	9204      	strlt	r2, [sp, #16]
 8009df8:	7823      	ldrb	r3, [r4, #0]
 8009dfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8009dfc:	d10a      	bne.n	8009e14 <_svfiprintf_r+0x130>
 8009dfe:	7863      	ldrb	r3, [r4, #1]
 8009e00:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e02:	d132      	bne.n	8009e6a <_svfiprintf_r+0x186>
 8009e04:	9b03      	ldr	r3, [sp, #12]
 8009e06:	1d1a      	adds	r2, r3, #4
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	9203      	str	r2, [sp, #12]
 8009e0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e10:	3402      	adds	r4, #2
 8009e12:	9305      	str	r3, [sp, #20]
 8009e14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009ed8 <_svfiprintf_r+0x1f4>
 8009e18:	7821      	ldrb	r1, [r4, #0]
 8009e1a:	2203      	movs	r2, #3
 8009e1c:	4650      	mov	r0, sl
 8009e1e:	f7f6 f9e7 	bl	80001f0 <memchr>
 8009e22:	b138      	cbz	r0, 8009e34 <_svfiprintf_r+0x150>
 8009e24:	9b04      	ldr	r3, [sp, #16]
 8009e26:	eba0 000a 	sub.w	r0, r0, sl
 8009e2a:	2240      	movs	r2, #64	@ 0x40
 8009e2c:	4082      	lsls	r2, r0
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	3401      	adds	r4, #1
 8009e32:	9304      	str	r3, [sp, #16]
 8009e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e38:	4824      	ldr	r0, [pc, #144]	@ (8009ecc <_svfiprintf_r+0x1e8>)
 8009e3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e3e:	2206      	movs	r2, #6
 8009e40:	f7f6 f9d6 	bl	80001f0 <memchr>
 8009e44:	2800      	cmp	r0, #0
 8009e46:	d036      	beq.n	8009eb6 <_svfiprintf_r+0x1d2>
 8009e48:	4b21      	ldr	r3, [pc, #132]	@ (8009ed0 <_svfiprintf_r+0x1ec>)
 8009e4a:	bb1b      	cbnz	r3, 8009e94 <_svfiprintf_r+0x1b0>
 8009e4c:	9b03      	ldr	r3, [sp, #12]
 8009e4e:	3307      	adds	r3, #7
 8009e50:	f023 0307 	bic.w	r3, r3, #7
 8009e54:	3308      	adds	r3, #8
 8009e56:	9303      	str	r3, [sp, #12]
 8009e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e5a:	4433      	add	r3, r6
 8009e5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e5e:	e76a      	b.n	8009d36 <_svfiprintf_r+0x52>
 8009e60:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e64:	460c      	mov	r4, r1
 8009e66:	2001      	movs	r0, #1
 8009e68:	e7a8      	b.n	8009dbc <_svfiprintf_r+0xd8>
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	3401      	adds	r4, #1
 8009e6e:	9305      	str	r3, [sp, #20]
 8009e70:	4619      	mov	r1, r3
 8009e72:	f04f 0c0a 	mov.w	ip, #10
 8009e76:	4620      	mov	r0, r4
 8009e78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e7c:	3a30      	subs	r2, #48	@ 0x30
 8009e7e:	2a09      	cmp	r2, #9
 8009e80:	d903      	bls.n	8009e8a <_svfiprintf_r+0x1a6>
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d0c6      	beq.n	8009e14 <_svfiprintf_r+0x130>
 8009e86:	9105      	str	r1, [sp, #20]
 8009e88:	e7c4      	b.n	8009e14 <_svfiprintf_r+0x130>
 8009e8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e8e:	4604      	mov	r4, r0
 8009e90:	2301      	movs	r3, #1
 8009e92:	e7f0      	b.n	8009e76 <_svfiprintf_r+0x192>
 8009e94:	ab03      	add	r3, sp, #12
 8009e96:	9300      	str	r3, [sp, #0]
 8009e98:	462a      	mov	r2, r5
 8009e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8009ed4 <_svfiprintf_r+0x1f0>)
 8009e9c:	a904      	add	r1, sp, #16
 8009e9e:	4638      	mov	r0, r7
 8009ea0:	f3af 8000 	nop.w
 8009ea4:	1c42      	adds	r2, r0, #1
 8009ea6:	4606      	mov	r6, r0
 8009ea8:	d1d6      	bne.n	8009e58 <_svfiprintf_r+0x174>
 8009eaa:	89ab      	ldrh	r3, [r5, #12]
 8009eac:	065b      	lsls	r3, r3, #25
 8009eae:	f53f af2d 	bmi.w	8009d0c <_svfiprintf_r+0x28>
 8009eb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009eb4:	e72c      	b.n	8009d10 <_svfiprintf_r+0x2c>
 8009eb6:	ab03      	add	r3, sp, #12
 8009eb8:	9300      	str	r3, [sp, #0]
 8009eba:	462a      	mov	r2, r5
 8009ebc:	4b05      	ldr	r3, [pc, #20]	@ (8009ed4 <_svfiprintf_r+0x1f0>)
 8009ebe:	a904      	add	r1, sp, #16
 8009ec0:	4638      	mov	r0, r7
 8009ec2:	f000 f879 	bl	8009fb8 <_printf_i>
 8009ec6:	e7ed      	b.n	8009ea4 <_svfiprintf_r+0x1c0>
 8009ec8:	0800a7fc 	.word	0x0800a7fc
 8009ecc:	0800a806 	.word	0x0800a806
 8009ed0:	00000000 	.word	0x00000000
 8009ed4:	08009c2d 	.word	0x08009c2d
 8009ed8:	0800a802 	.word	0x0800a802

08009edc <_printf_common>:
 8009edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee0:	4616      	mov	r6, r2
 8009ee2:	4698      	mov	r8, r3
 8009ee4:	688a      	ldr	r2, [r1, #8]
 8009ee6:	690b      	ldr	r3, [r1, #16]
 8009ee8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009eec:	4293      	cmp	r3, r2
 8009eee:	bfb8      	it	lt
 8009ef0:	4613      	movlt	r3, r2
 8009ef2:	6033      	str	r3, [r6, #0]
 8009ef4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009ef8:	4607      	mov	r7, r0
 8009efa:	460c      	mov	r4, r1
 8009efc:	b10a      	cbz	r2, 8009f02 <_printf_common+0x26>
 8009efe:	3301      	adds	r3, #1
 8009f00:	6033      	str	r3, [r6, #0]
 8009f02:	6823      	ldr	r3, [r4, #0]
 8009f04:	0699      	lsls	r1, r3, #26
 8009f06:	bf42      	ittt	mi
 8009f08:	6833      	ldrmi	r3, [r6, #0]
 8009f0a:	3302      	addmi	r3, #2
 8009f0c:	6033      	strmi	r3, [r6, #0]
 8009f0e:	6825      	ldr	r5, [r4, #0]
 8009f10:	f015 0506 	ands.w	r5, r5, #6
 8009f14:	d106      	bne.n	8009f24 <_printf_common+0x48>
 8009f16:	f104 0a19 	add.w	sl, r4, #25
 8009f1a:	68e3      	ldr	r3, [r4, #12]
 8009f1c:	6832      	ldr	r2, [r6, #0]
 8009f1e:	1a9b      	subs	r3, r3, r2
 8009f20:	42ab      	cmp	r3, r5
 8009f22:	dc26      	bgt.n	8009f72 <_printf_common+0x96>
 8009f24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f28:	6822      	ldr	r2, [r4, #0]
 8009f2a:	3b00      	subs	r3, #0
 8009f2c:	bf18      	it	ne
 8009f2e:	2301      	movne	r3, #1
 8009f30:	0692      	lsls	r2, r2, #26
 8009f32:	d42b      	bmi.n	8009f8c <_printf_common+0xb0>
 8009f34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f38:	4641      	mov	r1, r8
 8009f3a:	4638      	mov	r0, r7
 8009f3c:	47c8      	blx	r9
 8009f3e:	3001      	adds	r0, #1
 8009f40:	d01e      	beq.n	8009f80 <_printf_common+0xa4>
 8009f42:	6823      	ldr	r3, [r4, #0]
 8009f44:	6922      	ldr	r2, [r4, #16]
 8009f46:	f003 0306 	and.w	r3, r3, #6
 8009f4a:	2b04      	cmp	r3, #4
 8009f4c:	bf02      	ittt	eq
 8009f4e:	68e5      	ldreq	r5, [r4, #12]
 8009f50:	6833      	ldreq	r3, [r6, #0]
 8009f52:	1aed      	subeq	r5, r5, r3
 8009f54:	68a3      	ldr	r3, [r4, #8]
 8009f56:	bf0c      	ite	eq
 8009f58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f5c:	2500      	movne	r5, #0
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	bfc4      	itt	gt
 8009f62:	1a9b      	subgt	r3, r3, r2
 8009f64:	18ed      	addgt	r5, r5, r3
 8009f66:	2600      	movs	r6, #0
 8009f68:	341a      	adds	r4, #26
 8009f6a:	42b5      	cmp	r5, r6
 8009f6c:	d11a      	bne.n	8009fa4 <_printf_common+0xc8>
 8009f6e:	2000      	movs	r0, #0
 8009f70:	e008      	b.n	8009f84 <_printf_common+0xa8>
 8009f72:	2301      	movs	r3, #1
 8009f74:	4652      	mov	r2, sl
 8009f76:	4641      	mov	r1, r8
 8009f78:	4638      	mov	r0, r7
 8009f7a:	47c8      	blx	r9
 8009f7c:	3001      	adds	r0, #1
 8009f7e:	d103      	bne.n	8009f88 <_printf_common+0xac>
 8009f80:	f04f 30ff 	mov.w	r0, #4294967295
 8009f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f88:	3501      	adds	r5, #1
 8009f8a:	e7c6      	b.n	8009f1a <_printf_common+0x3e>
 8009f8c:	18e1      	adds	r1, r4, r3
 8009f8e:	1c5a      	adds	r2, r3, #1
 8009f90:	2030      	movs	r0, #48	@ 0x30
 8009f92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f96:	4422      	add	r2, r4
 8009f98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009f9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009fa0:	3302      	adds	r3, #2
 8009fa2:	e7c7      	b.n	8009f34 <_printf_common+0x58>
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	4622      	mov	r2, r4
 8009fa8:	4641      	mov	r1, r8
 8009faa:	4638      	mov	r0, r7
 8009fac:	47c8      	blx	r9
 8009fae:	3001      	adds	r0, #1
 8009fb0:	d0e6      	beq.n	8009f80 <_printf_common+0xa4>
 8009fb2:	3601      	adds	r6, #1
 8009fb4:	e7d9      	b.n	8009f6a <_printf_common+0x8e>
	...

08009fb8 <_printf_i>:
 8009fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fbc:	7e0f      	ldrb	r7, [r1, #24]
 8009fbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009fc0:	2f78      	cmp	r7, #120	@ 0x78
 8009fc2:	4691      	mov	r9, r2
 8009fc4:	4680      	mov	r8, r0
 8009fc6:	460c      	mov	r4, r1
 8009fc8:	469a      	mov	sl, r3
 8009fca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009fce:	d807      	bhi.n	8009fe0 <_printf_i+0x28>
 8009fd0:	2f62      	cmp	r7, #98	@ 0x62
 8009fd2:	d80a      	bhi.n	8009fea <_printf_i+0x32>
 8009fd4:	2f00      	cmp	r7, #0
 8009fd6:	f000 80d2 	beq.w	800a17e <_printf_i+0x1c6>
 8009fda:	2f58      	cmp	r7, #88	@ 0x58
 8009fdc:	f000 80b9 	beq.w	800a152 <_printf_i+0x19a>
 8009fe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009fe4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009fe8:	e03a      	b.n	800a060 <_printf_i+0xa8>
 8009fea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009fee:	2b15      	cmp	r3, #21
 8009ff0:	d8f6      	bhi.n	8009fe0 <_printf_i+0x28>
 8009ff2:	a101      	add	r1, pc, #4	@ (adr r1, 8009ff8 <_printf_i+0x40>)
 8009ff4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ff8:	0800a051 	.word	0x0800a051
 8009ffc:	0800a065 	.word	0x0800a065
 800a000:	08009fe1 	.word	0x08009fe1
 800a004:	08009fe1 	.word	0x08009fe1
 800a008:	08009fe1 	.word	0x08009fe1
 800a00c:	08009fe1 	.word	0x08009fe1
 800a010:	0800a065 	.word	0x0800a065
 800a014:	08009fe1 	.word	0x08009fe1
 800a018:	08009fe1 	.word	0x08009fe1
 800a01c:	08009fe1 	.word	0x08009fe1
 800a020:	08009fe1 	.word	0x08009fe1
 800a024:	0800a165 	.word	0x0800a165
 800a028:	0800a08f 	.word	0x0800a08f
 800a02c:	0800a11f 	.word	0x0800a11f
 800a030:	08009fe1 	.word	0x08009fe1
 800a034:	08009fe1 	.word	0x08009fe1
 800a038:	0800a187 	.word	0x0800a187
 800a03c:	08009fe1 	.word	0x08009fe1
 800a040:	0800a08f 	.word	0x0800a08f
 800a044:	08009fe1 	.word	0x08009fe1
 800a048:	08009fe1 	.word	0x08009fe1
 800a04c:	0800a127 	.word	0x0800a127
 800a050:	6833      	ldr	r3, [r6, #0]
 800a052:	1d1a      	adds	r2, r3, #4
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	6032      	str	r2, [r6, #0]
 800a058:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a05c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a060:	2301      	movs	r3, #1
 800a062:	e09d      	b.n	800a1a0 <_printf_i+0x1e8>
 800a064:	6833      	ldr	r3, [r6, #0]
 800a066:	6820      	ldr	r0, [r4, #0]
 800a068:	1d19      	adds	r1, r3, #4
 800a06a:	6031      	str	r1, [r6, #0]
 800a06c:	0606      	lsls	r6, r0, #24
 800a06e:	d501      	bpl.n	800a074 <_printf_i+0xbc>
 800a070:	681d      	ldr	r5, [r3, #0]
 800a072:	e003      	b.n	800a07c <_printf_i+0xc4>
 800a074:	0645      	lsls	r5, r0, #25
 800a076:	d5fb      	bpl.n	800a070 <_printf_i+0xb8>
 800a078:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a07c:	2d00      	cmp	r5, #0
 800a07e:	da03      	bge.n	800a088 <_printf_i+0xd0>
 800a080:	232d      	movs	r3, #45	@ 0x2d
 800a082:	426d      	negs	r5, r5
 800a084:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a088:	4859      	ldr	r0, [pc, #356]	@ (800a1f0 <_printf_i+0x238>)
 800a08a:	230a      	movs	r3, #10
 800a08c:	e011      	b.n	800a0b2 <_printf_i+0xfa>
 800a08e:	6821      	ldr	r1, [r4, #0]
 800a090:	6833      	ldr	r3, [r6, #0]
 800a092:	0608      	lsls	r0, r1, #24
 800a094:	f853 5b04 	ldr.w	r5, [r3], #4
 800a098:	d402      	bmi.n	800a0a0 <_printf_i+0xe8>
 800a09a:	0649      	lsls	r1, r1, #25
 800a09c:	bf48      	it	mi
 800a09e:	b2ad      	uxthmi	r5, r5
 800a0a0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a0a2:	4853      	ldr	r0, [pc, #332]	@ (800a1f0 <_printf_i+0x238>)
 800a0a4:	6033      	str	r3, [r6, #0]
 800a0a6:	bf14      	ite	ne
 800a0a8:	230a      	movne	r3, #10
 800a0aa:	2308      	moveq	r3, #8
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a0b2:	6866      	ldr	r6, [r4, #4]
 800a0b4:	60a6      	str	r6, [r4, #8]
 800a0b6:	2e00      	cmp	r6, #0
 800a0b8:	bfa2      	ittt	ge
 800a0ba:	6821      	ldrge	r1, [r4, #0]
 800a0bc:	f021 0104 	bicge.w	r1, r1, #4
 800a0c0:	6021      	strge	r1, [r4, #0]
 800a0c2:	b90d      	cbnz	r5, 800a0c8 <_printf_i+0x110>
 800a0c4:	2e00      	cmp	r6, #0
 800a0c6:	d04b      	beq.n	800a160 <_printf_i+0x1a8>
 800a0c8:	4616      	mov	r6, r2
 800a0ca:	fbb5 f1f3 	udiv	r1, r5, r3
 800a0ce:	fb03 5711 	mls	r7, r3, r1, r5
 800a0d2:	5dc7      	ldrb	r7, [r0, r7]
 800a0d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a0d8:	462f      	mov	r7, r5
 800a0da:	42bb      	cmp	r3, r7
 800a0dc:	460d      	mov	r5, r1
 800a0de:	d9f4      	bls.n	800a0ca <_printf_i+0x112>
 800a0e0:	2b08      	cmp	r3, #8
 800a0e2:	d10b      	bne.n	800a0fc <_printf_i+0x144>
 800a0e4:	6823      	ldr	r3, [r4, #0]
 800a0e6:	07df      	lsls	r7, r3, #31
 800a0e8:	d508      	bpl.n	800a0fc <_printf_i+0x144>
 800a0ea:	6923      	ldr	r3, [r4, #16]
 800a0ec:	6861      	ldr	r1, [r4, #4]
 800a0ee:	4299      	cmp	r1, r3
 800a0f0:	bfde      	ittt	le
 800a0f2:	2330      	movle	r3, #48	@ 0x30
 800a0f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a0f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a0fc:	1b92      	subs	r2, r2, r6
 800a0fe:	6122      	str	r2, [r4, #16]
 800a100:	f8cd a000 	str.w	sl, [sp]
 800a104:	464b      	mov	r3, r9
 800a106:	aa03      	add	r2, sp, #12
 800a108:	4621      	mov	r1, r4
 800a10a:	4640      	mov	r0, r8
 800a10c:	f7ff fee6 	bl	8009edc <_printf_common>
 800a110:	3001      	adds	r0, #1
 800a112:	d14a      	bne.n	800a1aa <_printf_i+0x1f2>
 800a114:	f04f 30ff 	mov.w	r0, #4294967295
 800a118:	b004      	add	sp, #16
 800a11a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a11e:	6823      	ldr	r3, [r4, #0]
 800a120:	f043 0320 	orr.w	r3, r3, #32
 800a124:	6023      	str	r3, [r4, #0]
 800a126:	4833      	ldr	r0, [pc, #204]	@ (800a1f4 <_printf_i+0x23c>)
 800a128:	2778      	movs	r7, #120	@ 0x78
 800a12a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a12e:	6823      	ldr	r3, [r4, #0]
 800a130:	6831      	ldr	r1, [r6, #0]
 800a132:	061f      	lsls	r7, r3, #24
 800a134:	f851 5b04 	ldr.w	r5, [r1], #4
 800a138:	d402      	bmi.n	800a140 <_printf_i+0x188>
 800a13a:	065f      	lsls	r7, r3, #25
 800a13c:	bf48      	it	mi
 800a13e:	b2ad      	uxthmi	r5, r5
 800a140:	6031      	str	r1, [r6, #0]
 800a142:	07d9      	lsls	r1, r3, #31
 800a144:	bf44      	itt	mi
 800a146:	f043 0320 	orrmi.w	r3, r3, #32
 800a14a:	6023      	strmi	r3, [r4, #0]
 800a14c:	b11d      	cbz	r5, 800a156 <_printf_i+0x19e>
 800a14e:	2310      	movs	r3, #16
 800a150:	e7ac      	b.n	800a0ac <_printf_i+0xf4>
 800a152:	4827      	ldr	r0, [pc, #156]	@ (800a1f0 <_printf_i+0x238>)
 800a154:	e7e9      	b.n	800a12a <_printf_i+0x172>
 800a156:	6823      	ldr	r3, [r4, #0]
 800a158:	f023 0320 	bic.w	r3, r3, #32
 800a15c:	6023      	str	r3, [r4, #0]
 800a15e:	e7f6      	b.n	800a14e <_printf_i+0x196>
 800a160:	4616      	mov	r6, r2
 800a162:	e7bd      	b.n	800a0e0 <_printf_i+0x128>
 800a164:	6833      	ldr	r3, [r6, #0]
 800a166:	6825      	ldr	r5, [r4, #0]
 800a168:	6961      	ldr	r1, [r4, #20]
 800a16a:	1d18      	adds	r0, r3, #4
 800a16c:	6030      	str	r0, [r6, #0]
 800a16e:	062e      	lsls	r6, r5, #24
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	d501      	bpl.n	800a178 <_printf_i+0x1c0>
 800a174:	6019      	str	r1, [r3, #0]
 800a176:	e002      	b.n	800a17e <_printf_i+0x1c6>
 800a178:	0668      	lsls	r0, r5, #25
 800a17a:	d5fb      	bpl.n	800a174 <_printf_i+0x1bc>
 800a17c:	8019      	strh	r1, [r3, #0]
 800a17e:	2300      	movs	r3, #0
 800a180:	6123      	str	r3, [r4, #16]
 800a182:	4616      	mov	r6, r2
 800a184:	e7bc      	b.n	800a100 <_printf_i+0x148>
 800a186:	6833      	ldr	r3, [r6, #0]
 800a188:	1d1a      	adds	r2, r3, #4
 800a18a:	6032      	str	r2, [r6, #0]
 800a18c:	681e      	ldr	r6, [r3, #0]
 800a18e:	6862      	ldr	r2, [r4, #4]
 800a190:	2100      	movs	r1, #0
 800a192:	4630      	mov	r0, r6
 800a194:	f7f6 f82c 	bl	80001f0 <memchr>
 800a198:	b108      	cbz	r0, 800a19e <_printf_i+0x1e6>
 800a19a:	1b80      	subs	r0, r0, r6
 800a19c:	6060      	str	r0, [r4, #4]
 800a19e:	6863      	ldr	r3, [r4, #4]
 800a1a0:	6123      	str	r3, [r4, #16]
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1a8:	e7aa      	b.n	800a100 <_printf_i+0x148>
 800a1aa:	6923      	ldr	r3, [r4, #16]
 800a1ac:	4632      	mov	r2, r6
 800a1ae:	4649      	mov	r1, r9
 800a1b0:	4640      	mov	r0, r8
 800a1b2:	47d0      	blx	sl
 800a1b4:	3001      	adds	r0, #1
 800a1b6:	d0ad      	beq.n	800a114 <_printf_i+0x15c>
 800a1b8:	6823      	ldr	r3, [r4, #0]
 800a1ba:	079b      	lsls	r3, r3, #30
 800a1bc:	d413      	bmi.n	800a1e6 <_printf_i+0x22e>
 800a1be:	68e0      	ldr	r0, [r4, #12]
 800a1c0:	9b03      	ldr	r3, [sp, #12]
 800a1c2:	4298      	cmp	r0, r3
 800a1c4:	bfb8      	it	lt
 800a1c6:	4618      	movlt	r0, r3
 800a1c8:	e7a6      	b.n	800a118 <_printf_i+0x160>
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	4632      	mov	r2, r6
 800a1ce:	4649      	mov	r1, r9
 800a1d0:	4640      	mov	r0, r8
 800a1d2:	47d0      	blx	sl
 800a1d4:	3001      	adds	r0, #1
 800a1d6:	d09d      	beq.n	800a114 <_printf_i+0x15c>
 800a1d8:	3501      	adds	r5, #1
 800a1da:	68e3      	ldr	r3, [r4, #12]
 800a1dc:	9903      	ldr	r1, [sp, #12]
 800a1de:	1a5b      	subs	r3, r3, r1
 800a1e0:	42ab      	cmp	r3, r5
 800a1e2:	dcf2      	bgt.n	800a1ca <_printf_i+0x212>
 800a1e4:	e7eb      	b.n	800a1be <_printf_i+0x206>
 800a1e6:	2500      	movs	r5, #0
 800a1e8:	f104 0619 	add.w	r6, r4, #25
 800a1ec:	e7f5      	b.n	800a1da <_printf_i+0x222>
 800a1ee:	bf00      	nop
 800a1f0:	0800a80d 	.word	0x0800a80d
 800a1f4:	0800a81e 	.word	0x0800a81e

0800a1f8 <memmove>:
 800a1f8:	4288      	cmp	r0, r1
 800a1fa:	b510      	push	{r4, lr}
 800a1fc:	eb01 0402 	add.w	r4, r1, r2
 800a200:	d902      	bls.n	800a208 <memmove+0x10>
 800a202:	4284      	cmp	r4, r0
 800a204:	4623      	mov	r3, r4
 800a206:	d807      	bhi.n	800a218 <memmove+0x20>
 800a208:	1e43      	subs	r3, r0, #1
 800a20a:	42a1      	cmp	r1, r4
 800a20c:	d008      	beq.n	800a220 <memmove+0x28>
 800a20e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a212:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a216:	e7f8      	b.n	800a20a <memmove+0x12>
 800a218:	4402      	add	r2, r0
 800a21a:	4601      	mov	r1, r0
 800a21c:	428a      	cmp	r2, r1
 800a21e:	d100      	bne.n	800a222 <memmove+0x2a>
 800a220:	bd10      	pop	{r4, pc}
 800a222:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a226:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a22a:	e7f7      	b.n	800a21c <memmove+0x24>

0800a22c <memcpy>:
 800a22c:	440a      	add	r2, r1
 800a22e:	4291      	cmp	r1, r2
 800a230:	f100 33ff 	add.w	r3, r0, #4294967295
 800a234:	d100      	bne.n	800a238 <memcpy+0xc>
 800a236:	4770      	bx	lr
 800a238:	b510      	push	{r4, lr}
 800a23a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a23e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a242:	4291      	cmp	r1, r2
 800a244:	d1f9      	bne.n	800a23a <memcpy+0xe>
 800a246:	bd10      	pop	{r4, pc}

0800a248 <_realloc_r>:
 800a248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a24c:	4680      	mov	r8, r0
 800a24e:	4615      	mov	r5, r2
 800a250:	460c      	mov	r4, r1
 800a252:	b921      	cbnz	r1, 800a25e <_realloc_r+0x16>
 800a254:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a258:	4611      	mov	r1, r2
 800a25a:	f7ff bbad 	b.w	80099b8 <_malloc_r>
 800a25e:	b92a      	cbnz	r2, 800a26c <_realloc_r+0x24>
 800a260:	f7ff fc9a 	bl	8009b98 <_free_r>
 800a264:	2400      	movs	r4, #0
 800a266:	4620      	mov	r0, r4
 800a268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a26c:	f000 f81a 	bl	800a2a4 <_malloc_usable_size_r>
 800a270:	4285      	cmp	r5, r0
 800a272:	4606      	mov	r6, r0
 800a274:	d802      	bhi.n	800a27c <_realloc_r+0x34>
 800a276:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a27a:	d8f4      	bhi.n	800a266 <_realloc_r+0x1e>
 800a27c:	4629      	mov	r1, r5
 800a27e:	4640      	mov	r0, r8
 800a280:	f7ff fb9a 	bl	80099b8 <_malloc_r>
 800a284:	4607      	mov	r7, r0
 800a286:	2800      	cmp	r0, #0
 800a288:	d0ec      	beq.n	800a264 <_realloc_r+0x1c>
 800a28a:	42b5      	cmp	r5, r6
 800a28c:	462a      	mov	r2, r5
 800a28e:	4621      	mov	r1, r4
 800a290:	bf28      	it	cs
 800a292:	4632      	movcs	r2, r6
 800a294:	f7ff ffca 	bl	800a22c <memcpy>
 800a298:	4621      	mov	r1, r4
 800a29a:	4640      	mov	r0, r8
 800a29c:	f7ff fc7c 	bl	8009b98 <_free_r>
 800a2a0:	463c      	mov	r4, r7
 800a2a2:	e7e0      	b.n	800a266 <_realloc_r+0x1e>

0800a2a4 <_malloc_usable_size_r>:
 800a2a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2a8:	1f18      	subs	r0, r3, #4
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	bfbc      	itt	lt
 800a2ae:	580b      	ldrlt	r3, [r1, r0]
 800a2b0:	18c0      	addlt	r0, r0, r3
 800a2b2:	4770      	bx	lr

0800a2b4 <_init>:
 800a2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2b6:	bf00      	nop
 800a2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ba:	bc08      	pop	{r3}
 800a2bc:	469e      	mov	lr, r3
 800a2be:	4770      	bx	lr

0800a2c0 <_fini>:
 800a2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2c2:	bf00      	nop
 800a2c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2c6:	bc08      	pop	{r3}
 800a2c8:	469e      	mov	lr, r3
 800a2ca:	4770      	bx	lr
